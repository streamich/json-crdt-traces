[[1000000,43040],[4,[-1,43039],[[[-1,43037],"# Introduc"],[[-1,43025],"ing"],[[-1,31985]," fast"],[[-1,31980],1],[[-1,43022]," RGA "],[[-1,31999],"implementation"],[[-1,43017],9],[[-1,43008]," that will power "],[[-1,42989],"JSON CRDT"],[[-1,32001],"s"],[[-1,42980],"\n\nFirst, a little note on JSON CRDT. JSON CRDT will be "],[[-1,42923],"a specification and a JavaScript\nimplementation of JSON d"],[[-1,42856],"ata type as a CRDT ("],[[-1,42835],"Conflict-free Replicated "],[[-1,42808],"Data Type"],[[-1,42798],"). The\naim for JSON CRDT is to create a sound state-of"],[[-1,42742],"-the"],[[-1,42736],"-art CRDT specification which will\n"],[[-1,42697],"support all JSON values"],[[-1,42672],", including lists, for which this RGA algorithm is needed.\n\nNow back to the RGA algorithm, what is that? RGA stands for "],[[-1,10479],"["],[[-1,42493],"*"],[[-1,42552],"Replicated Growable Array"],[[-1,42492],"*"],[[-1,10478],"]["],[[-1,10475],"rga"],[[-1,10476],"]"],[[-1,42527],",\nalso known a"],[[-1,42511],"s CT ("],[[-1,10575],"["],[[-1,42489],"*"],[[-1,42491],1],[[-1,42504],"Causal Tree"],[[-1,42488],"*"],[[-1,10574],"][causal-tree]"],[[-1,42505],")"],[[-1,42487],", sometimes you might find it abbreviated as CT/RGA."],[[-1,42433]," T"],[[-1,42427],"he\nCT/RGA algorithm"],[[-1,42406],", or RGA for short, allows to implement "],[[-1,42366],2],[[-1,42364],"conflict free"],[[-1,42350]," list data"],[[-1,42328],"\n"],[[-1,42340],1],[[-1,42339],"structures"],[[-1,42327],", such as"],[[-1,42314]," strings, binary blobs, or arrays ("],[[-1,42278],"think JSON arrays"],[[-1,42261],12],[[-1,42240],1],[[-1,42249],8],[[-1,42279],")"],[[-1,42235],"."],[[-1,42318],2],[[-1,42408],1],[[-1,42431],2],[[-1,42435],"\n\n"],[[-1,42234],"What is conflict-free"],[[-1,42204],", or CRDTs? Those are data types, which can be forked"],[[-1,42082],";"],[[-1,42151],4],[[-1,42147]," the"],[[-1,42141],"n\ntwo or more peers can edit their copies independently"],[[-1,42081]," and at any point in time all"],[[-1,42042]," the\nforks can be merged back "],[[-1,41956],"without conflicts. Also, "],[[-1,41930],"forks can be merged in any order,\nwhich does not change the contents of the final document.\n"],[[-1,41803],"\n"],[[-1,41838],"\n## `json-joy` RGA implementation\n\n"],[[-1,41802],"Now "],[[-1,41792],"`json-joy` implements and advanced version of "],[[-1,41743],"the "],[[-1,41746],"RGA"],[[-1,41739]," "],[[-1,41736],"algorithm ("],[[-1,41724],"w"],[[-1,41721],"e will take a look\n"],[[-1,41595],"at it "],[[-1,41702],"later what is "],[[-1,41686],"advanced about it"],[[-1,41668],", bu"],[[-1,41662],"t for now, just think about it as being very efficient\nand fast)."],[[-1,41589]," Great news is that it is ready, and you can use it, lets see how it can be done.\n\n"],[[-1,41491],"First"],[[-1,41425],","],[[-1,41486]," you will need to install the `"],[[-1,41453],"json-joy` "],[[-1,41437],"NPM package."],[[-1,41424],"\n\n```\n"],[[-1,41412],"yarn add json-joy"],[[-1,41414],1],[[-1,41418],"\n```"],[[-1,41248],"\n\n`json-joy` i"],[[-1,41232],"mplements an"],[[-1,41218]," abstract version of the RGA algorithm in `AbstractRga` class, where\nelements can be of any type. But below w"],[[-1,41107],"e will take a look at application of it to "],[[-1,41059],"a string\ndata type, which is implemented in the `StringRga` class."],[[-1,41064],4],[[-1,41109],1],[[-1,41220],1],[[-1,41234],1],[[-1,41443],3],[[-1,41455],1],[[-1,41500],7],[[-1,41506],3],[[-1,41597],"\n\n"],[[-1,41395],"In general, RGAs support two operations: ("],[[-1,41352],"1"],[[-1,41350],") insert"],[[-1,41338],"; and ("],[[-1,41330],"2"],[[-1,41328],") delete. Lets see how to use those"],[[-1,41290],"\nfor string editing.\n"],[[-1,40917],"\nImport the `StringRga` class."],[[-1,40885]," Also, import the `ts` helper, which will allow "],[[-1,40745],"u"],[[-1,40837],1],[[-1,40836],"s"],[[-1,40744]," to"],[[-1,40835]," cr"],[[-1,40824],"eate"],[[-1,40800],"\n"],[[-1,40820],1],[[-1,40819],"\"t"],[[-1,40811],"imestamps\""],[[-1,40799]," ("],[[-1,40796],"aka "],[[-1,40782],"*operation IDs"],[[-1,40762],"*). All elements"],[[-1,40741]," in RGA ("],[[-1,40731],"and usually in all CRDTs"],[[-1,40705],", for that"],[[-1,40479],"\n"],[[-1,40695],1],[[-1,40694],"matter"],[[-1,40707],1],[[-1,40732],")"],[[-1,40477]," "],[[-1,40688],1],[[-1,40687],"have a uni"],[[-1,40673],"que ID. W"],[[-1,40662],"e will need the `ts` helper to generate those IDs."],[[-1,40664],1],[[-1,40677],2],[[-1,40765],2],[[-1,40767],1],[[-1,40786],3],[[-1,40792],3],[[-1,40797],1],[[-1,40817],3],[[-1,40832],4],[[-1,41269],"\n\n```ts\n"],[[-1,40474],"import {StringRga} from 'json-joy/es2020/json-crdt/types/rga-string/StringRga';\n"],[[-1,41257],"import {"],[[-1,40393],"ts"],[[-1,40993],9],[[-1,41249],"}"],[[-1,40984]," from 'json-joy/"],[[-1,40962],"es2020/json-crdt"],[[-1,40391],"-patch"],[[-1,39594],"/clock"],[[-1,40946],27],[[-1,40919],"';"],[[-1,40968],4],[[-1,41261],"\n```"],[[-1,40887],"\n\n"],[[-1,40612],"Don't worry "],[[-1,40576],"`StringRga` will not actually store an ID f"],[[-1,40531],"or every character, but "],[[-1,40499],"more on that"],[[-1,40475],"\n"],[[-1,40487],1],[[-1,40486],"later."],[[-1,40259]," IDs a"],[[-1,40251],"re 2-tuples of *Site ID* ("],[[-1,40224],"aka *Process ID*"],[[-1,39906]," or *Session ID*"],[[-1,40225],")"],[[-1,40208]," and an ever"],[[-1,39889],"\n"],[[-1,40196],1],[[-1,40195],"increasing sequence"],[[-1,39887]," "],[[-1,40166],1],[[-1,40176],1],[[-1,40175],"counter"],[[-1,40162],", "],[[-1,40152],"i.e. "],[[-1,40143],"\"time\""],[[-1,39999],"; es"],[[-1,32004],"s"],[[-1,39995],"entially, and ID is a "],[[-1,39965],"*Logical Timestamp*"],[[-1,39944],","],[[-1,39885],"\n"],[[-1,39943],1],[[-1,39942],"where each user will"],[[-1,39883]," "],[[-1,39922],1],[[-1,39921],"have their own "],[[-1,39858],"*Logical Clock*, and the collectio"],[[-1,32003],"n"],[[-1,39824]," nof all Logica"],[[-1,32002],"l"],[[-1,39809]," C"],[[-1,39799],"locks\nof all "],[[-1,39780],"users will for a "],[[-1,39747],"*"],[[-1,39749],1],[[-1,39763],"Vector Clock"],[[-1,39750],"*"],[[-1,39751],"."],[[-1,39786],5],[[-1,39801],1],[[-1,39807],3],[[-1,39880],18],[[-1,39882],1],[[-1,39946],1],[[-1,39973],7],[[-1,40007],4],[[-1,40137],2],[[-1,40011],1],[[-1,40147],2],[[-1,40160],4],[[-1,40168],1],[[-1,40165],1],[[-1,40253],1],[[-1,40507],4],[[-1,40533],1],[[-1,40578],1],[[-1,40584],5],[[-1,40600],10],[[-1,41293],1],[[-1,41292],"\n"],[[-1,40384],"\nNow cr"],[[-1,40369],"eate the text CRDT data type"],[[-1,40119],", you will need to give it a unique ID:"],[[-1,40341],1],[[-1,40340],"\n\n```ts"],[[-1,40135],"\nconst sid = 1"],[[-1,39452],"23"],[[-1,40121],";"],[[-1,40035]," // Site ID"],[[-1,40302],"\nlet time = 0;"],[[-1,40024],"  // "],[[-1,40017],"\"time\""],[[-1,40019],1],[[-1,40080],"\n"],[[-1,40078],"\nconst id = "],[[-1,40066],4],[[-1,39587],"ts"],[[-1,40062],9],[[-1,40053],"("],[[-1,40038],"sid"],[[-1,40052],1],[[-1,40051],", time++);"],[[-1,40333],"\n"],[[-1,40327],"const str = new StringRga"],[[-1,40288],"("],[[-1,40041],"id"],[[-1,40286],24],[[-1,40261],");"],[[-1,40287],1],[[-1,40332],"\n```\n"],[[-1,39746],"\nWe can see what is storied in our string us"],[[-1,39700],"ing the `.view("],[[-1,39683],")` method, lets verify that"],[[-1,39642],"\n"],[[-1,39656],1],[[-1,39655],"it is empty:"],[[-1,39641],"\n\n```ts\n"],[[-1,39616],"console.log("],[[-1,39629],"str.view("],[[-1,39618],")"],[[-1,39603],");\n// \"\""],[[-1,39617],1],[[-1,39620],1],[[-1,39633],"\n```"],[[-1,39583],"\n\nWe can also print the "],[[-1,39548],"internal state"],[[-1,39530]," like so:\n\n```ts"],[[-1,39485],"\nconsole.log("],[[-1,39471],"str + ''"],[[-1,39462],");"],[[-1,39472],1],[[-1,39514],"\n"],[[-1,39460],"// "],[[-1,39509],"StringRga "],[[-1,39450],"123"],[[-1,39499],".0 { \"\" }\n"],[[-1,39457],"// "],[[-1,39489],"└─ ∅"],[[-1,39513],"\n```"],[[-1,39454],"\n\n"],[[-1,39447],"It shows that the string has ID `123.0` and "],[[-1,39401],"empty contents."],[[-1,39374],"\n\nNow lets inse"],[[-1,39357],"rt "],[[-1,39151],"somethign"],[[-1,39354],9],[[-1,39345]," in to the "],[[-1,39328],"string."],[[-1,39142]," A local insert can be performed using the"],[[-1,39076],"\n"],[[-1,39100],1],[[-1,39099],"`.insAt"],[[-1,39090],"("],[[-1,39087],")` method."],[[-1,39089],1],[[-1,39092],1],[[-1,39321],"\n\n```ts\n"],[[-1,38383],"let content = 'Hell world!';\nstr.insAt(0, ts(sid, time), content);\ntime += content.length;\nconsole.log(str + '');"],[[-1,38587],114],[[-1,38473],"\n// StringRga 123.0 { \"Hell world!\" }\n// └─ StringChunk 123.1!11 len:11 { \"Hell world!\" }"],[[-1,38701],113],[[-1,38816],114],[[-1,39309],69],[[-1,39158],3],[[-1,39240],34],[[-1,39155],3],[[-1,39206],48],[[-1,39313],"\n```"],[[-1,39075],"\n\n"],[[-1,39072],"You can see that a `StringChunk` was inserted"],[[-1,39023],", where `123.1!11` "],[[-1,38996],"specifies the ID of\n"],[[-1,38974],"the first cha"],[[-1,38957],"racter of the "],[[-1,38936],"chunk `123.1` and `!11` denotes the length of the chunk."],[[-1,38878],"\n\nLets perform another insert, to fi"],[[-1,38840],"x our text:\n\n```ts\n"],[[-1,38270],"content = 'o,';\nstr.insAt(4, ts(sid, time), content);\ntime += content.length;"],[[-1,35430],"\n"],[[-1,38193],"\nconsole.log(str + '');\n"],[[-1,38007],"// "],[[-1,38169],"StringRga 123.0 { \"Hello, world!\" }\n"],[[-1,38004],"// "],[[-1,38133],"└─ StringChunk 123.12!2 len:13 { \"o,\" }\n"],[[-1,38001],"// "],[[-1,38093],"   ← StringChunk 123.1!4 len:4 { \"Hell\" }\n"],[[-1,37998],"// "],[[-1,38051],"   → StringChunk 123.5!7 len:7 { \" world!\" }"],[[-1,35483],"\n"],[[-1,35482],1],[[-1,35481],"\nconsole.log(str.view());"],[[-1,35455],"\n// Hello"],[[-1,35438],", world!"],[[-1,35446],4],[[-1,38821],"\n```"],[[-1,38842],1],[[-1,38880],1],[[-1,38943],6],[[-1,38961],2],[[-1,38976],1],[[-1,39004],6],[[-1,39027],2],[[-1,39073],"\n"],[[-1,37995],"\nYou can see we fixed the t"],[[-1,37964],"ext to be `Hello, world"],[[-1,37939],"!"],[[-1,37930],"`, now you might also notice that\nthe string now has three `StringChunk` nodes arranged in a "],[[-1,32028],"binary"],[[-1,37837],6],[[-1,37831]," tree, where `←`"],[[-1,37813],"\nand `→` represent the left and right children."],[[-1,37760]," More on that later, but that is the\nsecret "],[[-1,32021],"source"],[[-1,37716],5],[[-1,37711]," which makes the `json-joy` RGA implementation really fast: "],[[-1,37513],"the "],[[-1,37651],"text"],[[-1,37508],"\n"],[[-1,37647],1],[[-1,37646],"chunks"],[[-1,37507]," follow what is known"],[[-1,37485]," "],[[-1,37640],20],[[-1,37620],"in academia"],[[-1,37605],12],[[-1,37593]," *"],[[-1,37569],"b"],[[-1,37591],1],[[-1,37590],"lock"],[[-1,37481],"-wise"],[[-1,37586],1],[[-1,37585],"*"],[[-1,37476]," "],[[-1,37469],"storage, where chunks of text\nare stored "],[[-1,37427],"in blocks with "],[[-1,37403],"a small metadata p"],[[-1,37381],"iece allocated for each block, instead of\nstoring each character "],[[-1,32014],"separately"],[[-1,37316],10],[[-1,37306],", with metadata allocated for each character. And\nbinary tree represents a "],[[-1,37161],"custom ["],[[-1,37152],"rope-like"],[[-1,37142],"]"],[[-1,37138],"["],[[-1,37136],"rope"],[[-1,37137],"]"],[[-1,37132]," data structure, specifically"],[[-1,37093],"\n"],[[-1,37103],1],[[-1,37102],"designed"],[[-1,37092]," for the RGA algorithm."],[[-1,37141],2],[[-1,37153],1],[[-1,37231],7],[[-1,37385],2],[[-1,37412],8],[[-1,37475],3],[[-1,37584],1],[[-1,37567],1],[[-1,37565],24],[[-1,37530],1],[[-1,37541],10],[[-1,37529],11],[[-1,37566],1],[[-1,37518],5],[[-1,37583],4],[[-1,37577],6],[[-1,37579],1],[[-1,37609],2],[[-1,37764],2],[[-1,37766],"\n\n"],[[-1,37224],"["],[[-1,37222],"rope"],[[-1,37217],"]: https://en.wikipedia.org/wiki/Rope_(data_structure)\n"],[[-1,37069],"\nAll "],[[-1,37062],"of this might sound overwhelming, but "],[[-1,37009],"that is expected, you will not need to\nknow or use any of this"],[[-1,36943],"; this is the lower-level ("],[[-1,36915],"under-the"],[[-1,36904],"-hood-workings"],[[-1,36889],") that will\npower the JSON CRDT"],[[-1,36673]," implementation"],[[-1,36846],", for you"],[[-1,36819],"&mdash;"],[[-1,36837],1],[[-1,36836],"as a devel"],[[-1,36824],"oper"],[[-1,36812],"&mdash;it wil"],[[-1,36795],"l be exposed"],[[-1,36657],"\n"],[[-1,36783],1],[[-1,36782],"in a"],[[-1,36655]," "],[[-1,36776],1],[[-1,36775],"nice"],[[-1,36654],"ly packaged"],[[-1,36771]," API where you don't need to know anything about the inner workings"],[[-1,36642],"\n"],[[-1,36704],1],[[-1,36703],"of the "],[[-1,36692],"CRDT"],[[-1,36640]," "],[[-1,36688],1],[[-1,36687],"algorithms.\n\n"],[[-1,36639],"For the sake of completeness, lets briefly take a look at other public methods that\n"],[[-1,36549],"the `StringRga` class expo"],[[-1,36521],"ses. Above I mentioned that RGA "],[[-1,36485],"usually supports two operations;\ninsert and delete. "],[[-1,36429],"That is true, but actually"],[[-1,36390],","],[[-1,36403]," in "],[[-1,36395],"CRDTs"],[[-1,36389],", those are usually sub"],[[-1,36364],"-divided\ninto *remote* and *local* operations. So"],[[-1,36303],","],[[-1,36302],1],[[-1,36315]," essentially"],[[-1,36300]," `StringRga` supports four\nmain operations: "],[[-1,36253],"("],[[-1,36251],"1"],[[-1,36249],") remote insert; ("],[[-1,36228],"2"],[[-1,36230],1],[[-1,36231],")"],[[-1,36227]," remote delete; ("],[[-1,36209],"3"],[[-1,36207],") local insert; and ("],[[-1,36185],"4"],[[-1,36184],5],[[-1,36186],")"],[[-1,36177]," local"],[[-1,36164],"\n"],[[-1,36171],1],[[-1,36170],"del"],[[-1,36161],"ete."],[[-1,36155],"\n\nWhat are those local vs remote operati"],[[-1,36108],"ons"],[[-1,36115],3],[[-1,36112],"?"],[[-1,36105]," Local operations "],[[-1,36081],"are the on"],[[-1,36067],"es that user"],[[-1,36045],"\n"],[[-1,36055],1],[[-1,36054],"performs"],[[-1,36044]," on their machine, "],[[-1,36001],"where "],[[-1,35993],"operations contain "],[[-1,35970],"the offset position in the text,"],[[-1,35928],"\nfor example:\n\n- `insertAt("],[[-1,35900],"position, text"],[[-1,35886],1],[[-1,35901],")"],[[-1,35884],"`\n- `deleteAt("],[[-1,35869],"position, length"],[[-1,35870],")"],[[-1,35853],"`\n\nRemote operations are the ones received from "],[[-1,35803],"other peers, and those don't "],[[-1,35772],"reference the\nposition in text, instead they reference one or more IDs of the CRDT after which to\nperform the operation, for example:\n\n"],[[-1,35631],"- "],[[-1,35602],"`"],[[-1,35629],"insert"],[[-1,35623],5],[[-1,35618],"("],[[-1,35616],"afterId, text"],[[-1,35617],")"],[[-1,35603],"`"],[[-1,35601],"\n- `"],[[-1,35590],"delete("],[[-1,35582],"...ids"],[[-1,35576],1],[[-1,35583],")"],[[-1,35574],"`\n\nWe have already seen the local insert operation of the `StringRga`, it was `.insAt("],[[-1,35486],")`."],[[-1,35429],"\nNow lets take a l"],[[-1,35403],"ook at the remote insert operation `.ins"],[[-1,35356],"("],[[-1,35353],")`. It works similar to"],[[-1,35328],"\n`"],[[-1,35320],".ins"],[[-1,35312],"At("],[[-1,35307],")`, but instead of the i"],[[-1,35279],"nsertion position, we will need to specify the ID of\nthe character after which we want to apply our insert.\n\n"],[[-1,35162],"Consider we have three users: "],[[-1,32234],"U"],[[-1,35132],1],[[-1,35131],"ser 1 will create a new string "],[[-1,34449],"`"],[[-1,35100],"\"js\""],[[-1,34448],"`"],[[-1,35096],", then they will\nfork it and "],[[-1,35061],"send the "],[[-1,35050],"t"],[[-1,35035],"hat string to two other users: ("],[[-1,35002],"1"],[[-1,35000],") "],[[-1,32232],"U"],[[-1,34998],1],[[-1,34997],"ser "],[[-1,34991],"2 will insert "],[[-1,34447],"`"],[[-1,34977],"\"on\""],[[-1,34446],"`"],[[-1,34973]," at"],[[-1,34964],"\nthe end of it; ("],[[-1,34946],"2"],[[-1,34944],") "],[[-1,32230],"U"],[[-1,34942],1],[[-1,34941],"ser 3 will concurrently ("],[[-1,34915],"at the sam"],[[-1,34903],"e time"],[[-1,34896],") insert "],[[-1,34445],"`"],[[-1,34887],"\" joy\""],[[-1,34444],"`"],[[-1,34881]," at the"],[[-1,34872],"\nsame "],[[-1,34862],"position. Regardless in which order "],[[-1,34810],"we apply the two remote operations of\n"],[[-1,32228],"U"],[[-1,34772],1],[[-1,34771],"ser "],[[-1,34757],"2 and "],[[-1,32226],"U"],[[-1,34751],1],[[-1,34750],"ser 3"],[[-1,34743],", we "],[[-1,32224],"wi"],[[-1,32218],"ll "],[[-1,32222],2],[[-1,34738],7],[[-1,34731],"re"],[[-1,34727],"ceive the same final result."],[[-1,34504],"\n\nLets create a new string `str1` with contents `\"js\"`"],[[-1,34443],", we will use the local `.insAt("],[[-1,34409],")`"],[[-1,34399],"\n"],[[-1,34407],1],[[-1,34406],"method"],[[-1,34398]," to do that"],[[-1,34411],1],[[-1,34450],":"],[[-1,34699],"\n\n```"],[[-1,33033],"ts"],[[-1,34694],"\n"],[[-1,34687],"const user1 = 123;\nconst user2 = 345;\nconst user3 = 789;"],[[-1,34631],16],[[-1,34615],"\n\n// User 1 creates a new string\nconst str1 = new StringRga(ts(user1, 0));\nstr1.insAt(0, ts(user1, 1), 'js');"],[[-1,34693],1],[[-1,34692],"\n```"],[[-1,32215],"\n\nNothing new here, just one thing to "],[[-1,32175],"note that the IDs of characters "],[[-1,32141],"`"],[[-1,32134],"j` and "],[[-1,32125],"`s` will\nbe `123.1` and `123.2`, respec"],[[-1,32082],"tively. ("],[[-1,32072],"And ID of the string is `123.0`."],[[-1,32073],")"],[[-1,32086],2],[[-1,32127],1],[[-1,32140],3],[[-1,32143],1],[[-1,32177],1],[[-1,34729],1],[[-1,34745],1],[[-1,34767],7],[[-1,34826],13],[[-1,34866],2],[[-1,34874],1],[[-1,34905],1],[[-1,34916],1],[[-1,34947],1],[[-1,34970],4],[[-1,34993],1],[[-1,35003],1],[[-1,35045],5],[[-1,35049],2],[[-1,35052],1],[[-1,35067],3],[[-1,35170],6],[[-1,35283],2],[[-1,35309],1],[[-1,35316],2],[[-1,35326],3],[[-1,35330],1],[[-1,35355],1],[[-1,35363],2],[[-1,35360],1],[[-1,35361],1],[[-1,35411],4],[[-1,35488],1],[[-1,35597],6],[[-1,35637],3],[[-1,35774],1],[[-1,35805],1],[[-1,35938],5],[[-1,35974],2],[[-1,36020],18],[[-1,36025],4],[[-1,36071],2],[[-1,36087],3],[[-1,36157],1],[[-1,36167],2],[[-1,36210],1],[[-1,36252],1],[[-1,36256],2],[[-1,36366],1],[[-1,36399],2],[[-1,36433],3],[[-1,36489],2],[[-1,36523],1],[[-1,36555],3],[[-1,36674],"\n"],[[-1,36696],3],[[-1,36778],1],[[-1,36799],2],[[-1,36826],1],[[-1,36848],"\n"],[[-1,34387],"Now imagin"],[[-1,34375],"e that this string was sent to two other users, who"],[[-1,34322]," "],[[-1,34298],"concurrently appended\n`\""],[[-1,33523]," joy"],[[-1,34274],2],[[-1,34272],"\"` and `\""],[[-1,33517],"on"],[[-1,34263],4],[[-1,34259],"\"` to it. "],[[-1,34245],"Then those users would send their "],[[-1,32039],"operations"],[[-1,34211],10],[[-1,34201]," b"],[[-1,34195],"ack to"],[[-1,34181],"\n"],[[-1,34189],1],[[-1,34188],"user 1"],[[-1,34158],", which will use the remote `.ins("],[[-1,34122],")` method "],[[-1,34110],"to apply those operations, lets"],[[-1,34069],"\n"],[[-1,34079],1],[[-1,34078],"do that:"],[[-1,34068],"\n\n```"],[[-1,33035],"ts"],[[-1,34063],"\n"],[[-1,34058],"// User 2 and 3 insert their changes at the same time \"ts(user1, 2)\"\nstr1.ins(ts(user1, 2), ts(user2, 3), ' joy');\nstr1.ins(ts(user1, 2), ts(user3, 3), 'on');\n\nconsole.log(str1 + '');\n// StringRga 123.0 { \"json joy\" }\n// └─ StringChunk 789.3!2 len:8 { \"on\" }\n//    ← StringChunk 123.1!2 len:2 { \"js\" }\n//    → StringChunk 345.3!4 len:4 { \" joy\" }"],[[-1,34062],"\n```"],[[-1,33712],"\n\nThe final string is `\"json joy\"`. You can see that `.ins("],[[-1,33651],")` first inserted `\""],[[-1,33629]," joy\"`"],[[-1,33618],"\n"],[[-1,33623],1],[[-1,33622],"and"],[[-1,33617]," then `\"on\"`, lets try to reverse the order and see if we stil"],[[-1,33553],"l get the same"],[[-1,33537],"\nresult"],[[-1,33528],":\n\n"],[[-1,33514],"```"],[[-1,33509],"ts"],[[-1,33507],1],[[-1,33506],"\n"],[[-1,33503],"// User 1 creates a new string \"js\"\nconst str2 = new StringRga(ts(user1, 0));\nstr2.insAt(0, ts(user1, 1), 'js');\n\n// User 2 and 3 insert their changes at the same time \"ts(user1, 2)\"\nstr2.ins(ts(user1, 2), ts(user3, 3), 'on');\nstr2.ins(ts(user1, 2), ts(user2, 3), ' joy');\n\nconsole.log(str2 + '');\n// StringRga 123.0 { \"json joy\" }\n// └─ StringChunk 345.3!4 len:8 { \" joy\" }\n//    ← StringChunk 789.3!2 len:4 { \"on\" }\n//      ← StringChunk 123.1!2 len:2 { \"js\" }"],[[-1,33041],1],[[-1,33505],"\n`"],[[-1,33040],"``"],[[-1,33037],"\n"],[[-1,33031],"\nAgain, we get the `\"json joy\"` final result. The reason that results are the same"],[[-1,32940],"\n"],[[-1,32949],1],[[-1,32948],"in both"],[[-1,32939]," cases is because we "],[[-1,32887],"use the unique character IDs to order the inserts."],[[-1,32835],"\nUser 3 "],[[-1,32782],"has "],[[-1,32827],4],[[-1,32823],"site ID `789`, but user "],[[-1,32797],"User "],[[-1,32790],"2 ha"],[[-1,32775],"s `"],[[-1,32768],"345`, hence for "],[[-1,32748],"conflict"],[[-1,32728],"\n"],[[-1,32740],1],[[-1,32739],"concurrent"],[[-1,32727]," inserts"],[[-1,32719],1],[[-1,32718]," User 3'"],[[-1,32708],"s "],[[-1,32705],"inserts will appear to the left of User 2's inserts.\nNo magic "],[[-1,32586],"here"],[[-1,32643],5],[[-1,32638],", that is just how "],[[-1,32590],"CT/"],[[-1,32619],"RGA algorithm is specified.\n"],[[-1,32577],"\n"],[[-1,32591],"\n"],[[-1,32582],"## "],[[-1,32503],"The "],[[-1,32574],"Block-wise CT/RGA"],[[-1,32479],"-"],[[-1,32557],1],[[-1,32556],"Split"],[[-1,28602]," Splay "],[[-1,32551],12],[[-1,32539],"Rope with Identifier Table"],[[-1,32473],"\n"],[[-1,31978],"\nThe `json-joy`"],[[-1,31962]," RGA implementation is "],[[-1,31937],"very fast,"],[[-1,31793]," we will see"],[[-1,31780]," that in the "],[[-1,31762],"next section.\nBut in "],[[-1,31737],"this section we will take a look at the data structure that powers the\n`StringRga` class. The `StringRga` class is fast because it uses a custom\n"],[[-1,31741],3],[[-1,31767],4],[[-1,31781],1],[[-1,31927],41],[[-1,31818],"state-of"],[[-1,31808],"-the-art "],[[-1,31810],1],[[-1,31886],"data structure that is specifically designed for the"],[[-1,31798],"\n"],[[-1,31834],1],[[-1,31833],"RGA algorithm."],[[-1,31796]," "],[[-1,31588],"It"],[[-1,31939],1],[[-1,31963],1],[[-1,32472],11],[[-1,32461]," implements "],[[-1,32449],26],[[-1,32423],"what can be describe as\n*"],[[-1,32394],"Block-wise CT/RGA-Split Rope with Identifier Table"],[[-1,32342],"* algorithm. It is\na mouthful, but the purpose of this section is to "],[[-1,32269],"decipher it for th"],[[-1,32247],"e reader.\n\n"],[[-1,31583],"- **Block-wise** means that the text is stored in blocks"],[[-1,31126]," ("],[[-1,31123],"`StringChunk` in `json-joy`"],[[-1,31124],")"],[[-1,31527],","],[[-1,31095],"\n  "],[[-1,31526],1],[[-1,31525],"where each block"],[[-1,31091]," "],[[-1,31509],3],[[-1,31506],"contains a small metadata piece, instead of storing each character"],[[-1,31089],"\n  "],[[-1,31440],1],[[-1,31439],"separately,"],[[-1,31085]," "],[[-1,31428],3],[[-1,31425],"with metadata allocated for each character. This is a well known technique\n"],[[-1,31083],79],[[-1,31350],"  in academia"],[[-1,31279],", however, it is not "],[[-1,31253],"commonly used in practice, because it is"],[[-1,31004],"\n"],[[-1,30802],"  difficult to implement. The canonical RGA algorithm is just a linked list of\n"],[[-1,30713],"  single characters, which is very easy to implement, but it is not "],[[-1,30645],5],[[-1,30640],"efficient.\n"],[[-1,30592],"  Block-wise representation is more efficient, but it is more difficult to implement"],[[-1,30497],",\n  as implicitly each character still has a"],[[-1,30311]," unique"],[[-1,30453],1],[[-1,30452]," ID"],[[-1,30445]," and can be "],[[-1,30428],"referenced by that ID."],[[-1,30303],"\n  "],[[-1,30406],1],[[-1,30405],"So,"],[[-1,30299]," "],[[-1,30402],3],[[-1,30399],"the blocks can be split and merged, which "],[[-1,30351],"requires a lot of bookkeeping."],[[-1,30298],"\n"],[[-1,30294],"- **CT/RGA** simpl"],[[-1,30274],"y means that the base algorithm is *Causal Trees/Replicated G"],[[-1,30211],"ro"],[[-1,30193],"wable "],[[-1,30185],"Array*.\n  This is "],[[-1,30156],"currently the "],[[-1,30137],"best known algorithm for"],[[-1,30081]," list ("],[[-1,30073],"strings, arrays"],[[-1,30074],")"],[[-1,30113]," CRDTs, "],[[-1,30057],"it\n  has formal "],[[-1,30039],"proofs of correctness"],[[-1,29972],", it is efficient, and is "],[[-1,29944],"probably most cited\n"],[[-1,29911],"  list CRDT algorithm in academic papers.\n"],[[-1,29866],"- **"],[[-1,29858],"Split** refer"],[[-1,29831],"s to the optimization described in the"],[[-1,29583],"\n  "],[[-1,29258],"["],[[-1,29684],1],[[-1,29637],"*\"High Responsiveness for Group Editing CRDTs\"*"],[[-1,27345]," ("],[[-1,27342],"Briot et al., 2006"],[[-1,27343],")"],[[-1,29590]," paper"],[[-1,29257],"]"],[[-1,29253],"[high-responsiveness-crdts]"],[[-1,29256],2],[[-1,29580],","],[[-1,29225],"\n  "],[[-1,29579],1],[[-1,29542],"a \"split link\" is stored"],[[-1,29221]," "],[[-1,29518],1],[[-1,29479],2],[[-1,29477],"to the the other part of the block that was split. This allows"],[[-1,29219],"\n  "],[[-1,29415],1],[[-1,29414],"to perform"],[[-1,29215]," "],[[-1,29404],1],[[-1,29348],2],[[-1,29346],"search and delete operations on blocks more efficiently"],[[-1,29289],", "],[[-1,29285],"w"],[[-1,29282],"hen the block was"],[[-1,29213],"\n  "],[[-1,29265],1],[[-1,29264],"split."],[[-1,28595],1],[[-1,28577],227],[[-1,28591],4],[[-1,28585],7],[[-1,28587],1],[[-1,28594],2],[[-1,29210],"\n"],[[-1,29206],"- **"],[[-1,28349],"Splay "],[[-1,29202],"Rope** means that the "],[[-1,29175],"RGA blocks are stored in a rope-like binary splay tree.\n  "],[[-1,29110],"Unlike the canonical RGA algorithm, where the blocks are stored in a linked list"],[[-1,29024],".\n  This allows for"],[[-1,26971]," faster than"],[[-1,28638]," `O"],[[-1,28633],"("],[[-1,28631],"lo"],[[-1,28627],"g n"],[[-1,28623],")`"],[[-1,28621],1],[[-1,28629],1],[[-1,28632],1],[[-1,28635],1],[[-1,29005],6],[[-1,28991],6],[[-1,28985]," lookups of text by position.\n"],[[-1,28952],"- **Identifier Table** is a"],[[-1,28875],"nother"],[[-1,26959]," splay"],[[-1,28869]," tree, which "],[[-1,28845],"stores the mapping of character IDs\n  to the blocks. This allows to perform lookups of characters by ID in"],[[-1,26952]," les"],[[-1,26944],"s than"],[[-1,26936],"\n  "],[[-1,26938],1],[[-1,26948],2],[[-1,28739],1],[[-1,28738],"`O(log n)`"],[[-1,26932]," "],[[-1,28728],3],[[-1,28725],"time"],[[-1,28640],1],[[-1,28721],20],[[-1,28701],"."],[[-1,28700],55],[[-1,28856],5],[[-1,28847],1],[[-1,28851],2],[[-1,28925],49],[[-1,28955],2],[[-1,28999],6],[[-1,29030],4],[[-1,29117],6],[[-1,29180],4],[[-1,29209],2],[[-1,29284],1],[[-1,29287],1],[[-1,29291],1],[[-1,29403],34],[[-1,29361],12],[[-1,29369],7],[[-1,29517],37],[[-1,29572],29],[[-1,29578],5],[[-1,29683],44],[[-1,29845],1],[[-1,29836],2],[[-1,29844],4],[[-1,29862],2],[[-1,29869],2],[[-1,29924],12],[[-1,29946],1],[[-1,30018],45],[[-1,30041],1],[[-1,30105],24],[[-1,30142],4],[[-1,30167],9],[[-1,30187],1],[[-1,30205],6],[[-1,30209],2],[[-1,30213],1],[[-1,30276],1],[[-1,30297],2],[[-1,30321],4],[[-1,30357],5],[[-1,30433],4],[[-1,30449],2],[[-1,30499],1],[[-1,30506],4],[[-1,30508],1],[[-1,30629],36],[[-1,30723],9],[[-1,30921],25],[[-1,30840],37],[[-1,30896],54],[[-1,31003],24],[[-1,30923],1],[[-1,30979],54],[[-1,31213],1],[[-1,31128],2],[[-1,31209],80],[[-1,31212],2],[[-1,31258],4],[[-1,31337],57],[[-1,31586],2],[[-1,32251],2],[[-1,32273],3],[[-1,32344],1],[[-1,32398],2],[[-1,32513],10],[[-1,32499],"\n"],[[-1,28618],"\n"],[[-1,28341],"A novelty of the `j"],[[-1,28320],"son-joy` imp"],[[-1,28304],"lementation is that it uses Splay trees for both\n"],[[-1,28138],"the"],[[-1,26677]," "],[[-1,26671],"Chunk"],[[-1,26676],4],[[-1,28135]," Rope and the Identifier Table. In practice this results into a very fast\ntree "],[[-1,28052],"traversal"],[[-1,26666],"s"],[[-1,28043],", because the tree"],[[-1,26665],"s"],[[-1,28025]," "],[[-1,26662],"a"],[[-1,26655],"re"],[[-1,26661],3],[[-1,28024],2],[[-1,28022]," splayed on "],[[-1,27879],"every insert"],[[-1,28010],12],[[-1,27998],", which results into\n"],[[-1,26931],"*"],[[-1,27866],"likely"],[[-1,26930],"*"],[[-1,27954],8],[[-1,27946]," faster than `O(log n)` access time"],[[-1,27710],", for all operations"],[[-1,26929],", as users usually"],[[-1,26653],":"],[[-1,26645],"\n"],[[-1,26652],1],[[-1,26651],"("],[[-1,26649],"1"],[[-1,26647],")"],[[-1,26650],1],[[-1,26911]," "],[[-1,26880],"type multiple"],[[-1,26643]," "],[[-1,26826],1],[[-1,26867],1],[[-1,26866],"characte"],[[-1,26850],"rs at the same position"],[[-1,26642]," ("],[[-1,26639],"for the Text R"],[[-1,26619],"ope"],[[-1,26615],"); and"],[[-1,26588],"\n"],[[-1,26609],1],[[-1,26608],"("],[[-1,26606],"2"],[[-1,26604],") "],[[-1,26598],"reference"],[[-1,26587]," the "],[[-1,26534],"most recent"],[[-1,26582],6],[[-1,26576]," IDs ("],[[-1,26569],"for the Identifier Table"],[[-1,26570],")"],[[-1,26602],3],[[-1,26607],1],[[-1,26625],3],[[-1,26640],1],[[-1,26858],4],[[-1,26910],25],[[-1,27911],"."],[[-1,27860]," When the trees are"],[[-1,26544],"\n"],[[-1,26824],1],[[-1,27689],1],[[-1,27841],1],[[-1,27840],"un"],[[-1,27823],"-"],[[-1,27838],"serialized from"],[[-1,27687]," "],[[-1,27822],1],[[-1,27821],"storage"],[[-1,27812],", they "],[[-1,27685],"can"],[[-1,26542]," "],[[-1,26822],1],[[-1,27682],1],[[-1,27681],"be"],[[-1,27801],3],[[-1,27798]," balanced, which results "],[[-1,27769],"into"],[[-1,26788]," "],[[-1,26778],"*"],[[-1,26787],"exac"],[[-1,26781],"tly"],[[-1,26777],"*"],[[-1,26540],"\n"],[[-1,26783],1],[[-1,27765],1],[[-1,27764],"`O(log n)`"],[[-1,26820]," "],[[-1,26775],"complexity"],[[-1,27678],1],[[-1,27754],12],[[-1,27731],", for all operations"],[[-1,26538]," "],[[-1,26764],1],[[-1,26818],1],[[-1,26817],"for freshly"],[[-1,26762]," "],[[-1,26789],1],[[-1,26806],1],[[-1,26805],"hydrated trees"],[[-1,26761]," ("],[[-1,26758],"say"],[[-1,26716],", when"],[[-1,26536],"\n"],[[-1,26710],1],[[-1,26709],"opening the document from a file"],[[-1,26755],1],[[-1,26719],1],[[-1,26754],30],[[-1,26759],")"],[[-1,26791],"."],[[-1,27711],1],[[-1,27677],"\n\n"],[[-1,27659],"T"],[[-1,27650],"h"],[[-1,27645],"ere are many more "],[[-1,27540],"minor "],[[-1,27627],"optimizations that make `json-joy` fast"],[[-1,27578],", but another one"],[[-1,27533],"\n"],[[-1,27490],"worth mentioning is the insert in the middle of the block"],[[-1,27409]," situation"],[[-1,27173]," described in"],[[-1,27085],"\n"],[[-1,26972],"["],[[-1,27160],1],[[-1,27087],1],[[-1,27159],"(Briot et al., 2006)"],[[-1,26974],"]"],[[-1,27088],1],[[-1,27139],7],[[-1,27132],"[high-responsiveness-c"],[[-1,27100],"rdts]"],[[-1,27110],5],[[-1,27399],", which results\ninto two "],[[-1,27372],"block splits."],[[-1,27350]," The "],[[-1,27324],"insert is per"],[[-1,27307],"f"],[[-1,27304],"ormed such that the new block is rotated"],[[-1,27260],"\nto the top, while the other two "],[[-1,27223],"blocks are rotated to the bottom"],[[-1,27174],"."],[[-1,27084],"\n\n"],[[-1,25848],"![insert-into-middle-of-block](https://streamich.github.io/json-joy/blog/images/blockwise-middle-split.png)\n"],[[-1,25739],"\n"],[[-1,25737],"Lets look at an example of how this all works together.\n"],[[-1,25680],"\n"],[[-1,25678],"\n"],[[-1,25676],"### Block-wise CT/RGA-Split Rope with Identifier Table Example\n"],[[-1,25612],"\n"],[[-1,25610],"This will be a simple example, which showcases a single insert. We will start with\n"],[[-1,25526],"a string `\"GG WP\"` and insert `\"OOD \"` in the middle of it. The final string will\n"],[[-1,25443],"be `\"GOOD G WP\"`.\n"],[[-1,25424],"\n"],[[-1,25422],"Strings are represented by the RGA algorithm, so the simplest way of thinking about\n"],[[-1,25337],"it is to imagine the starting string as a linked list of characters, where each\n"],[[-1,25256],"character has a unique ID.\n"],[[-1,25228],"\n"],[[-1,25226],1],[[-1,27007],"!["],[[-1,16656],"RGA string"],[[-1,25066],10],[[-1,27002],27],[[-1,27005],"]("],[[-1,25182],"https://streamich.github.io/json-joy/"],[[-1,25106],"blog/images/blogpost-001/rga-string.png"],[[-1,25145],38],[[-1,25222],39],[[-1,27082],75],[[-1,27003],")"],[[-1,25225],"\n"],[[-1,25055],"\nA"],[[-1,25051]," collaborative editing expert will notice "],[[-1,24982],"that:\n\n- At least two users "],[[-1,24948],"`a` and `c` have edited the string.\n  - "],[[-1,24906],"User `a` inserted `\"GGWP\"`.\n  - User `c` inserted "],[[-1,24854],"the space `"],[[-1,24841],"\" \"`.\n"],[[-1,24832],"- "],[[-1,24828],"Also, the `a.3` and `c.3` edits were made concurrently, which means that user `a`\n  inserted `"],[[-1,24730],"\"WP\"` and user `c` inserted `\" \"` "],[[-1,24694],"at the same time.\n"],[[-1,24668],"\nThose are "],[[-1,24653],"not important trivia, "],[[-1,24627],"now lets look at the same string, but represented\n"],[[-1,24507],"as a Block-wise RGA. In Block-wise RGA we don't waste memory on storing each\ncharacter separately, instead we store the characters in blocks. Each block has\n"],[[-1,24259],"a unique ID, which is the ID of the first character in the block. The blocks are\nlinked together in a linked list.\n\n!["],[[-1,16704],"Single character vs block-wise representation"],[[-1,24141],10],[[-1,24131],"](https://streamich.github.io/json-joy/"],[[-1,24051],"blog/images/blogpost-001/single-char-vs-blockwise.png"],[[-1,24092],39],[[-1,24053],")"],[[-1,24350],32],[[-1,24270],10],[[-1,24318],47],[[-1,24577],28],[[-1,24543],1],[[-1,24540],32],[[-1,24542],1],[[-1,24549],3],[[-1,24631],3],[[-1,24657],2],[[-1,24676],5],[[-1,24696],1],[[-1,24734],2],[[-1,24830],1],[[-1,24835],2],[[-1,24843],1],[[-1,24856],1],[[-1,24908],1],[[-1,24954],3],[[-1,25009],22],[[-1,25053],1],[[-1,27191],14],[[-1,27227],3],[[-1,27264],2],[[-1,27306],1],[[-1,27311],2],[[-1,27359],6],[[-1,27374],1],[[-1,27433],19],[[-1,27561],6],[[-1,27531],1],[[-1,27555],15],[[-1,27523],18],[[-1,27498],7],[[-1,27505],6],[[-1,27530],6],[[-1,27588],5],[[-1,27649],2],[[-1,27658],4],[[-1,27666],6],[[-1,27675],8],[[-1,27742],1],[[-1,27734],1],[[-1,27741],5],[[-1,27773],3],[[-1,27805],2],[[-1,27814],1],[[-1,27910],27],[[-1,27977],22],[[-1,28056],3],[[-1,28255],34],[[-1,28175],1],[[-1,28169],30],[[-1,28174],4],[[-1,28221],45],[[-1,28308],2],[[-1,28322],1],[[-1,28617],14],[[-1,32498],1],[[-1,26523],22],[[-1,26499],34],[[-1,26463],3],[[-1,26452],69],[[-1,26375],9],[[-1,26360],2],[[-1,26352],47],[[-1,26303],20],[[-1,26221],77],[[-1,26113],4],[[-1,26144],27],[[-1,26042],2],[[-1,26109],54],[[-1,26017],8],[[-1,26055],12],[[-1,26040],1],[[-1,26035],15],[[-1,25970],67],[[-1,25891],38],[[-1,25851],3],[[-1,25853],1],[[-1,25903],6],[[-1,26020],2],[[-1,26009],38],[[-1,26039],3],[[-1,26283],32],[[-1,26249],27],[[-1,26251],1],[[-1,26305],"\n"],[[-1,25056],"\n"],[[-1,23998],"Each character still has a unique ID"],[[-1,23958],", it is just the memory is not used to store\nmetadata about characters `a.2"],[[-1,23881],"` and `a.4`."],[[-1,23262],"\n\n"],[[-1,23388],1],[[-1,23387],"We will insert another block "],[[-1,23259],"in the middle of an existing block, which "],[[-1,23212],"will result\ninto a block split. The `\"OOD \"` "],[[-1,23162],"block "],[[-1,22860],"with ID `d"],[[-1,22848],".5` "],[[-1,22850],1],[[-1,23156],"will be inserted in between "],[[-1,23126],"the"],[[-1,23030]," two"],[[-1,22843],"\n"],[[-1,23123],1],[[-1,23122],"`\"G\"`"],[[-1,22841]," "],[[-1,23024],1],[[-1,23023],"characters."],[[-1,22840]," ("],[[-1,22837],"Note that `d` means that it is yet another user, and "],[[-1,22778],"each character in\n"],[[-1,22715],"the `d.5` block still implicitly has an ID, which "],[[-1,22625],"are "],[[-1,22665],3],[[-1,22662],"`d."],[[-1,22620],"5"],[[-1,22659],3],[[-1,22656],"`, `d."],[[-1,22614],"6"],[[-1,22650],3],[[-1,22647],"`, `d."],[[-1,22610],"7"],[[-1,22641],3],[[-1,22638],"`, `d."],[[-1,22606],"8"],[[-1,22632],3],[[-1,22629],"`.)"],[[-1,22760],6],[[-1,22752],1],[[-1,22749],33],[[-1,22751],1],[[-1,22754],1],[[-1,22784],5],[[-1,22838],1],[[-1,23011],"\n"],[[-1,23010],1],[[-1,23009],"\n!["],[[-1,16444],"B"],[[-1,16541],1],[[-1,16540],"lock"],[[-1,16442]," "],[[-1,16536],1],[[-1,16535],"insert"],[[-1,16645],7],[[-1,16629],6],[[-1,16631],1],[[-1,16638],6],[[-1,23006],10],[[-1,22996],"](https://streamich.github.io/json-joy/"],[[-1,22901],"blog/images/blogpost-001/block-insert.png"],[[-1,22957],53],[[-1,22904],")"],[[-1,23117],86],[[-1,23128],1],[[-1,23167],4],[[-1,23217],4],[[-1,23358],7],[[-1,23349],2],[[-1,23341],77],[[-1,23264],"\n"],[[-1,23347],5],[[-1,23351],1],[[-1,23392],2],[[-1,23777],1],[[-1,23776],"\n"],[[-1,23867],1],[[-1,23866],"Block-wise representation is our first"],[[-1,23774]," "],[[-1,23826],1],[[-1,23825],"optimization, "],[[-1,23806],"lets look at the second one."],[[-1,23765],"\nThe second important optimization is that we "],[[-1,23717],"don't store the blocks in a linked\n"],[[-1,23541],"list, instead we store them in a binary tree, or more specifically in a [Rope][rope]."],[[-1,22604],"\n"],[[-1,22539],"So, a little more precisely, the situation could look like this:\n\n!["],[[-1,16446],"T"],[[-1,16556],1],[[-1,16555],"ext"],[[-1,16449]," R"],[[-1,16552],2],[[-1,16550],"ope"],[[-1,16453]," t"],[[-1,16547],2],[[-1,16545],"ree"],[[-1,16622],12],[[-1,16608],1],[[-1,16610],1],[[-1,22471],10],[[-1,22461],"](https://streamich.github.io/json-joy/"],[[-1,22379],"blog/images/blogpost-001/text-rope-tree.png"],[[-1,22422],41],[[-1,22381],")"],[[-1,22336],"\n\nNote, in the tree we see th"],[[-1,22305],"at there are two tombstones `b"],[[-1,22273],"."],[[-1,22268],"1` and `b.2`, which means\nit used to be text which was inser"],[[-1,22204],"ted concurrently with `a"],[[-1,22178],".1`, but "],[[-1,22163],"was deleted. Also,"],[[-1,22143]," there\nis a "],[[-1,22122],"*split link\" b"],[[-1,22106],"etween the `b"],[[-1,22091],".1` and `b.2` blocks, which means that the `a"],[[-1,22044],".1` block w"],[[-1,22031],"as"],[[-1,22019],"\n"],[[-1,21995],"inserted in the middle of the `b.1` block"],[[-1,21914],", before `b"],[[-1,21901],".1`"],[[-1,21883]," and `b."],[[-1,21873],"2` were "],[[-1,21857],"deleted. The fact"],[[-1,21838],"\nthat `b` nod"],[[-1,21823],"es are deleted now"],[[-1,21795]," is not important, but it is important to note that we "],[[-1,21736],"keep\ntrack of split links, which allow for faster "],[[-1,21676],"traversal of the tree.\n\n"],[[-1,21591],"Now that we know the general setup, lets look at the actual insert"],[[-1,21504],", through a "],[[-1,21486],"series\n"],[[-1,21415],"of a three step process. First, we need to split the `\"GG\"` block, which is done by\ninserting a new block with ID `a2`.\n\n!["],[[-1,16606],"Insert step "],[[-1,16558],"1"],[[-1,16592],1],[[-1,16594],1],[[-1,21292],10],[[-1,21282],"](https://streamich.github.io/json-joy/"],[[-1,21198],"blog/images/blogpost-001/insert-step-1.png"],[[-1,21243],43],[[-1,21200],")"],[[-1,21156],"\n\nIn the process a new split link `s3` is created, this will allow for faster traversal, for example,\nwhen somebody will want to delete both `\"GG\"` characters, we will not need to traverse the\nwhole tree to "],[[-1,20944],"find the second `\"G\"` character, we "],[[-1,20905],"will just follow the split link `s3` to\nthe second `\"G\"` character. Also, note that w"],[[-1,20818],"hen serializing "],[[-1,20800],"the tree, we can remove "],[[-1,20768],"all the\nsplit links"],[[-1,20747],", because we can "],[[-1,20724],"reconstruct them on the fly, when de-serializing the tree.\n\nSecond, we need to insert the `\"OOD \"` block, which is done by inserting a new block with"],[[-1,20465],"\n"],[[-1,20575],1],[[-1,20470],"the "],[[-1,20574],"ID `d.5`.\n"],[[-1,20730],5],[[-1,20749],1],[[-1,20776],4],[[-1,20802],1],[[-1,20820],1],[[-1,20908],2],[[-1,20949],4],[[-1,21479],16],[[-1,21459],43],[[-1,21461],1],[[-1,21463],1],[[-1,21492],5],[[-1,21525],16],[[-1,21652],60],[[-1,21686],9],[[-1,21740],2],[[-1,21805],5],[[-1,21825],1],[[-1,21840],1],[[-1,21865],6],[[-1,21875],1],[[-1,21898],14],[[-1,21903],1],[[-1,21954],39],[[-1,22029],9],[[-1,22018],22],[[-1,22033],1],[[-1,22046],1],[[-1,22093],1],[[-1,22108],1],[[-1,22124],1],[[-1,22131],6],[[-1,22145],1],[[-1,22169],3],[[-1,22180],1],[[-1,22208],2],[[-1,22270],1],[[-1,22272],1],[[-1,22275],1],[[-1,22307],1],[[-1,22601],24],[[-1,22575],35],[[-1,22577],1],[[-1,22603],1],[[-1,23394],"\n"],[[-1,20564],"!["],[[-1,16590],"Insert step "],[[-1,16576],"2"],[[-1,16578],1],[[-1,20562],10],[[-1,20552],"](https://streamich.github.io/json-joy/blog/images/blogpost-001/insert-step-"],[[-1,20463],"2"],[[-1,20476],1],[[-1,20475],".png)"],[[-1,23393],"\n"],[[-1,23682],39],[[-1,23604],5],[[-1,23595],10],[[-1,23582],18],[[-1,23546],1],[[-1,23550],4],[[-1,23543],1],[[-1,23545],1],[[-1,23564],11],[[-1,23585],2],[[-1,23599],2],[[-1,23643],38],[[-1,23719],1],[[-1,23773],4],[[-1,23811],4],[[-1,23828],1],[[-1,23869],"\n"],[[-1,20462],"Finally, we perform rotations such"],[[-1,20426]," that the "],[[-1,20412],"new block `d.5` is rotated to the top, while\nthe `a.1` and `a.2` blocks are rotated to the bottom.\n\n!["],[[-1,16574],"Insert step "],[[-1,16560],"3"],[[-1,16562],1],[[-1,20310],10],[[-1,20300],"](https://streamich.github.io/json-joy/blog/images/blogpost-001/insert-step-3.png)"],[[-1,20416],3],[[-1,20428],1],[[-1,23868],"\n"],[[-1,20218],"\n"],[[-1,20066],"Now the example above is a bit simplified, because in reality we have two trees, one for\nthe Text Rope and one for the Identifier Table."],[[-1,19560]," "],[[-1,19524],"Actually, for optimization purposes the same\n"],[[-1,19472],"nodes are used in both trees, so the trees are not separate, but rather they are "],[[-1,19381],"different"],[[-1,19370],"\nsorted views of the same data"],[[-1,19339],", but that "],[[-1,19325],"is an implementation detail. The important thing is\nthat we have two trees, one for the Text Rope and one for the Identifier Table"],[[-1,19179],", and here is\nhow "],[[-1,19157],"both trees "],[[-1,19099],"conceptually"],[[-1,19116],5],[[-1,19111]," look like"],[[-1,19146],26],[[-1,19120],":"],[[-1,19161],3],[[-1,19195],15],[[-1,19328],2],[[-1,19372],1],[[-1,19391],9],[[-1,19382],"\n"],[[-1,19479],6],[[-1,19559],5],[[-1,19550],22],[[-1,19554],2],[[-1,19806],1],[[-1,19805],"\n"],[[-1,17938],"!["],[[-1,16520],"Example with "],[[-1,16502],"Identifier "],[[-1,16489],"Table"],[[-1,16491],1],[[-1,16507],4],[[-1,16528],7],[[-1,17936],10],[[-1,17926],"](https://streamich.github.io/json-joy/blog/images/blogpost-001/with-identifier-table.png)\n"],[[-1,17834],"\n"],[[-1,17832],"Note that in both trees the newly inserted blocks are rotated to the top of the trees, which\n"],[[-1,17738],"for typical user interactions is a good thing. Users type sequentially whole sentences at a time.\n"],[[-1,17639],"Rotating recently accessed content to the top often leads to less then `O(log n)` insertion time\n"],[[-1,17541],"for the next character, because the next character is likely to be inserted in the same block\n"],[[-1,17446],"as the previous character, which is already at the top of the tree.\n"],[[-1,17377],"\n"],[[-1,17375],"And this leads to the final optimization that I will mention: merging blocks. When a user\n"],[[-1,17284],"types a whole word, or a sentence, or a paragraph sequentially, we do not create a new block\n"],[[-1,17190],"for each character. Instead, a new block is created only when user changes the cursor position.\n"],[[-1,17093],"So, if a user types a whole word, or a sentence, or a paragraph sequentially, we will create\n"],[[-1,16999],"a single block for the whole word, or sentence, or paragraph. This is done by merging the\n"],[[-1,16908],"blocks with adjacent IDs."],[[-1,16882],"\n"],[[-1,16883],"\n"],[[-1,19804],"!["],[[-1,16483],"Character merging into block"],[[-1,19802],10],[[-1,19792],"]("],[[-1,16838],"https://streamich.github.io/json-joy/"],[[-1,16750],"blog/images/blogpost-001/char-merging.png"],[[-1,16801],50],[[-1,16880],41],[[-1,19790],37],[[-1,19709],51],[[-1,19753],42],[[-1,19711],")"],[[-1,19657],6],[[-1,19649],24],[[-1,19619],44],[[-1,19086],21],[[-1,19047],45],[[-1,18959],2],[[-1,18949],51],[[-1,18812],82],[[-1,18705],28],[[-1,18667],148],[[-1,18677],9],[[-1,18707],1],[[-1,18718],10],[[-1,18730],11],[[-1,18519],1],[[-1,18447],107],[[-1,18330],16],[[-1,18310],50],[[-1,18254],85],[[-1,18167],229],[[-1,18169],1],[[-1,18260],5],[[-1,18312],1],[[-1,18314],1],[[-1,18340],5],[[-1,18518],70],[[-1,18898],9],[[-1,18883],37],[[-1,18840],22],[[-1,18816],3],[[-1,18818],1],[[-1,18846],5],[[-1,18889],5],[[-1,18957],4],[[-1,19002],42],[[-1,19065],17],[[-1,19561],1],[[-1,19575],11],[[-1,19625],5],[[-1,19651],1],[[-1,19930],122],[[-1,20192],51],[[-1,20096],7],[[-1,20087],7],[[-1,20076],9],[[-1,20080],2],[[-1,20089],1],[[-1,20141],36],[[-1,20217],1],[[-1,20214],21],[[-1,20216],1],[[-1,23883],1],[[-1,23962],2],[[-1,26304],"\n"],[[-1,26358],3],[[-1,26366],3],[[-1,26383],5],[[-1,26456],3],[[-1,26460],2],[[-1,26465],1],[[-1,26501],1],[[-1,32497],"\n\n## Benchmarks\n"],[[-1,16441],"\n"],[[-1,16431],"In th"],[[-1,16416],"is"],[[-1,16408]," sectio"],[[-1,16393],"n we will benchmark `json-joy` implementation of `StringRga` against other"],[[-1,16307],"\n"],[[-1,16319],1],[[-1,16318],"libraries."],[[-1,16306]," For that, lets first take a look at the data"],[[-1,16257],"sets wi will use for benchmarking.\n"],[[-1,16204],"\n"],[[-1,16222],"\n"],[[-1,16216],"### Datasets"],[[-1,16203],"\n\n"],[[-1,10318],"There will be no micro"],[[-1,10262]," "],[[-1,10296],"benchmarks, only "],[[-1,10273],"real world"],[[-1,10261]," large text documents will be tested."],[[-1,10263]," "],[[-1,10279],5],[[-1,16201],"Fi"],[[-1,16197],"ve"],[[-1,8456],"\n"],[[-1,16195],1],[[-1,16194],"realistic"],[[-1,10223],1],[[-1,16185],3],[[-1,16182]," relatively long text documents will be used.\n\n- The first one is the editing trace of this blog post, yes, the one you are reading"],[[-1,9895]," now"],[[-1,9896],"!"],[[-1,16051],1],[[-1,16050]," It is"],[[-1,16036],"\n  "],[[-1,16044],1],[[-1,16043],"called"],[[-1,16033]," `json"],[[-1,16021],"-joy-crdt"],[[-1,16008],"`"],[[-1,9891],13],[[-1,16007],", the tra"],[[-1,15994],"ce "],[[-1,15981],"contains all inserts and del"],[[-1,15945],"etes made to type this blog"],[[-1,15911],"\n  "],[[-1,15918],1],[[-1,15917],"post."],[[-1,10158]," T"],[[-1,10148],"he trace was "],[[-1,8451],"collected"],[[-1,10135],7],[[-1,10128]," us"],[[-1,10123],"i"],[[-1,10120],"n"],[[-1,10111],"g the "],[[-1,10103],"["],[[-1,10050],"`"],[[-1,10102],"vscode-tracker"],[[-1,10049],"`"],[[-1,10088],"][vscode-tracker] "],[[-1,10068],"VS Code extension."],[[-1,10070],1],[[-1,10105],1],[[-1,10119],4],[[-1,10122],1],[[-1,10125],1],[[-1,10156],4],[[-1,15742],3],[[-1,15777],11],[[-1,15758],14],[[-1,15762],2],[[-1,15766],2],[[-1,15908],"\n"],[[-1,15904],"- "],[[-1,15738],"The other "],[[-1,15726],"four traces are taken from the ["],[[-1,15693],"CRDT benchmarks"],[[-1,15677],"]"],[[-1,15435],"[crdt-benchmarks]"],[[-1,15676],1],[[-1,15673],1],[[-1,15672]," reposit"],[[-1,15662],"ory, see this"],[[-1,15504],"\n  "],[[-1,15649],1],[[-1,15619],"["],[[-1,15648],"description and license info"],[[-1,8442],"rmation"],[[-1,15618],"]("],[[-1,15615],"https://github.com/josephg/crdt-benchmarks/blob/7b0b90e912cfa88aff8c6336917343ee08653e51/README.md#data-sets"],[[-1,15506],")"],[[-1,15616],1],[[-1,15620],"."],[[-1,15418],"\n  - The first "],[[-1,10323],"trace"],[[-1,15397],3],[[-1,15394]," is the canonical `automerge-paper` trace, made by "],[[-1,15334],"Martin Kleppmann, the author\n"],[[-1,15266],"    of the [Automerge][automerge] library."],[[-1,10048]," The editing trace was collected while writing the"],[[-1,9942],"\n    ["],[[-1,9936],1],[[-1,9998],1],[[-1,9997],"\"A "],[[-1,9989],"Conflict-Free Replicated JSON Datatype\" paper"],[[-1,9934],"]("],[[-1,9931],"https://arxiv.org/abs/1608.03960"],[[-1,9898],")"],[[-1,9932],1],[[-1,9944],"."],[[-1,9874]," It"],[[-1,9795],"\n    "],[[-1,9871],1],[[-1,9825],2],[[-1,9815],5],[[-1,9823],7],[[-1,9810],10],[[-1,9799],1],[[-1,9800],1],[[-1,9870],"contains"],[[-1,9789]," "],[[-1,9862],5],[[-1,9857],"259"],[[-1,9851],","],[[-1,9854],"778"],[[-1,9850]," "],[[-1,9042],"single character "],[[-1,9849],"insert/delete operations"],[[-1,9788],", with the final document size"],[[-1,9024],"\n    "],[[-1,9758],1],[[-1,9757],"of 104"],[[-1,9748],","],[[-1,9751],"852"],[[-1,9747]," "],[[-1,9742],"bytes"],[[-1,9735],", which"],[[-1,9018]," "],[[-1,9728],1],[[-1,9676],4],[[-1,9672],"result"],[[-1,9043],"s"],[[-1,9666]," in"],[[-1,9663],1],[[-1,9662]," 12,387"],[[-1,9056]," `json-joy` "],[[-1,9655],1],[[-1,9654],"RGA blocks in the tree."],[[-1,9727],15],[[-1,9710],2],[[-1,9705],1],[[-1,9708],3],[[-1,9704],1],[[-1,9688],11],[[-1,9703],8],[[-1,9712],1],[[-1,9737],1],[[-1,9746],2],[[-1,9994],4],[[-1,15170],"\n"],[[-1,15164],"  - "],[[-1,9627],"The second one is `seph-blog1` trace, which is a trace by Seph Gentle "],[[-1,9539],"collected while writing\n"],[[-1,9451],"    the [\"5000x faster CRDTs: An Adventure in Optimization\"][seph-blog1] blog post."],[[-1,9288]," The trace contains\n"],[[-1,9227],"    137,154 insert/delete operations, with the final document size of "],[[-1,9127],"56"],[[-1,9122],","],[[-1,9125],"769"],[[-1,9157],9],[[-1,9148]," bytes, which result"],[[-1,9121],"s\n"],[[-1,9104],"    in 18,222 "],[[-1,9067],"`json-joy` "],[[-1,9090],"RGA blocks in the tree."],[[-1,9006],"\n"],[[-1,9000],"  - "],[[-1,8994],"T"],[[-1,8985],"he third one is `rustcode`"],[[-1,8959],40],[[-1,8919],". It contains 36"],[[-1,8900],","],[[-1,8903],"981"],[[-1,8897],"\n"],[[-1,8891],"    insert/delete operations, with the final document size of "],[[-1,8751],"65"],[[-1,8746],","],[[-1,8749],"218"],[[-1,8829],6],[[-1,8823]," bytes, which results in\n    "],[[-1,8744],"12"],[[-1,8739],","],[[-1,8742],"505"],[[-1,8794],5],[[-1,8789]," `json-joy` RGA blocks in the tree."],[[-1,8738],"\n"],[[-1,8682],"  - The last one is `sveltecomponent`, it contains "],[[-1,8476],"18"],[[-1,8471],","],[[-1,8474],"335"],[[-1,8631],9],[[-1,8622]," insert/delete operations, with the\n    final document size of "],[[-1,8469],"18"],[[-1,8464],","],[[-1,8467],"451"],[[-1,8559],9],[[-1,8550]," bytes, which results in "],[[-1,8462],"5"],[[-1,8458],","],[[-1,8461],"813"],[[-1,8525],9],[[-1,8516]," `json-joy` RGA blocks in\n    the tree."],[[-1,8732],5],[[-1,8721],32],[[-1,8688],5],[[-1,8727],3],[[-1,8737],4],[[-1,8896],4],[[-1,8899],1],[[-1,8993],1],[[-1,8988],1],[[-1,8992],2],[[-1,8996],1],[[-1,9005],4],[[-1,9010],2],[[-1,9017],5],[[-1,9119],9],[[-1,9107],1],[[-1,9110],3],[[-1,9106],1],[[-1,9268],7],[[-1,9258],1],[[-1,9261],3],[[-1,9257],7],[[-1,9248],20],[[-1,9250],1],[[-1,9368],12],[[-1,9515],9],[[-1,9505],1],[[-1,9502],49],[[-1,9504],1],[[-1,9506],1],[[-1,9453],1],[[-1,9557],2],[[-1,9549],8],[[-1,9553],2],[[-1,9555],1],[[-1,15160],3],[[-1,15157],"\n"],[[-1,7322],"\nEach dataset contains a list of insert or de"],[[-1,7275],"lete "],[[-1,7266],"operations, "],[[-1,7235],"each operations "],[[-1,7217],"specifies the position\nin the document and whether text needs to be inserted or deleted at that position."],[[-1,5372],"\n\nHere is the sample of the first operations of the `automerge-paper` "],[[-1,5288],"editing trace:"],[[-1,5300],10],[[-1,5302],1],[[-1,7112],"\n\n```"],[[-1,5375],1],[[-1,5374],"js"],[[-1,7107],"\n"],[[-1,7100],"[\n  [ 0, 0, '\\\\' ],  [ 1, 0, 'd' ],   [ 2, 0, 'o' ],   [ 3, 0, 'c' ],\n  [ 4, 0, 'u' ],   [ 5, 0, 'm' ],   [ 6, 0, 'e' ],   [ 7, 0, 'n' ],\n  [ 8, 0, 't' ],   [ 9, 0, 'c' ],   [ 10, 0, 'l' ],  [ 11, 0, 'a' ],\n  [ 12, 0, 's' ],  [ 13, 0, 's' ],  [ 14, 0, '[' ],  [ 15, 0, 'a' ],\n  [ 16, 0, '4' ],  [ 17, 0, 'p' ],  [ 18, 0, 'a' ],  [ 19, 0, 'p' ],\n  [ 20, 0, 'e' ],  [ 21, 0, 'r' ],  [ 22, 0, ',' ],  [ 23, 0, 't' ],\n  [ 24, 0, 'w' ],  [ 25, 0, 'o' ],  [ 26, 0, 'c' ],  [ 27, 0, 'o' ],\n  [ 28, 0, 'l' ],  [ 29, 0, 'u' ],  [ 30, 0, 'm' ],  [ 31, 0, 'n' ],\n  [ 32, 0, ',' ],  [ 33, 0, '1' ],  [ 34, 0, '0' ],  [ 35, 0, 'p' ],\n  [ 36, 0, 't' ],  [ 37, 0, ']' ],  [ 38, 0, '{' ],  [ 39, 0, 'a' ],\n  [ 40, 0, 'r' ],  [ 41, 0, 't' ],  [ 42, 0, 'i' ],  [ 43, 0, 'c' ],\n  [ 44, 0, 'l' ],  [ 45, 0, 'e' ],  [ 46, 0, '}' ],  [ 47, 0, '\\n' ],\n  [ 48, 0, '\\\\' ], [ 49, 0, 'u' ],  [ 50, 0, 's' ],  [ 51, 0, 'e' ],\n  [ 52, 0, 'p' ],  [ 53, 0, 'a' ],  [ 54, 0, 'c' ],  [ 55, 0, 'k' ],\n  [ 56, 0, 'a' ],  [ 57, 0, 'g' ],  [ 58, 0, 'e' ],  [ 59, 0, '{' ],\n  [ 59, 1, '' ],   [ 59, 0, '[' ],  [ 60, 0, 'u' ],  [ 61, 0, 't' ],\n  [ 62, 0, 'f' ],  [ 63, 0, '8' ],  [ 64, 0, ']' ],  [ 65, 0, '{' ],\n  [ 66, 0, 'i' ],  [ 67, 0, 'n' ],  [ 68, 0, 'p' ],  [ 69, 0, 'u' ],\n  [ 70, 0, 't' ],  [ 71, 0, 'e' ],  [ 72, 0, 'n' ],  [ 73, 0, 'c' ],\n  [ 74, 0, '}' ],  [ 75, 0, '\\n' ], [ 76, 0, '\\\\' ], [ 77, 0, 'u' ],\n  [ 78, 0, 's' ],  [ 79, 0, 'e' ],  [ 80, 0, 'p' ],  [ 81, 0, 'a' ],\n  [ 82, 0, 'c' ],  [ 83, 0, 'k' ],  [ 84, 0, 'a' ],  [ 85, 0, 'g' ],\n  [ 86, 0, 'e' ],  [ 87, 0, '{' ],  [ 88, 0, 'm' ],  [ 89, 0, 'a' ],\n  [ 90, 0, 't' ],  [ 91, 0, 'h' ],  [ 92, 0, 'p' ],  [ 93, 0, 't' ],\n  [ 94, 0, 'm' ],  [ 95, 0, 'x' ],  [ 96, 0, '}' ],  [ 97, 0, ' ' ],"],[[-1,7106],1],[[-1,7105],"\n```"],[[-1,5274],"\n\n"],[[-1,5224],"Each operation is a 3-tuple which contains"],[[-1,5126],": (1) "],[[-1,5182],1],[[-1,5181],"the position in the document"],[[-1,5118],"; (2) "],[[-1,5153],2],[[-1,5151],"the length of"],[[-1,5111],"\n"],[[-1,5138],1],[[-1,5137],"the text"],[[-1,5110]," to be del"],[[-1,5096],"eted; and ("],[[-1,5084],"3"],[[-1,5082],") the text t"],[[-1,5068],"o be inserted at that position."],[[-1,5070],1],[[-1,5085],1],[[-1,5100],2],[[-1,5129],"\n\n"],[[-1,5272],47],[[-1,7219],1],[[-1,7254],17],[[-1,7270],2],[[-1,7277],1],[[-1,8407],1],[[-1,8435],"\n"],[[-1,8433],"### "],[[-1,7713],"Benchmarks "],[[-1,7696],"ag"],[[-1,7328],"a"],[[-1,7694],"inst "],[[-1,7326],"CRDT"],[[-1,7689],5],[[-1,7684]," libraries"],[[-1,7702],5],[[-1,8427],20],[[-1,8406],"\n\n"],[[-1,8340],"First we will benchmark `json-joy` against a peer group of other CRDT libraries"],[[-1,8251],":\n\n"],[[-1,8242],"- ["],[[-1,8238],"Automerge"],[[-1,8228],"]["],[[-1,8225],"automerge"],[[-1,8226],"]"],[[-1,8216]," is "],[[-1,8210],"probably the best known RGA"],[[-1,8002]," algorithm"],[[-1,7987]," implementation "],[[-1,7991],2],[[-1,8183],1],[[-1,8175],25],[[-1,8150],"in J"],[[-1,8142],"avaScript.\n- ["],[[-1,8125],"Y.js"],[[-1,8127],1],[[-1,8128],"]"],[[-1,8121],"["],[[-1,8117],"yjs"],[[-1,8113],"] is the most "],[[-1,8097],"widely used JavaS"],[[-1,8068],"cript CRDT library, which implements "],[[-1,8024],"YATA algorithm"],[[-1,8003],"."],[[-1,7971],"\n"],[[-1,7843],"- [Y.rs][yrs] is a port of Y.js to Rust. We use the `ywasm` package, which is a WebAssembly\n  module compiled from "],[[-1,7718],"its "],[[-1,7728],"Rust code."],[[-1,7674],"\n"],[[-1,5026],"\n"],[[-1,1413],"Below is a sample output of running the benchmarks"],[[-1,1361],", numbers are in "],[[-1,1334],"milliseconds it took to"],[[-1,1299],"\nexecute the "],[[-1,1283],"full trace:\n"],[[-1,1271],4],[[-1,1286],2],[[-1,1311],9],[[-1,1344],3],[[-1,1339],4],[[-1,1341],1],[[-1,1363],1],[[-1,5024],13],[[-1,2996],1],[[-1,5025],"\n"],[[-1,5036],"\n"],[[-1,5034],"```"],[[-1,5027],1],[[-1,5011],"\n============================================================================\nEditing trace: \"sveltecomponent\" , Transactions: 18335 , End length: 18451\n----------------------------------------------------------------------------\nAutomerge\n#1: 7325.6\n#2: 7281\n#3: 7286.3\nCorrect: false Length: 18451 Chunks: 0\nBest: 7281 Worst: 7325.6 Average: 7297.6 Tx/sec: 2,512\n----------------------------------------------------------------------------\nY.js\n#1: 381.2\n#2: 358.6\n#3: 360.1\nCorrect: true Length: 18451 Chunks: 4627\nBest: 358.6 Worst: 381.2 Average: 366.6 Tx/sec: 50,008\n----------------------------------------------------------------------------\nY.rs\n#1: 272.5\n#2: 256.6\n#3: 255.9\nCorrect: true Length: 18451 Chunks: 0\nBest: 255.9 Worst: 272.5 Average: 261.7 Tx/sec: 70,071\n----------------------------------------------------------------------------\nStringRga (json-joy)\n#1: 19.1\n#2: 8.1\n#3: 6.2\nCorrect: true Length: 18451 Chunks: 5813\nBest: 6.2 Worst: 19.1 Average: 11.1 Tx/sec: 1,650,406\n\n\n============================================================================\nEditing trace: \"seph-blog1\" , Transactions: 137154 , End length: 56769\n----------------------------------------------------------------------------\nAutomerge\n#1: 20531.4\n#2: 22141.3\n#3: 20786.2\nCorrect: false Length: 56769 Chunks: 0\nBest: 20531.4 Worst: 22141.3 Average: 21153 Tx/sec: 6,484\n----------------------------------------------------------------------------\nY.js\n#1: 2661\n#2: 2664.9\n#3: 2652.8\nCorrect: true Length: 56769 Chunks: 15092\nBest: 2652.8 Worst: 2664.9 Average: 2659.5 Tx/sec: 51,571\n----------------------------------------------------------------------------\nY.rs\n#1: 4534.2\n#2: 4411.7\n#3: 4488.2\nCorrect: false Length: 56777 Chunks: 0\nBest: 4411.7 Worst: 4534.2 Average: 4478.1 Tx/sec: 30,628\n----------------------------------------------------------------------------\nStringRga (json-joy)\n#1: 23.7\n#2: 24.8\n#3: 22.9\nCorrect: true Length: 56769 Chunks: 18222\nBest: 22.9 Worst: 24.8 Average: 23.8 Tx/sec: 5,763,130"],[[-1,2995],"\n\n\n============================================================================\nEditing trace: \"rustcode\" , Transactions: 36981 , End length: 65218\n----------------------------------------------------------------------------\nY.js\n#1: 720\n#2: 717.4\n#3: 710.7\nCorrect: true Length: 65218 Chunks: 10044\nBest: 710.7 Worst: 720 Average: 716 Tx/sec: 51,647\n----------------------------------------------------------------------------\nY.rs\n#1: 856.8\n#2: 862.2\n#3: 857.9\nCorrect: false Length: 65235 Chunks: 0\nBest: 856.8 Worst: 862.2 Average: 859 Tx/sec: 43,053\n----------------------------------------------------------------------------\nStringRga (json-joy)\n#1: 19.4\n#2: 17.9\n#3: 12.5\nCorrect: true Length: 65218 Chunks: 12505\nBest: 12.5 Worst: 19.4 Average: 16.6 Tx/sec: 2,225,405\n\n\n============================================================================\nEditing trace: \"automerge-paper\" , Transactions: 259778 , End length: 104852\n----------------------------------------------------------------------------\nY.js\n#1: 4787.8\n#2: 4740\n#3: 4739.7\nCorrect: true Length: 104852 Chunks: 10971\nBest: 4739.7 Worst: 4787.8 Average: 4755.8 Tx/sec: 54,623\n----------------------------------------------------------------------------\nY.rs\n#1: 5923.9\n#2: 5869.7\n#3: 5904.8\nCorrect: true Length: 104852 Chunks: 0\nBest: 5869.7 Worst: 5923.9 Average: 5899.5 Tx/sec: 44,034\n----------------------------------------------------------------------------\nStringRga (json-joy)\n#1: 98.6\n#2: 49.6\n#3: 45.9\nCorrect: true Length: 104852 Chunks: 12387\nBest: 45.9 Worst: 98.6 Average: 64.7 Tx/sec: 4,014,031"],[[-1,2999],1],[[-1,5031],"\n```"],[[-1,1265],"\n"],[[-1,1023],"\n"],[[-1,747],"Notable"],[[-1,1016],4],[[-1,1012]," observations:"],[[-1,1021],4],[[-1,1022],"\n"],[[-1,1264],"\n"],[[-1,1181],"- Automerge participated only it the first two traces, as it was not able to handle the\n  larger traces.\n"],[[-1,1073],"- Y.js is about 1"],[[-1,1052],"0x faster th"],[[-1,1036],"an Automerge."],[[-1,998],"\n- Y.rs is"],[[-1,988],8],[[-1,980]," slower "],[[-1,967],"than Y.js"],[[-1,910]," in all benchmarks"],[[-1,958],", but "],[[-1,892],"`sveltecomponent`, which is the smallest"],[[-1,852],1],[[-1,912],1],[[-1,952],37],[[-1,972],4],[[-1,1040],2],[[-1,1056],2],[[-1,1076],2],[[-1,1263],12],[[-1,1247],65],[[-1,1251],3],[[-1,5035],"\n"],[[-1,850],"  trace.\n"],[[-1,838],"- `json-joy` is about "],[[-1,751],"50-"],[[-1,816],"100x faster than Y.js and 1,000"],[[-1,783],"x "],[[-1,774],"faster than Automerge."],[[-1,123],"\n\nY.rs "],[[-1,112],"implementation might have bugs, as in the above benchmarks it produces correct results\nin only 2 out of 5 traces."],[[-1,116],2],[[-1,752],"\n"],[[-1,781],6],[[-1,785],1],[[-1,841],2],[[-1,7581],"\n"],[[-1,7673],2],[[-1,7671],"\n"],[[-1,7622],"### Benchmarks against non-CRDT libraries"],[[-1,7652],2],[[-1,7646],19],[[-1,7625],2],[[-1,7627],1],[[-1,7650],2],[[-1,7658],3],[[-1,7662],2],[[-1,7670],2],[[-1,7667],3],[[-1,7970],3],[[-1,7966],4],[[-1,7967],1],[[-1,7962],2],[[-1,7959],3],[[-1,7960],1],[[-1,7955],26],[[-1,7884],12],[[-1,7871],27],[[-1,7929],44],[[-1,8010],5],[[-1,8031],5],[[-1,8080],6],[[-1,8099],1],[[-1,8119],1],[[-1,8120],1],[[-1,8146],2],[[-1,8182],5],[[-1,8212],1],[[-1,8239],1],[[-1,8244],1],[[-1,8248],2],[[-1,8261],7],[[-1,8404],41],[[-1,8361],15],[[-1,8344],3],[[-1,8346],1],[[-1,8363],1],[[-1,8429],1],[[-1,8434],"\n"],[[-1,7578],"\n`"],[[-1,7574],"json-joy` "],[[-1,7559],"RGA implementation i\n\n"],[[-1,7513],"- `V8 strings` is a benchmark against native JavaScript strings, which are implemented in V8\n  JavaScript engine. It just uses `"],[[-1,738],"String.prototype"],[[-1,7385],3],[[-1,7382],".slice("],[[-1,7373],")` to perform inse"],[[-1,7353],"rt and delete operations."],[[-1,722],"\n"],[[-1,718],"- `rope.js` is a JavaScript library which implements a rope data structure, it is very fast\n  for large strings.\n"],[[-1,602],"- `diamond-types-node` is a WebAssembly module of"],[[-1,440]," a highly optimized"],[[-1,553]," "],[[-1,529],"Rust "],[[-1,552],"`diamond-types` library"],[[-1,524],"."],[[-1,420],"\n  "],[[-1,523],1],[[-1,522],"It appends"],[[-1,416]," "],[[-1,501],3],[[-1,512],1],[[-1,511],"operation"],[[-1,498]," metadata to "],[[-1,461],"a log and stores the "],[[-1,415],"string contents in a skip list"],[[-1,380]," powered by\n  a "],[[-1,175],"["],[[-1,364],"very fast"],[[-1,174],"]"],[[-1,145],"["],[[-1,143],"jump-rope-benchmarks"],[[-1,144],"]"],[[-1,168],19],[[-1,147],1],[[-1,149],1],[[-1,170],1],[[-1,173],2],[[-1,355]," ["],[[-1,352],"`JumpRope`"],[[-1,341],"]"],[[-1,337],"["],[[-1,335],"jump-rope"],[[-1,325],"] library."],[[-1,336],1],[[-1,340],2],[[-1,353],1],[[-1,385],1],[[-1,485],6],[[-1,477],1],[[-1,472],7],[[-1,476],2],[[-1,479],1],[[-1,605],2],[[-1,721],2],[[-1,7355],1],[[-1,7375],1],[[-1,7537],2],[[-1,7532],8],[[-1,7518],4],[[-1,7524],3],[[-1,7535],2],[[-1,7564],4],[[-1,7576],1],[[-1,7580],"\n\n"],[[-1,383],1],[[-1,15156],3],[[-1,15149],"\n### A not"],[[-1,15137],"e on Rust fa"],[[-1,15123],"d among "],[[-1,15112],"CRDT librar"],[[-1,14494],"y authors"],[[-1,15101],3],[[-1,15098],"\n\n"],[[-1,15094],"Fir"],[[-1,15089],"st"],[[-1,14485],"ly"],[[-1,15085],", we believe that Rust is a great language and would love to port "],[[-1,15017],"`json-joy` to Rust "],[[-1,14991],"some day.\n"],[[-1,14466],"This comment is not about the Rust language, but rather about the Rust fad among CRDT library authors."],[[-1,14981],5],[[-1,14482],5],[[-1,14473],3],[[-1,14477],2],[[-1,14976],3],[[-1,14971],15],[[-1,14952],44],[[-1,14468],1],[[-1,14908],26],[[-1,14882],"\n"],[[-1,14877],"\n"],[[-1,14812],"It seems there is a pattern of JavaScript CRDT libraries being ported to Rust,"],[[-1,14364],27],[[-1,14734]," and"],[[-1,14700]," here are the\nexamples:\n\n"],[[-1,14672],"- [Automerge][automerge] is a JavaScript CRDT library, which "],[[-1,14587],"has r"],[[-1,14578],"e"],[[-1,14573],"written its lower-level"],[[-1,12550]," API"],[[-1,14538],", wh"],[[-1,14532],"at it\n  call"],[[-1,14333],"s"],[[-1,14520]," \"backe"],[[-1,14509],"nd\""],[[-1,13991],","],[[-1,14506]," in"],[[-1,13990],"to"],[[-1,14503]," Rust."],[[-1,14332]," Now, the Rust backe"],[[-1,14308],"nd is compiled into WebAssembly module"],[[-1,13988]," and published as\n  "],[[-1,13931],"`"],[[-1,13968],1],[[-1,13967],"@automerge/automerge-wasm"],[[-1,13929],"`"],[[-1,13942],1],[[-1,13941]," package"],[[-1,13924],", wh"],[[-1,13914],"ich the `@automerge/automerge"],[[-1,13878],"`"],[[-1,13877],19],[[-1,13885],5],[[-1,13920],3],[[-1,13928],2],[[-1,13933],1],[[-1,14270],4],[[-1,14266]," JavaScript"],[[-1,14253],"\n  code "],[[-1,14240],"calls into"],[[-1,14230],17],[[-1,14213]," through WebAssembly"],[[-1,13851]," ABI for all i"],[[-1,13835],"ts document operations"],[[-1,13837],1],[[-1,14193],". But"],[[-1,14180],", as you can see from"],[[-1,13812],"\n  "],[[-1,14159],1],[[-1,14158],"the benchmarks above,"],[[-1,13808]," "],[[-1,14137],1],[[-1,14089],2],[[-1,14087],"Automerge is still 1,000x slower than `json-joy`"],[[-1,12545],"."],[[-1,14039],30],[[-1,13806],3],[[-1,14009],11],[[-1,13998],"\n"],[[-1,13994],"- "],[[-1,13723],"["],[[-1,13992],"Y"],[[-1,13722],".rs]"],[[-1,13664],"["],[[-1,13662],"yrs"],[[-1,13663],"]"],[[-1,13718]," is a Rust "],[[-1,13703],"port of a JavaScript "],[[-1,12523],"CRDT library"],[[-1,12541],17],[[-1,12543],1],[[-1,13682],17],[[-1,13665]," "],[[-1,13659],"["],[[-1,13657],"Y.js"],[[-1,13652],"]["],[[-1,13649],"yrs"],[[-1,13650],"]"],[[-1,13646],". "],[[-1,13641],"As you can see from the\n  benchmarks above, Y."],[[-1,13512],"js"],[[-1,13595],2],[[-1,13593]," is"],[[-1,13510]," about"],[[-1,13590]," 100x slower than `json-joy` and "],[[-1,13503],"the Rust port "],[[-1,13346],"("],[[-1,13489],"which is exposed to\n"],[[-1,13323],"  JavaScript"],[[-1,13311],4],[[-1,13307]," through WebAssembly `ywasm` package) is about the same speed as the JavaScript version"],[[-1,12508],",\n  also about 100x slower than `json"],[[-1,12469],"-joy`."],[[-1,12471],1],[[-1,13220],1],[[-1,13219],"\n"],[[-1,13215],"- `diamond-types` "],[[-1,12462],"is a Rust library which "],[[-1,12436],"intends to implement various "],[[-1,12402],"novel "],[[-1,12407],"CRDT"],[[-1,12395]," algorithms. It is"],[[-1,12375],"\n  written by Seph Gentle, the "],[[-1,12340],"a"],[[-1,12335],"uthor of numerous JavaScript collabora"],[[-1,12291],"tive editing libraries. T"],[[-1,12258],"he "],[[-1,12249],"Rust\n"],[[-1,12238],"  is chosen in search of per"],[[-1,12208],"formance, the library is exposed to JavaScript "],[[-1,12159],"through WebAssembly ABI"],[[-1,12134]," from\n  the"],[[-1,12121]," `diamond-types-node` "],[[-1,12093],"NPM package."],[[-1,12099],3],[[-1,12123],1],[[-1,12136],1],[[-1,12161],1],[[-1,12210],1],[[-1,12240],1],[[-1,12244],3],[[-1,12255],3],[[-1,12266],4],[[-1,12297],3],[[-1,12339],2],[[-1,12344],2],[[-1,12377],1],[[-1,12403],1],[[-1,12438],1],[[-1,13197],3],[[-1,13194],"\n\n"],[[-1,13147],"As a rule of thumb, an equivalent algorithm implemented in Rust will be about "],[[-1,12937],"2"],[[-1,13048],1],[[-1,13047],"-"],[[-1,12935],"5"],[[-1,13044],1],[[-1,13046],1],[[-1,13069],2],[[-1,13067],"x faster than the"],[[-1,13043],"\nsame algorithm implemented in JavaScript. "],[[-1,12934],"However, when compiling "],[[-1,12908],"Rust to WebAssembly, "],[[-1,12874],"it loses about\n3"],[[-1,12854],"-4x "],[[-1,12848],"of its "],[[-1,12080],"performance"],[[-1,12841],5],[[-1,12750],". So, net-net"],[[-1,12735],1],[[-1,12734]," code "],[[-1,12724],"ported from JavaScript to Rust and then compiled to WebAssembly\nfor consumption in JavaScript will be about the same s"],[[-1,12602],"peed as "],[[-1,12590],"the original JavaScript code."],[[-1,12068],"\n"],[[-1,11941],"\n"],[[-1,11855],"However, packaging code into WebAssembly modules has downsides. Firstly, WebAssembly modules "],[[-1,11756],"limit\nthe data structures "],[[-1,11725],"one can share between "],[[-1,11701],"the JavaScript and WebAssembly code."],[[-1,11297],"\n\n"],[[-1,11665],1],[[-1,11664],"Secondly"],[[-1,11641],", WebAsse"],[[-1,11628],"mbly"],[[-1,11293]," "],[[-1,11624],1],[[-1,11607],"modules result in larger bundle sizes, which is a problem for web applications."],[[-1,11291],"\n"],[[-1,11504],1],[[-1,11477],"W"],[[-1,11462],"ASM modules can easily"],[[-1,11289]," "],[[-1,11440],1],[[-1,11439],"reach 100"],[[-1,11231]," "],[[-1,11428],"KB in"],[[-1,11415]," size, sometimes even 1"],[[-1,11230]," "],[[-1,11392],"MB. Below are the "],[[-1,11369],"real-world sizes of the"],[[-1,11287],"\n"],[[-1,11346],1],[[-1,11345],"WASM modules for the"],[[-1,11285]," "],[[-1,11325],1],[[-1,11324],"libraries mentioned above:"],[[-1,11284],"\n\n"],[[-1,11269],"`@automerge/automerge-wasm` - 1."],[[-1,11233],"3 "],[[-1,11237],1],[[-1,11236],"MB"],[[-1,11229],"\n"],[[-1,11186],"\n![Character merging into block](https://streamich.github.io/json-joy/"],[[-1,11071],"blog/images/wasm-sizes/automerge-wasm.png"],[[-1,11011],")"],[[-1,11030],"\n\n`ywasm` - 1"],[[-1,11017],2],[[-1,11015]," MB"],[[-1,11008],"\n\n![Character merging into block](https://streamich.github.io/json-joy/blog/images/wasm-sizes/"],[[-1,10893],"y"],[[-1,10914],10],[[-1,10904],"wasm.png)"],[[-1,11116],42],[[-1,11228],42],[[-1,11282],12],[[-1,11374],4],[[-1,11423],4],[[-1,11430],1],[[-1,11476],7],[[-1,11503],25],[[-1,11528],21],[[-1,11623],15],[[-1,11632],2],[[-1,11656],13],[[-1,11703],1],[[-1,11730],4],[[-1,11762],3],[[-1,11940],1],[[-1,11937],43],[[-1,11876],20],[[-1,11894],9],[[-1,11939],1],[[-1,12067],1],[[-1,12033],21],[[-1,12006],3],[[-1,12001],18],[[-1,11981],13],[[-1,11967],26],[[-1,11968],1],[[-1,11983],1],[[-1,12003],1],[[-1,12008],1],[[-1,12012],2],[[-1,12066],4],[[-1,12056],21],[[-1,12062],3],[[-1,12561],8],[[-1,12594],3],[[-1,12606],2],[[-1,12728],2],[[-1,12737],1],[[-1,12836],85],[[-1,12850],1],[[-1,12858],2],[[-1,12887],10],[[-1,12910],1],[[-1,13000],61],[[-1,13192],44],[[-1,13218],2],[[-1,13469],2],[[-1,13462],11],[[-1,13366],4],[[-1,13451],20],[[-1,13362],15],[[-1,13344],20],[[-1,13347],1],[[-1,13431],64],[[-1,13467],4],[[-1,13557],43],[[-1,13644],2],[[-1,13658],1],[[-1,13705],1],[[-1,13707],1],[[-1,13997],2],[[-1,14136],22],[[-1,14108],18],[[-1,14114],3],[[-1,14188],4],[[-1,14245],4],[[-1,14255],1],[[-1,14312],2],[[-1,14513],2],[[-1,14534],1],[[-1,14550],9],[[-1,14577],2],[[-1,14582],2],[[-1,14611],19],[[-1,14675],2],[[-1,14730],15],[[-1,14876],31],[[-1,14825],11],[[-1,14845],20],[[-1,14814],1],[[-1,14881],2],[[-1,14956],3],[[-1,14973],1],[[-1,14998],2],[[-1,14994],2],[[-1,14996],1],[[-1,15019],1],[[-1,15087],1],[[-1,15091],1],[[-1,15096],1],[[-1,15115],2],[[-1,15125],1],[[-1,15139],1],[[-1,15153],2],[[-1,15169],4],[[-1,15305],22],[[-1,15281],1],[[-1,15279],9],[[-1,15269],2],[[-1,15280],1],[[-1,15283],1],[[-1,15343],7],[[-1,15403],3],[[-1,15664],1],[[-1,15675],1],[[-1,15694],1],[[-1,15728],1],[[-1,15907],2],[[-1,15953],4],[[-1,15991],8],[[-1,15998],2],[[-1,16012],2],[[-1,16027],3],[[-1,16199],1],[[-1,16221],4],[[-1,16261],2],[[-1,16401],4],[[-1,16414],3],[[-1,16426],5],[[-1,16440],7],[[-1,32481],"\n"],[[-1,10892],"\n`"],[[-1,10772],"diamond-types-node"],[[-1,10890],5],[[-1,10885],"` - "],[[-1,10753],"300 KB"],[[-1,10881],4],[[-1,10877],"\n\n![Character merging into block](https://streamich.github.io/json-joy/blog/images/wasm-sizes/"],[[-1,10745],"diamond-types-node"],[[-1,10783],5],[[-1,10778],".png)"],[[-1,10727],"\n\n"],[[-1,11295],"\n"],[[-1,14335],"\n\n"],[[-1,32576],1],[[-1,32579],1],[[-1,32710],1],[[-1,32752],2],[[-1,32772],2],[[-1,32786],3],[[-1,32792],1],[[-1,32799],1],[[-1,32837],"\n"],[[-1,10725],1],[[-1,10723],11],[[-1,10711],43],[[-1,10576],1],[[-1,10668],91],[[-1,10560],1],[[-1,10559],"["],[[-1,10557],"rga"],[[-1,10553],"]: https://www.sciencedirect.com/science/article/abs/pii/S0743731510002716"],[[-1,10472],"\n[causal-tree]: https://www.researchgate.net/publication/221367739_Deep_hypertext_with_embedded_revision_control_implemented_in_regular_expressions"],[[-1,10558],1],[[-1,10724],1],[[-1,32836],"\n"],[[-1,29793],"["],[[-1,29783],"high"],[[-1,29777],"-responsiveness-crdts"],[[-1,29755],"]: https://pages.lip6.fr/Marc.Shapiro/papers/rgasplit-group2016-11.pdf\n"],[[-1,23456],"["],[[-1,23454],"rope"],[[-1,23449],"]: https://en.wikipedia.org/wiki/Rope_(data_structure)"],[[-1,15501],"\n["],[[-1,15498],"crdt-benchmarks"],[[-1,15482],"]: https://github.com/josephg/crdt-benchmarks"],[[-1,15499],1],[[-1,23395],"\n"],[[-1,15902],"["],[[-1,15900],"datasets"],[[-1,15891],"]: "],[[-1,15886],"https://github.com/josephg/crdt-benchmarks/blob/7b0b90e912cfa88aff8c6336917343ee08653e51/README.md#data-sets\n"],[[-1,15224],"["],[[-1,15222],"automerge"],[[-1,15212],"]: https://github.com/automerge/automerge\n"],[[-1,13801],"["],[[-1,13799],"yrs"],[[-1,13795],"]: https://github.com/y-crdt/y-crdt\n["],[[-1,13757],"yjs"],[[-1,13753],"]: https://github.com/yjs/yjs\n"],[[-1,10222],"["],[[-1,10218],"vscode-tracker"],[[-1,10203],"]: https://github.com/josephg/vscode-tracker\n"],[[-1,9344],"["],[[-1,9342],"seph-blog1"],[[-1,9331],"]: https://josephg.com/blog/crdts-go-brrr/\n"],[[-1,250],"[jump-rope]: https://github.com/josephg/jumprope-rs"],[[-1,199],11],[[-1,188],"\n"],[[-1,315],"["],[[-1,313],"jump-rope"],[[-1,186],"-benchmarks"],[[-1,303],"]: https://github.com/josephg/jumprope-rs#benchmarks\n"],[[-1,314],1],[[-1,9343],1],[[-1,10220],1],[[-1,10221],1],[[-1,13758],1],[[-1,13800],1],[[-1,13803],1],[[-1,15223],1],[[-1,15888],1],[[-1,15901],1],[[-1,23455],1],[[-1,29779],1],[[-1,29791],7],[[-1,29792],1],[[-1,32918],20],[[-1,32894],1],[[-1,32898],2],[[-1,33511],1],[[-1,33530],1],[[-1,33539],1],[[-1,33555],1],[[-1,33631],1],[[-1,33653],1],[[-1,34112],1],[[-1,34124],1],[[-1,34180],10],[[-1,34168],3],[[-1,34170],1],[[-1,34199],2],[[-1,34249],3],[[-1,34321],21],[[-1,34324],1],[[-1,34377],1],[[-1,36847],1],[[-1,36858],8],[[-1,36906],1],[[-1,36916],1],[[-1,36947],2],[[-1,37024],12],[[-1,37064],1],[[-1,37223],1],[[-1,37815],1],[[-1,37938],5],[[-1,37941],1],[[-1,37968],2],[[-1,39334],3],[[-1,39359],1],[[-1,39382],4],[[-1,39386],2],[[-1,39403],1],[[-1,39534],2],[[-1,39559],9],[[-1,39595],1],[[-1,39685],1],[[-1,39702],1],[[-1,40377],4],[[-1,41331],1],[[-1,41342],2],[[-1,41353],1],[[-1,41664],1],[[-1,41688],1],[[-1,41723],1],[[-1,41725],1],[[-1,41738],1],[[-1,41798],5],[[-1,42012],56],[[-1,42052],5],[[-1,42143],1],[[-1,42213],7],[[-1,42513],1],[[-1,42674],1],[[-1,42701],2],[[-1,42738],1],[[-1,42744],1],[[-1,42810],1],[[-1,42836],1],[[-1,42866],1],[[-1,42859],1],[[-1,42865],3],[[-1,42925],1],[[-1,42991],1],[[-1,43027],1]]]]