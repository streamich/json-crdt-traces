Model
├─ RootNode 0.0
│  └─ StrNode ..0000.1 { "# Introducing fast RGA implement" … }
│     └─ StrChunk ..0000.20202!1 len:31510 [1]
│        ← StrChunk ..0000.6517!1 len:14331 [1]
│          ← StrChunk ..0000.7610!1 len:7234 { "\n" }
│            ← StrChunk ..0000.2153!2 len:3779 { "\n\n" }
│              ← StrChunk ..0000.1451!83 len:2241 { " Great news is that it is ready," … }
│                ← StrChunk ..0000.676!13 len:1302 { "conflict free" }
│                  ← StrChunk ..0000.32561!1 len:662 { "[" }
│                    ← StrChunk ..0000.60!55 len:466 { "\n\nFirst, a little note on JSON C" … }
│                      ← StrChunk ..0000.11041!14 len:64 { "implementation" }
│                        ← StrChunk ..0000.11055!5 len:23 { " fast" }
│                          ← StrChunk ..0000.15!3 len:13 { "ing" }
│                            ← StrChunk ..0000.3!10 len:10 { "# Introduc" }
│                          → StrChunk ..0000.18!5 len:5 { " RGA " }
│                            ← StrChunk ..0000.11060!1 len:0 [1]
│                        → StrChunk ..0000.51!9 len:27 { "JSON CRDT" }
│                          ← StrChunk ..0000.32!17 len:17 { " that will power " }
│                            ← StrChunk ..0000.23!9 len:0 [9]
│                          → StrChunk ..0000.11039!1 len:1 { "s" }
│                      → StrChunk ..0000.242!54 len:347 { "). The\naim for JSON CRDT is to c" … }
│                        ← StrChunk ..0000.205!25 len:111 { "Conflict-free Replicated " }
│                          ← StrChunk ..0000.184!20 len:77 { "ata type as a CRDT (" }
│                            ← StrChunk ..0000.117!57 len:57 { "a specification and a JavaScript" … }
│                          → StrChunk ..0000.232!9 len:9 { "Data Type" }
│                        → StrChunk ..0000.343!23 len:182 { "support all JSON values" }
│                          ← StrChunk ..0000.304!35 len:39 { "-art CRDT specification which wi" … }
│                            ← StrChunk ..0000.298!4 len:4 { "-the" }
│                          → StrChunk ..0000.368!120 len:120 { ", including lists, for which thi" … }
│                    → StrChunk ..0000.549!1 len:195 [1]
│                      ← StrChunk ..0000.32564!1 len:55 { "]" }
│                        ← StrChunk ..0000.548!1 len:32 { "*" }
│                          ← StrChunk ..0000.488!25 len:26 { "Replicated Growable Array" }
│                            ← StrChunk ..0000.547!1 len:1 { "*" }
│                          → StrChunk ..0000.32565!3 len:5 { "rga" }
│                            ← StrChunk ..0000.32562!2 len:2 { "][" }
│                        → StrChunk ..0000.32465!1 len:22 { "[" }
│                          ← StrChunk ..0000.529!6 len:20 { "s CT (" }
│                            ← StrChunk ..0000.513!14 len:14 { ",\nalso known a" }
│                          → StrChunk ..0000.551!1 len:1 { "*" }
│                      → StrChunk ..0000.553!52 len:140 { ", sometimes you might find it ab" … }
│                        ← StrChunk ..0000.32466!14 len:27 { "][causal-tree]" }
│                          ← StrChunk ..0000.552!1 len:12 { "*" }
│                            ← StrChunk ..0000.536!11 len:11 { "Causal Tree" }
│                          → StrChunk ..0000.535!1 len:1 { ")" }
│                        → StrChunk ..0000.634!40 len:61 { ", or RGA for short, allows to im" … }
│                          ← StrChunk ..0000.613!19 len:21 { "he\nCT/RGA algorithm" }
│                            ← StrChunk ..0000.607!2 len:2 { " T" }
│                          → StrChunk ..0000.674!2 len:0 [2]
│                  → StrChunk ..0000.893!4 len:627 { " the" }
│                    ← StrChunk ..0000.761!1 len:161 { ")" }
│                      ← StrChunk ..0000.726!35 len:82 { " strings, binary blobs, or array" … }
│                        ← StrChunk ..0000.700!1 len:30 [1]
│                          ← StrChunk ..0000.712!1 len:11 { "\n" }
│                            ← StrChunk ..0000.690!10 len:10 { " list data" }
│                          → StrChunk ..0000.713!9 len:19 { ", such as" }
│                            ← StrChunk ..0000.701!10 len:10 { "structures" }
│                        → StrChunk ..0000.800!1 len:17 [1]
│                          ← StrChunk ..0000.779!12 len:17 [12]
│                            ← StrChunk ..0000.762!17 len:17 { "think JSON arrays" }
│                          → StrChunk ..0000.791!8 len:0 [8]
│                      → StrChunk ..0000.605!2 len:78 { "\n\n" }
│                        ← StrChunk ..0000.632!1 len:1 [1]
│                          ← StrChunk ..0000.722!2 len:1 [2]
│                            ← StrChunk ..0000.805!1 len:1 { "." }
│                          → StrChunk ..0000.609!2 len:0 [2]
│                        → StrChunk ..0000.958!1 len:75 { ";" }
│                          ← StrChunk ..0000.836!53 len:74 { ", or CRDTs? Those are data types" … }
│                            ← StrChunk ..0000.806!21 len:21 { "What is conflict-free" }
│                          → StrChunk ..0000.889!4 len:0 [4]
│                    → StrChunk ..0000.1294!3 len:462 { "RGA" }
│                      ← StrChunk ..0000.1237!1 len:321 { "\n" }
│                        ← StrChunk ..0000.998!30 len:231 { " the\nforks can be merged back " }
│                          ← StrChunk ..0000.959!29 len:84 { " and at any point in time all" }
│                            ← StrChunk ..0000.899!55 len:55 { "n\ntwo or more peers can edit the" … }
│                          → StrChunk ..0000.1110!92 len:117 { "forks can be merged in any order" … }
│                            ← StrChunk ..0000.1084!25 len:25 { "without conflicts. Also, " }
│                        → StrChunk ..0000.1248!46 len:89 { "`json-joy` implements and advanc" … }
│                          ← StrChunk ..0000.1238!4 len:39 { "Now " }
│                            ← StrChunk ..0000.1202!35 len:35 { "\n## `json-joy` RGA implementatio" … }
│                          → StrChunk ..0000.1297!4 len:4 { "the " }
│                      → StrChunk ..0000.1445!6 len:138 { "at it " }
│                        ← StrChunk ..0000.1316!1 len:32 { "w" }
│                          ← StrChunk ..0000.1304!11 len:12 { "algorithm (" }
│                            ← StrChunk ..0000.1301!1 len:1 { " " }
│                          → StrChunk ..0000.1319!19 len:19 { "e will take a look\n" }
│                        → StrChunk ..0000.1372!4 len:100 { ", bu" }
│                          ← StrChunk ..0000.1354!17 len:31 { "advanced about it" }
│                            ← StrChunk ..0000.1338!14 len:14 { "later what is " }
│                          → StrChunk ..0000.1378!65 len:65 { "t for now, just think about it a" … }
│                → StrChunk ..0000.2229!10 len:856 { "imestamps\"" }
│                  ← StrChunk ..0000.1540!7 len:540 [7]
│                    ← StrChunk ..0000.1808!12 len:330 { "mplements an" }
│                      ← StrChunk ..0000.1616!6 len:100 { "\n\n```\n" }
│                        ← StrChunk ..0000.1554!31 len:59 { " you will need to install the `" }
│                          ← StrChunk ..0000.1615!1 len:6 { "," }
│                            ← StrChunk ..0000.1549!5 len:5 { "First" }
│                          → StrChunk ..0000.1603!12 len:22 { "NPM package." }
│                            ← StrChunk ..0000.1587!10 len:10 { "json-joy` " }
│                        → StrChunk ..0000.1622!4 len:35 { "\n```" }
│                          ← StrChunk ..0000.1626!1 len:17 [1]
│                            ← StrChunk ..0000.1628!17 len:17 { "yarn add json-joy" }
│                          → StrChunk ..0000.1792!14 len:14 { "\n\n`json-joy` i" }
│                      → StrChunk ..0000.1931!1 len:218 [1]
│                        ← StrChunk ..0000.1981!66 len:218 { "a string\ndata type, which is imp" … }
│                          ← StrChunk ..0000.1933!43 len:152 { "e will take a look at applicatio" … }
│                            ← StrChunk ..0000.1822!109 len:109 { " abstract version of the RGA alg" … }
│                          → StrChunk ..0000.1976!4 len:0 [4]
│                        → StrChunk ..0000.1597!3 len:0 [3]
│                          ← StrChunk ..0000.1806!1 len:0 [1]
│                            ← StrChunk ..0000.1820!1 len:0 [1]
│                          → StrChunk ..0000.1585!1 len:0 [1]
│                    → StrChunk ..0000.2155!48 len:210 { " Also, import the `ts` helper, w" … }
│                      ← StrChunk ..0000.1702!7 len:147 { "; and (" }
│                        ← StrChunk ..0000.1645!42 len:53 { "In general, RGAs support two ope" … }
│                          ← StrChunk ..0000.1443!2 len:2 { "\n\n" }
│                            ← StrChunk ..0000.1534!3 len:0 [3]
│                          → StrChunk ..0000.1690!8 len:9 { ") insert" }
│                            ← StrChunk ..0000.1688!1 len:1 { "1" }
│                        → StrChunk ..0000.1750!21 len:87 { "\nfor string editing.\n" }
│                          ← StrChunk ..0000.1712!35 len:36 { ") delete. Lets see how to use th" … }
│                            ← StrChunk ..0000.1710!1 len:1 { "2" }
│                          → StrChunk ..0000.2123!30 len:30 { "\nImport the `StringRga` class." }
│                      → StrChunk ..0000.2205!3 len:15 { " cr" }
│                        ← StrChunk ..0000.2204!1 len:5 { "s" }
│                          ← StrChunk ..0000.2203!1 len:1 [1]
│                            ← StrChunk ..0000.2295!1 len:1 { "u" }
│                          → StrChunk ..0000.2296!3 len:3 { " to" }
│                        → StrChunk ..0000.2220!1 len:7 [1]
│                          ← StrChunk ..0000.2240!1 len:5 { "\n" }
│                            ← StrChunk ..0000.2216!4 len:4 { "eate" }
│                          → StrChunk ..0000.2221!2 len:2 { "\"t" }
│                  → StrChunk ..0000.2273!1 len:306 [1]
│                    ← StrChunk ..0000.2333!1 len:157 [1]
│                      ← StrChunk ..0000.2309!24 len:86 { "and usually in all CRDTs" }
│                        ← StrChunk ..0000.2258!14 len:45 { "*operation IDs" }
│                          ← StrChunk ..0000.2244!4 len:6 { "aka " }
│                            ← StrChunk ..0000.2241!2 len:2 { " (" }
│                          → StrChunk ..0000.2299!9 len:25 { " in RGA (" }
│                            ← StrChunk ..0000.2278!16 len:16 { "*). All elements" }
│                        → StrChunk ..0000.2345!1 len:17 [1]
│                          ← StrChunk ..0000.2561!1 len:11 { "\n" }
│                            ← StrChunk ..0000.2335!10 len:10 { ", for that" }
│                          → StrChunk ..0000.2346!6 len:6 { "matter" }
│                      → StrChunk ..0000.2367!9 len:71 { "que ID. W" }
│                        ← StrChunk ..0000.2352!1 len:12 [1]
│                          ← StrChunk ..0000.2563!1 len:2 { " " }
│                            ← StrChunk ..0000.2308!1 len:1 { ")" }
│                          → StrChunk ..0000.2353!10 len:10 { "have a uni" }
│                        → StrChunk ..0000.2363!2 len:50 [2]
│                          ← StrChunk ..0000.2376!1 len:50 [1]
│                            ← StrChunk ..0000.2378!50 len:50 { "e will need the `ts` helper to g" … }
│                          → StrChunk ..0000.2275!2 len:0 [2]
│                    → StrChunk ..0000.2047!9 len:149 [9]
│                      ← StrChunk ..0000.2208!4 len:98 [4]
│                        ← StrChunk ..0000.2243!1 len:0 [1]
│                          ← StrChunk ..0000.2248!3 len:0 [3]
│                            ← StrChunk ..0000.2254!3 len:0 [3]
│                          → StrChunk ..0000.2223!3 len:0 [3]
│                        → StrChunk ..0000.1783!8 len:98 { "import {" }
│                          ← StrChunk ..0000.2566!80 len:88 { "import {StringRga} from 'json-jo" … }
│                            ← StrChunk ..0000.1771!8 len:8 { "\n\n```ts\n" }
│                          → StrChunk ..0000.2647!2 len:2 { "ts" }
│                      → StrChunk ..0000.3446!6 len:51 { "/clock" }
│                        ← StrChunk ..0000.2078!16 len:39 { "es2020/json-crdt" }
│                          ← StrChunk ..0000.2056!16 len:17 { " from 'json-joy/" }
│                            ← StrChunk ..0000.1791!1 len:1 { "}" }
│                          → StrChunk ..0000.2649!6 len:6 { "-patch" }
│                        → StrChunk ..0000.2072!4 len:6 [4]
│                          ← StrChunk ..0000.2121!2 len:2 { "';" }
│                            ← StrChunk ..0000.2094!27 len:0 [27]
│                          → StrChunk ..0000.1779!4 len:4 { "\n```" }
│              → StrChunk ..0000.2974!4 len:1536 [4]
│                ← StrChunk ..0000.3293!1 len:546 { "*" }
│                  ← StrChunk ..0000.2878!2 len:383 { ", " }
│                    ← StrChunk ..0000.3134!16 len:203 { " or *Session ID*" }
│                      ← StrChunk ..0000.2553!1 len:146 [1]
│                        ← StrChunk ..0000.2509!24 len:92 { "or every character, but " }
│                          ← StrChunk ..0000.2464!43 len:55 { "`StringRga` will not actually st" … }
│                            ← StrChunk ..0000.2428!12 len:12 { "Don't worry " }
│                          → StrChunk ..0000.2565!1 len:13 { "\n" }
│                            ← StrChunk ..0000.2541!12 len:12 { "more on that" }
│                        → StrChunk ..0000.2789!26 len:54 { "re 2-tuples of *Site ID* (" }
│                          ← StrChunk ..0000.2781!6 len:12 { " IDs a" }
│                            ← StrChunk ..0000.2554!6 len:6 { "later." }
│                          → StrChunk ..0000.2816!16 len:16 { "aka *Process ID*" }
│                      → StrChunk ..0000.2845!19 len:41 { "increasing sequence" }
│                        ← StrChunk ..0000.3151!1 len:14 { "\n" }
│                          ← StrChunk ..0000.2832!12 len:13 { " and an ever" }
│                            ← StrChunk ..0000.2815!1 len:1 { ")" }
│                          → StrChunk ..0000.2844!1 len:0 [1]
│                        → StrChunk ..0000.2864!1 len:8 [1]
│                          ← StrChunk ..0000.2874!1 len:1 [1]
│                            ← StrChunk ..0000.3153!1 len:1 { " " }
│                          → StrChunk ..0000.2865!7 len:7 { "counter" }
│                    → StrChunk ..0000.3157!1 len:178 { " " }
│                      ← StrChunk ..0000.3075!19 len:79 { "*Logical Timestamp*" }
│                        ← StrChunk ..0000.3041!4 len:38 { "; es" }
│                          ← StrChunk ..0000.2897!6 len:11 { "\"time\"" }
│                            ← StrChunk ..0000.2888!5 len:5 { "i.e. " }
│                          → StrChunk ..0000.3045!22 len:23 { "entially, and ID is a " }
│                            ← StrChunk ..0000.11036!1 len:1 { "s" }
│                        → StrChunk ..0000.3097!1 len:22 [1]
│                          ← StrChunk ..0000.3155!1 len:2 { "\n" }
│                            ← StrChunk ..0000.3096!1 len:1 { "," }
│                          → StrChunk ..0000.3098!20 len:20 { "where each user will" }
│                      → StrChunk ..0000.3216!15 len:98 { " nof all Logica" }
│                        ← StrChunk ..0000.3182!34 len:50 { "*Logical Clock*, and the collect" … }
│                          ← StrChunk ..0000.3119!15 len:15 { "have their own " }
│                            ← StrChunk ..0000.3118!1 len:0 [1]
│                          → StrChunk ..0000.11037!1 len:1 { "n" }
│                        → StrChunk ..0000.3241!13 len:33 { "locks\nof all " }
│                          ← StrChunk ..0000.3231!2 len:3 { " C" }
│                            ← StrChunk ..0000.11038!1 len:1 { "l" }
│                          → StrChunk ..0000.3260!17 len:17 { "users will for a " }
│                  → StrChunk ..0000.2507!1 len:162 [1]
│                    ← StrChunk ..0000.3067!7 len:14 [7]
│                      ← StrChunk ..0000.3239!1 len:14 [1]
│                        ← StrChunk ..0000.3290!1 len:14 { "*" }
│                          ← StrChunk ..0000.3277!12 len:12 { "Vector Clock" }
│                            ← StrChunk ..0000.3291!1 len:0 [1]
│                          → StrChunk ..0000.3254!5 len:1 [5]
│                            ← StrChunk ..0000.3289!1 len:1 { "." }
│                        → StrChunk ..0000.3158!1 len:0 [1]
│                          ← StrChunk ..0000.3160!18 len:0 [18]
│                            ← StrChunk ..0000.3233!3 len:0 [3]
│                          → StrChunk ..0000.3094!1 len:0 [1]
│                      → StrChunk ..0000.2880!4 len:0 [4]
│                        ← StrChunk ..0000.3029!1 len:0 [1]
│                          ← StrChunk ..0000.2903!2 len:0 [2]
│                            ← StrChunk ..0000.3033!4 len:0 [4]
│                          → StrChunk ..0000.2893!2 len:0 [2]
│                        → StrChunk ..0000.2787!1 len:0 [1]
│                          ← StrChunk ..0000.2875!1 len:0 [1]
│                            ← StrChunk ..0000.2872!1 len:0 [1]
│                          → StrChunk ..0000.2533!4 len:0 [4]
│                    → StrChunk ..0000.2905!14 len:148 { "\nconst sid = 1" }
│                      ← StrChunk ..0000.2656!7 len:82 { "\nNow cr" }
│                        ← StrChunk ..0000.2440!10 len:1 [10]
│                          ← StrChunk ..0000.2456!5 len:0 [5]
│                            ← StrChunk ..0000.2462!1 len:0 [1]
│                          → StrChunk ..0000.1748!1 len:1 { "\n" }
│                            ← StrChunk ..0000.1747!1 len:0 [1]
│                        → StrChunk ..0000.2699!1 len:74 [1]
│                          ← StrChunk ..0000.2921!39 len:67 { ", you will need to give it a uni" … }
│                            ← StrChunk ..0000.2671!28 len:28 { "eate the text CRDT data type" }
│                          → StrChunk ..0000.2700!7 len:7 { "\n\n```ts" }
│                      → StrChunk ..0000.3016!5 len:52 { "  // " }
│                        ← StrChunk ..0000.3005!11 len:28 { " // Site ID" }
│                          ← StrChunk ..0000.2919!1 len:3 { ";" }
│                            ← StrChunk ..0000.3588!2 len:2 { "23" }
│                          → StrChunk ..0000.2738!14 len:14 { "\nlet time = 0;" }
│                        → StrChunk ..0000.2960!1 len:19 { "\n" }
│                          ← StrChunk ..0000.3021!1 len:6 [1]
│                            ← StrChunk ..0000.3023!6 len:6 { "\"time\"" }
│                          → StrChunk ..0000.2962!12 len:12 { "\nconst id = " }
│                → StrChunk ..0000.3551!4 len:990 { "└─ ∅" }
│                  ← StrChunk ..0000.3399!8 len:300 { "\n\n```ts\n" }
│                    ← StrChunk ..0000.2754!24 len:151 [24]
│                      ← StrChunk ..0000.2989!10 len:45 { ", time++);" }
│                        ← StrChunk ..0000.2987!1 len:6 { "(" }
│                          ← StrChunk ..0000.2978!9 len:2 [9]
│                            ← StrChunk ..0000.3453!2 len:2 { "ts" }
│                          → StrChunk ..0000.2988!1 len:3 [1]
│                            ← StrChunk ..0000.3002!3 len:3 { "sid" }
│                        → StrChunk ..0000.2752!1 len:29 { "(" }
│                          ← StrChunk ..0000.2713!25 len:26 { "const str = new StringRga" }
│                            ← StrChunk ..0000.2707!1 len:1 { "\n" }
│                          → StrChunk ..0000.2999!2 len:2 { "id" }
│                      → StrChunk ..0000.3340!15 len:106 { "ing the `.view(" }
│                        ← StrChunk ..0000.2708!5 len:51 { "\n```\n" }
│                          ← StrChunk ..0000.2753!1 len:2 [1]
│                            ← StrChunk ..0000.2779!2 len:2 { ");" }
│                          → StrChunk ..0000.3294!44 len:44 { "\nWe can see what is storied in o" … }
│                        → StrChunk ..0000.3384!1 len:40 [1]
│                          ← StrChunk ..0000.3398!1 len:28 { "\n" }
│                            ← StrChunk ..0000.3357!27 len:27 { ")` method, lets verify that" }
│                          → StrChunk ..0000.3385!12 len:12 { "it is empty:" }
│                    → StrChunk ..0000.3555!13 len:141 { "\nconsole.log(" }
│                      ← StrChunk ..0000.3420!1 len:88 [1]
│                        ← StrChunk ..0000.3422!1 len:30 { ")" }
│                          ← StrChunk ..0000.3411!9 len:21 { "str.view(" }
│                            ← StrChunk ..0000.3424!12 len:12 { "console.log(" }
│                          → StrChunk ..0000.3423!1 len:8 [1]
│                            ← StrChunk ..0000.3437!8 len:8 { ");\n// \"\"" }
│                        → StrChunk ..0000.3492!14 len:58 { "internal state" }
│                          ← StrChunk ..0000.3457!24 len:28 { "\n\nWe can also print the " }
│                            ← StrChunk ..0000.3407!4 len:4 { "\n```" }
│                          → StrChunk ..0000.3510!16 len:16 { " like so:\n\n```ts" }
│                      → StrChunk ..0000.3580!3 len:40 { "// " }
│                        ← StrChunk ..0000.3568!1 len:11 [1]
│                          ← StrChunk ..0000.3578!2 len:10 { ");" }
│                            ← StrChunk ..0000.3569!8 len:8 { "str + ''" }
│                          → StrChunk ..0000.3526!1 len:1 { "\n" }
│                        → StrChunk ..0000.3541!10 len:26 { ".0 { \"\" }\n" }
│                          ← StrChunk ..0000.3590!3 len:13 { "123" }
│                            ← StrChunk ..0000.3531!10 len:10 { "StringRga " }
│                          → StrChunk ..0000.3583!3 len:3 { "// " }
│                  → StrChunk ..0000.4453!114 len:686 [114]
│                    ← StrChunk ..0000.3898!42 len:292 { " A local insert can be performed" … }
│                      ← StrChunk ..0000.3683!3 len:110 { "rt " }
│                        ← StrChunk ..0000.3593!44 len:80 { "It shows that the string has ID " … }
│                          ← StrChunk ..0000.3586!2 len:6 { "\n\n" }
│                            ← StrChunk ..0000.3527!4 len:4 { "\n```" }
│                          → StrChunk ..0000.3666!15 len:30 { "\n\nNow lets inse" }
│                            ← StrChunk ..0000.3639!15 len:15 { "empty contents." }
│                        → StrChunk ..0000.3695!11 len:27 { " in to the " }
│                          ← StrChunk ..0000.3686!9 len:9 [9]
│                            ← StrChunk ..0000.3889!9 len:9 { "somethign" }
│                          → StrChunk ..0000.3712!7 len:7 { "string." }
│                      → StrChunk ..0000.3953!10 len:140 { ")` method." }
│                        ← StrChunk ..0000.3941!7 len:9 { "`.insAt" }
│                          ← StrChunk ..0000.3940!1 len:1 [1]
│                            ← StrChunk ..0000.3964!1 len:1 { "\n" }
│                          → StrChunk ..0000.3950!1 len:1 { "(" }
│                        → StrChunk ..0000.3719!8 len:121 { "\n\n```ts\n" }
│                          ← StrChunk ..0000.3948!1 len:0 [1]
│                            ← StrChunk ..0000.3951!1 len:0 [1]
│                          → StrChunk ..0000.4657!113 len:113 { "let content = 'Hell world!';\nstr" … }
│                    → StrChunk ..0000.3965!2 len:394 { "\n\n" }
│                      ← StrChunk ..0000.3882!3 len:93 [3]
│                        ← StrChunk ..0000.4224!114 len:89 [114]
│                          ← StrChunk ..0000.4339!113 len:89 [113]
│                            ← StrChunk ..0000.4567!89 len:89 { "\n// StringRga 123.0 { \"Hell worl" … }
│                          → StrChunk ..0000.3731!69 len:0 [69]
│                        → StrChunk ..0000.3834!48 len:4 [48]
│                          ← StrChunk ..0000.3885!3 len:0 [3]
│                            ← StrChunk ..0000.3800!34 len:0 [34]
│                          → StrChunk ..0000.3727!4 len:4 { "\n```" }
│                      → StrChunk ..0000.4083!14 len:299 { "racter of the " }
│                        ← StrChunk ..0000.4044!20 len:97 { "specifies the ID of\n" }
│                          ← StrChunk ..0000.4017!19 len:64 { ", where `123.1!11` " }
│                            ← StrChunk ..0000.3968!45 len:45 { "You can see that a `StringChunk`" … }
│                          → StrChunk ..0000.4066!13 len:13 { "the first cha" }
│                        → StrChunk ..0000.4200!19 len:188 { "x our text:\n\n```ts\n" }
│                          ← StrChunk ..0000.4162!36 len:92 { "\n\nLets perform another insert, t" … }
│                            ← StrChunk ..0000.4104!56 len:56 { "chunk `123.1` and `!11` denotes " … }
│                          → StrChunk ..0000.4770!77 len:77 { "content = 'o,';\nstr.insAt(4, ts(" … }
│            → StrChunk ..0000.6996!19 len:3454 { " on their machine, " }
│              ← StrChunk ..0000.5511!11 len:1901 [11]
│                ← StrChunk ..0000.5533!21 len:940 { " follow what is known" }
│                  ← StrChunk ..0000.4064!1 len:584 [1]
│                    ← StrChunk ..0000.7558!1 len:245 [1]
│                      ← StrChunk ..0000.5039!3 len:199 { "// " }
│                        ← StrChunk ..0000.4871!36 len:106 { "StringRga 123.0 { \"Hello, world!" … }
│                          ← StrChunk ..0000.5033!3 len:27 { "// " }
│                            ← StrChunk ..0000.4847!24 len:24 { "\nconsole.log(str + '');\n" }
│                          → StrChunk ..0000.4907!40 len:43 { "└─ StringChunk 123.12!2 len:13 {" … }
│                            ← StrChunk ..0000.5036!3 len:3 { "// " }
│                        → StrChunk ..0000.4989!44 len:90 { "   → StringChunk 123.5!7 len:7 {" … }
│                          ← StrChunk ..0000.5042!3 len:45 { "// " }
│                            ← StrChunk ..0000.4947!42 len:42 { "   ← StringChunk 123.1!4 len:4 {" … }
│                          → StrChunk ..0000.7557!1 len:1 { "\n" }
│                      → StrChunk ..0000.4219!4 len:46 { "\n```" }
│                        ← StrChunk ..0000.7602!8 len:42 { ", world!" }
│                          ← StrChunk ..0000.7585!9 len:34 { "\n// Hello" }
│                            ← StrChunk ..0000.7559!25 len:25 { "\nconsole.log(str.view());" }
│                          → StrChunk ..0000.7594!4 len:0 [4]
│                        → StrChunk ..0000.4097!6 len:0 [6]
│                          ← StrChunk ..0000.4160!1 len:0 [1]
│                            ← StrChunk ..0000.4198!1 len:0 [1]
│                          → StrChunk ..0000.4079!2 len:0 [2]
│                    → StrChunk ..0000.5227!47 len:339 { "\nand `→` represent the left and " … }
│                      ← StrChunk ..0000.5101!1 len:167 { "!" }
│                        ← StrChunk ..0000.3967!1 len:51 { "\n" }
│                          ← StrChunk ..0000.4013!2 len:0 [2]
│                            ← StrChunk ..0000.4036!6 len:0 [6]
│                          → StrChunk ..0000.5076!23 len:50 { "ext to be `Hello, world" }
│                            ← StrChunk ..0000.5045!27 len:27 { "\nYou can see we fixed the t" }
│                        → StrChunk ..0000.5203!6 len:115 [6]
│                          ← StrChunk ..0000.11012!6 len:99 { "binary" }
│                            ← StrChunk ..0000.5110!93 len:93 { "`, now you might also notice tha" … }
│                          → StrChunk ..0000.5209!16 len:16 { " tree, where `←`" }
│                      → StrChunk ..0000.5527!4 len:125 { "the " }
│                        ← StrChunk ..0000.5324!5 len:110 [5]
│                          ← StrChunk ..0000.11019!6 len:50 { "source" }
│                            ← StrChunk ..0000.5280!44 len:44 { " More on that later, but that is" … }
│                          → StrChunk ..0000.5329!60 len:60 { " which makes the `json-joy` RGA " … }
│                        → StrChunk ..0000.5393!1 len:11 [1]
│                          ← StrChunk ..0000.5532!1 len:5 { "\n" }
│                            ← StrChunk ..0000.5389!4 len:4 { "text" }
│                          → StrChunk ..0000.5394!6 len:6 { "chunks" }
│                  → StrChunk ..0000.5888!9 len:335 { "rope-like" }
│                    ← StrChunk ..0000.5455!1 len:258 { "*" }
│                      ← StrChunk ..0000.5471!1 len:24 { "b" }
│                        ← StrChunk ..0000.5420!11 len:14 { "in academia" }
│                          ← StrChunk ..0000.5400!20 len:1 [20]
│                            ← StrChunk ..0000.5555!1 len:1 { " " }
│                          → StrChunk ..0000.5447!2 len:2 { " *" }
│                            ← StrChunk ..0000.5435!12 len:0 [12]
│                        → StrChunk ..0000.5559!5 len:9 { "-wise" }
│                          ← StrChunk ..0000.5450!4 len:4 { "lock" }
│                            ← StrChunk ..0000.5449!1 len:0 [1]
│                          → StrChunk ..0000.5454!1 len:0 [1]
│                      → StrChunk ..0000.5659!65 len:233 { "iece allocated for each block, i" … }
│                        ← StrChunk ..0000.5613!15 len:75 { "in blocks with " }
│                          ← StrChunk ..0000.5571!41 len:42 { "storage, where chunks of text\nar" … }
│                            ← StrChunk ..0000.5564!1 len:1 { " " }
│                          → StrChunk ..0000.5637!18 len:18 { "a small metadata p" }
│                        → StrChunk ..0000.5734!75 len:93 { ", with metadata allocated for ea" … }
│                          ← StrChunk ..0000.5724!10 len:10 [10]
│                            ← StrChunk ..0000.11026!10 len:10 { "separately" }
│                          → StrChunk ..0000.5879!8 len:8 { "custom [" }
│                    → StrChunk ..0000.5887!1 len:68 [1]
│                      ← StrChunk ..0000.5947!1 len:68 { "\n" }
│                        ← StrChunk ..0000.5904!4 len:36 { "rope" }
│                          ← StrChunk ..0000.5902!1 len:2 { "[" }
│                            ← StrChunk ..0000.5898!1 len:1 { "]" }
│                          → StrChunk ..0000.5908!29 len:30 { " data structure, specifically" }
│                            ← StrChunk ..0000.5903!1 len:1 { "]" }
│                        → StrChunk ..0000.5948!23 len:31 { " for the RGA algorithm." }
│                          ← StrChunk ..0000.5938!8 len:8 { "designed" }
│                            ← StrChunk ..0000.5937!1 len:0 [1]
│                          → StrChunk ..0000.5899!2 len:0 [2]
│                      → StrChunk ..0000.5456!1 len:0 [1]
│                        ← StrChunk ..0000.5628!8 len:0 [8]
│                          ← StrChunk ..0000.5655!2 len:0 [2]
│                            ← StrChunk ..0000.5809!7 len:0 [7]
│                          → StrChunk ..0000.5565!3 len:0 [3]
│                        → StrChunk ..0000.5510!1 len:0 [1]
│                          ← StrChunk ..0000.5475!24 len:0 [24]
│                            ← StrChunk ..0000.5473!1 len:0 [1]
│                          → StrChunk ..0000.5499!10 len:0 [10]
│                → StrChunk ..0000.6401!84 len:961 { "For the sake of completeness, le" … }
│                  ← StrChunk ..0000.6221!7 len:432 { "&mdash;" }
│                    ← StrChunk ..0000.5823!55 len:272 { "]: https://en.wikipedia.org/wiki" … }
│                      ← StrChunk ..0000.5431!2 len:7 [2]
│                        ← StrChunk ..0000.5457!4 len:0 [4]
│                          ← StrChunk ..0000.5522!5 len:0 [5]
│                            ← StrChunk ..0000.5474!1 len:0 [1]
│                          → StrChunk ..0000.5461!1 len:0 [1]
│                            ← StrChunk ..0000.5463!6 len:0 [6]
│                        → StrChunk ..0000.5816!1 len:7 { "[" }
│                          ← StrChunk ..0000.5274!2 len:2 { "\n\n" }
│                            ← StrChunk ..0000.5276!2 len:0 [2]
│                          → StrChunk ..0000.5818!4 len:4 { "rope" }
│                      → StrChunk ..0000.6125!9 len:210 { "under-the" }
│                        ← StrChunk ..0000.6031!62 len:132 { "that is expected, you will not n" … }
│                          ← StrChunk ..0000.5978!38 len:43 { "of this might sound overwhelming" … }
│                            ← StrChunk ..0000.5971!5 len:5 { "\nAll " }
│                          → StrChunk ..0000.6097!27 len:27 { "; this is the lower-level (" }
│                        → StrChunk ..0000.6367!15 len:69 { " implementation" }
│                          ← StrChunk ..0000.6151!31 len:45 { ") that will\npower the JSON CRDT" }
│                            ← StrChunk ..0000.6136!14 len:14 { "-hood-workings" }
│                          → StrChunk ..0000.6194!9 len:9 { ", for you" }
│                    → StrChunk ..0000.6265!4 len:153 { "nice" }
│                      ← StrChunk ..0000.6383!1 len:45 { "\n" }
│                        ← StrChunk ..0000.6216!4 len:39 { "oper" }
│                          ← StrChunk ..0000.6204!10 len:10 { "as a devel" }
│                            ← StrChunk ..0000.6203!1 len:0 [1]
│                          → StrChunk ..0000.6245!12 len:25 { "l be exposed" }
│                            ← StrChunk ..0000.6228!13 len:13 { "&mdash;it wil" }
│                        → StrChunk ..0000.6385!1 len:5 { " " }
│                          ← StrChunk ..0000.6258!4 len:4 { "in a" }
│                            ← StrChunk ..0000.6257!1 len:0 [1]
│                          → StrChunk ..0000.6264!1 len:0 [1]
│                      → StrChunk ..0000.6337!7 len:104 { "of the " }
│                        ← StrChunk ..0000.6398!1 len:79 { "\n" }
│                          ← StrChunk ..0000.6269!67 len:78 { " API where you don't need to kno" … }
│                            ← StrChunk ..0000.6386!11 len:11 { "ly packaged" }
│                          → StrChunk ..0000.6336!1 len:0 [1]
│                        → StrChunk ..0000.6352!1 len:18 [1]
│                          ← StrChunk ..0000.6400!1 len:5 { " " }
│                            ← StrChunk ..0000.6348!4 len:4 { "CRDT" }
│                          → StrChunk ..0000.6353!13 len:13 { "algorithms.\n\n" }
│                  → StrChunk ..0000.6831!1 len:445 { "3" }
│                    ← StrChunk ..0000.6738!1 len:314 [1]
│                      ← StrChunk ..0000.6637!4 len:219 { " in " }
│                        ← StrChunk ..0000.6555!52 len:137 { "usually supports two operations;" … }
│                          ← StrChunk ..0000.6519!32 len:58 { "ses. Above I mentioned that RGA " }
│                            ← StrChunk ..0000.6491!26 len:26 { "the `StringRga` class expo" }
│                          → StrChunk ..0000.6650!1 len:27 { "," }
│                            ← StrChunk ..0000.6611!26 len:26 { "That is true, but actually" }
│                        → StrChunk ..0000.6676!49 len:78 { "-divided\ninto *remote* and *loca" … }
│                          ← StrChunk ..0000.6651!23 len:28 { ", those are usually sub" }
│                            ← StrChunk ..0000.6645!5 len:5 { "CRDTs" }
│                          → StrChunk ..0000.6737!1 len:1 { "," }
│                      → StrChunk ..0000.6791!18 len:95 { ") remote insert; (" }
│                        ← StrChunk ..0000.6787!1 len:58 { "(" }
│                          ← StrChunk ..0000.6740!44 len:56 { " `StringRga` supports four\nmain " … }
│                            ← StrChunk ..0000.6725!12 len:12 { " essentially" }
│                          → StrChunk ..0000.6789!1 len:1 { "1" }
│                        → StrChunk ..0000.6809!1 len:19 { ")" }
│                          ← StrChunk ..0000.6810!1 len:1 [1]
│                            ← StrChunk ..0000.6812!1 len:1 { "2" }
│                          → StrChunk ..0000.6813!17 len:17 { " remote delete; (" }
│                    → StrChunk ..0000.6885!40 len:130 { "\n\nWhat are those local vs remote" … }
│                      ← StrChunk ..0000.6863!6 len:37 { " local" }
│                        ← StrChunk ..0000.6856!5 len:23 [5]
│                          ← StrChunk ..0000.6855!1 len:22 { "4" }
│                            ← StrChunk ..0000.6833!21 len:21 { ") local insert; and (" }
│                          → StrChunk ..0000.6854!1 len:1 { ")" }
│                        → StrChunk ..0000.6870!3 len:8 { "del" }
│                          ← StrChunk ..0000.6869!1 len:1 [1]
│                            ← StrChunk ..0000.6876!1 len:1 { "\n" }
│                          → StrChunk ..0000.6879!4 len:4 { "ete." }
│                      → StrChunk ..0000.6959!10 len:53 { "are the on" }
│                        ← StrChunk ..0000.6928!1 len:22 { "?" }
│                          ← StrChunk ..0000.6925!3 len:3 [3]
│                            ← StrChunk ..0000.6932!3 len:3 { "ons" }
│                          → StrChunk ..0000.6935!18 len:18 { " Local operations " }
│                        → StrChunk ..0000.6985!1 len:21 [1]
│                          ← StrChunk ..0000.6995!1 len:13 { "\n" }
│                            ← StrChunk ..0000.6973!12 len:12 { "es that user" }
│                          → StrChunk ..0000.6986!8 len:8 { "performs" }
│              → StrChunk ..0000.10816!2 len:1534 { "wi" }
│                ← StrChunk ..0000.8591!1 len:1056 { "`" }
│                  ← StrChunk ..0000.7437!1 len:760 { "`" }
│                    ← StrChunk ..0000.7187!48 len:366 { "`\n\nRemote operations are the one" … }
│                      ← StrChunk ..0000.7154!1 len:130 [1]
│                        ← StrChunk ..0000.7070!32 len:98 { "the offset position in the text," }
│                          ← StrChunk ..0000.7047!19 len:25 { "operations contain " }
│                            ← StrChunk ..0000.7039!6 len:6 { "where " }
│                          → StrChunk ..0000.7140!14 len:41 { "position, text" }
│                            ← StrChunk ..0000.7112!27 len:27 { "\nfor example:\n\n- `insertAt(" }
│                        → StrChunk ..0000.7171!16 len:32 { "position, length" }
│                          ← StrChunk ..0000.7156!14 len:15 { "`\n- `deleteAt(" }
│                            ← StrChunk ..0000.7139!1 len:1 { ")" }
│                          → StrChunk ..0000.7170!1 len:1 { ")" }
│                      → StrChunk ..0000.7411!6 len:188 { "insert" }
│                        ← StrChunk ..0000.7409!2 len:167 { "- " }
│                          ← StrChunk ..0000.7268!135 len:164 { "reference the\nposition in text, " … }
│                            ← StrChunk ..0000.7237!29 len:29 { "other peers, and those don't " }
│                          → StrChunk ..0000.7438!1 len:1 { "`" }
│                        → StrChunk ..0000.7424!13 len:15 { "afterId, text" }
│                          ← StrChunk ..0000.7422!1 len:1 { "(" }
│                            ← StrChunk ..0000.7417!5 len:0 [5]
│                          → StrChunk ..0000.7423!1 len:1 { ")" }
│                    → StrChunk ..0000.7687!23 len:393 { ")`. It works similar to" }
│                      ← StrChunk ..0000.7466!86 len:166 { "`\n\nWe have already seen the loca" … }
│                        ← StrChunk ..0000.7458!6 len:18 { "...ids" }
│                          ← StrChunk ..0000.7450!7 len:11 { "delete(" }
│                            ← StrChunk ..0000.7439!4 len:4 { "\n- `" }
│                          → StrChunk ..0000.7457!1 len:1 { ")" }
│                            ← StrChunk ..0000.7464!1 len:0 [1]
│                        → StrChunk ..0000.7637!40 len:62 { "ook at the remote insert operati" … }
│                          ← StrChunk ..0000.7611!18 len:21 { "\nNow lets take a l" }
│                            ← StrChunk ..0000.7554!3 len:3 { ")`." }
│                          → StrChunk ..0000.7684!1 len:1 { "(" }
│                      → StrChunk ..0000.7761!109 len:204 { "nsertion position, we will need " … }
│                        ← StrChunk ..0000.7728!3 len:33 { "At(" }
│                          ← StrChunk ..0000.7720!4 len:6 { ".ins" }
│                            ← StrChunk ..0000.7712!2 len:2 { "\n`" }
│                          → StrChunk ..0000.7733!24 len:24 { ")`, but instead of the i" }
│                        → StrChunk ..0000.7908!1 len:62 [1]
│                          ← StrChunk ..0000.10806!1 len:31 { "U" }
│                            ← StrChunk ..0000.7878!30 len:30 { "Consider we have three users: " }
│                          → StrChunk ..0000.7909!31 len:31 { "ser 1 will create a new string " }
│                  → StrChunk ..0000.8098!1 len:295 [1]
│                    ← StrChunk ..0000.8043!4 len:128 { "ser " }
│                      ← StrChunk ..0000.8005!32 len:80 { "hat string to two other users: (" }
│                        ← StrChunk ..0000.7944!29 len:44 { ", then they will\nfork it and " }
│                          ← StrChunk ..0000.8592!1 len:5 { "`" }
│                            ← StrChunk ..0000.7940!4 len:4 { "\"js\"" }
│                          → StrChunk ..0000.7990!1 len:10 { "t" }
│                            ← StrChunk ..0000.7979!9 len:9 { "send the " }
│                        → StrChunk ..0000.10808!1 len:4 { "U" }
│                          ← StrChunk ..0000.8040!2 len:3 { ") " }
│                            ← StrChunk ..0000.8038!1 len:1 { "1" }
│                          → StrChunk ..0000.8042!1 len:0 [1]
│                      → StrChunk ..0000.8067!3 len:44 { " at" }
│                        ← StrChunk ..0000.8063!4 len:20 { "\"on\"" }
│                          ← StrChunk ..0000.8593!1 len:15 { "`" }
│                            ← StrChunk ..0000.8049!14 len:14 { "2 will insert " }
│                          → StrChunk ..0000.8594!1 len:1 { "`" }
│                        → StrChunk ..0000.8096!2 len:21 { ") " }
│                          ← StrChunk ..0000.8094!1 len:18 { "2" }
│                            ← StrChunk ..0000.8076!17 len:17 { "\nthe end of it; (" }
│                          → StrChunk ..0000.10810!1 len:1 { "U" }
│                    → StrChunk ..0000.8178!36 len:167 { "position. Regardless in which or" … }
│                      ← StrChunk ..0000.8595!1 len:71 { "`" }
│                        ← StrChunk ..0000.8137!6 len:50 { "e time" }
│                          ← StrChunk ..0000.8125!10 len:35 { "at the sam" }
│                            ← StrChunk ..0000.8099!25 len:25 { "ser 3 will concurrently (" }
│                          → StrChunk ..0000.8144!9 len:9 { ") insert " }
│                        → StrChunk ..0000.8159!7 len:20 { " at the" }
│                          ← StrChunk ..0000.8596!1 len:7 { "`" }
│                            ← StrChunk ..0000.8153!6 len:6 { "\" joy\"" }
│                          → StrChunk ..0000.8168!6 len:6 { "\nsame " }
│                      → StrChunk ..0000.8283!6 len:60 { "2 and " }
│                        ← StrChunk ..0000.8268!1 len:43 [1]
│                          ← StrChunk ..0000.10812!1 len:39 { "U" }
│                            ← StrChunk ..0000.8230!38 len:38 { "we apply the two remote operatio" … }
│                          → StrChunk ..0000.8269!4 len:4 { "ser " }
│                        → StrChunk ..0000.8290!5 len:11 { "ser 3" }
│                          ← StrChunk ..0000.8289!1 len:1 [1]
│                            ← StrChunk ..0000.10814!1 len:1 { "U" }
│                          → StrChunk ..0000.8297!5 len:5 { ", we " }
│                → StrChunk ..0000.8135!1 len:476 [1]
│                  ← StrChunk ..0000.8347!1 len:476 [1]
│                    ← StrChunk ..0000.8634!6 len:313 { "method" }
│                      ← StrChunk ..0000.8536!54 len:122 { "\n\nLets create a new string `str1" … }
│                        ← StrChunk ..0000.8302!7 len:33 [7]
│                          ← StrChunk ..0000.10818!2 len:3 [2]
│                            ← StrChunk ..0000.10822!3 len:3 { "ll " }
│                          → StrChunk ..0000.8313!28 len:30 { "ceive the same final result." }
│                            ← StrChunk ..0000.8309!2 len:2 { "re" }
│                        → StrChunk ..0000.8641!1 len:35 { "\n" }
│                          ← StrChunk ..0000.8631!2 len:34 { ")`" }
│                            ← StrChunk ..0000.8597!32 len:32 { ", we will use the local `.insAt(" }
│                          → StrChunk ..0000.8633!1 len:0 [1]
│                      → StrChunk ..0000.10007!2 len:185 { "ts" }
│                        ← StrChunk ..0000.8590!1 len:17 { ":" }
│                          ← StrChunk ..0000.8629!1 len:11 [1]
│                            ← StrChunk ..0000.8642!11 len:11 { " to do that" }
│                          → StrChunk ..0000.8341!5 len:5 { "\n\n```" }
│                        → StrChunk ..0000.8409!16 len:166 [16]
│                          ← StrChunk ..0000.8353!56 len:57 { "const user1 = 123;\nconst user2 =" … }
│                            ← StrChunk ..0000.8346!1 len:1 { "\n" }
│                          → StrChunk ..0000.8425!109 len:109 { "\n\n// User 1 creates a new string" … }
│                    → StrChunk ..0000.10913!1 len:163 [1]
│                      ← StrChunk ..0000.10915!39 len:163 { "`s` will\nbe `123.1` and `123.2`," … }
│                        ← StrChunk ..0000.10865!32 len:82 { "note that the IDs of characters " }
│                          ← StrChunk ..0000.10825!38 len:42 { "\n\nNothing new here, just one thi" … }
│                            ← StrChunk ..0000.8348!4 len:4 { "\n```" }
│                          → StrChunk ..0000.10906!7 len:8 { "j` and " }
│                            ← StrChunk ..0000.10899!1 len:1 { "`" }
│                        → StrChunk ..0000.10967!1 len:42 { ")" }
│                          ← StrChunk ..0000.10968!32 len:41 { "And ID of the string is `123.0`." }
│                            ← StrChunk ..0000.10958!9 len:9 { "tively. (" }
│                          → StrChunk ..0000.10954!2 len:0 [2]
│                      → StrChunk ..0000.8295!1 len:0 [1]
│                        ← StrChunk ..0000.10863!1 len:0 [1]
│                          ← StrChunk ..0000.10897!1 len:0 [1]
│                            ← StrChunk ..0000.10900!3 len:0 [3]
│                          → StrChunk ..0000.8311!1 len:0 [1]
│                        → StrChunk ..0000.8174!2 len:0 [2]
│                          ← StrChunk ..0000.8214!13 len:0 [13]
│                            ← StrChunk ..0000.8273!7 len:0 [7]
│                          → StrChunk ..0000.8166!1 len:0 [1]
│                  → StrChunk ..0000.7552!1 len:0 [1]
│                    ← StrChunk ..0000.7757!2 len:0 [2]
│                      ← StrChunk ..0000.7995!5 len:0 [5]
│                        ← StrChunk ..0000.8070!4 len:0 [4]
│                          ← StrChunk ..0000.8093!1 len:0 [1]
│                            ← StrChunk ..0000.8124!1 len:0 [1]
│                          → StrChunk ..0000.8037!1 len:0 [1]
│                            ← StrChunk ..0000.8047!1 len:0 [1]
│                        → StrChunk ..0000.7973!3 len:0 [3]
│                          ← StrChunk ..0000.7988!1 len:0 [1]
│                            ← StrChunk ..0000.7991!2 len:0 [2]
│                          → StrChunk ..0000.7870!6 len:0 [6]
│                      → StrChunk ..0000.7685!1 len:0 [1]
│                        ← StrChunk ..0000.7714!3 len:0 [3]
│                          ← StrChunk ..0000.7724!2 len:0 [2]
│                            ← StrChunk ..0000.7731!1 len:0 [1]
│                          → StrChunk ..0000.7710!1 len:0 [1]
│                        → StrChunk ..0000.7679!1 len:0 [1]
│                          ← StrChunk ..0000.7680!1 len:0 [1]
│                            ← StrChunk ..0000.7677!2 len:0 [2]
│                          → StrChunk ..0000.7629!4 len:0 [4]
│                    → StrChunk ..0000.6953!3 len:0 [3]
│                      ← StrChunk ..0000.7102!5 len:0 [5]
│                        ← StrChunk ..0000.7266!1 len:0 [1]
│                          ← StrChunk ..0000.7403!3 len:0 [3]
│                            ← StrChunk ..0000.7443!6 len:0 [6]
│                          → StrChunk ..0000.7235!1 len:0 [1]
│                        → StrChunk ..0000.7015!4 len:0 [4]
│                          ← StrChunk ..0000.7020!18 len:0 [18]
│                            ← StrChunk ..0000.7066!2 len:0 [2]
│                          → StrChunk ..0000.6969!2 len:0 [2]
│                      → StrChunk ..0000.6784!2 len:0 [2]
│                        ← StrChunk ..0000.6830!1 len:0 [1]
│                          ← StrChunk ..0000.6873!2 len:0 [2]
│                            ← StrChunk ..0000.6883!1 len:0 [1]
│                          → StrChunk ..0000.6788!1 len:0 [1]
│                        → StrChunk ..0000.6607!3 len:0 [3]
│                          ← StrChunk ..0000.6641!2 len:0 [2]
│                            ← StrChunk ..0000.6674!1 len:0 [1]
│                          → StrChunk ..0000.6551!2 len:0 [2]
│          → StrChunk ..0000.14902!3 len:7097 { "the" }
│            ← StrChunk ..0000.12746!18 len:4126 { "- **CT/RGA** simpl" }
│              ← StrChunk ..0000.10463!1 len:2965 { "\n" }
│                ← StrChunk ..0000.9418!3 len:1640 { "and" }
│                  ← StrChunk ..0000.8839!2 len:700 { " b" }
│                    ← StrChunk ..0000.8742!24 len:157 { "concurrently appended\n`\"" }
│                      ← StrChunk ..0000.6214!1 len:64 [1]
│                        ← StrChunk ..0000.6344!3 len:1 [3]
│                          ← StrChunk ..0000.6366!1 len:1 { "\n" }
│                            ← StrChunk ..0000.6485!3 len:0 [3]
│                          → StrChunk ..0000.6241!2 len:0 [2]
│                            ← StrChunk ..0000.6262!1 len:0 [1]
│                        → StrChunk ..0000.8665!51 len:63 { "e that this string was sent to t" … }
│                          ← StrChunk ..0000.8653!10 len:11 { "Now imagin" }
│                            ← StrChunk ..0000.6192!1 len:1 { "\n" }
│                          → StrChunk ..0000.8718!1 len:1 { " " }
│                      → StrChunk ..0000.8777!4 len:69 [4]
│                        ← StrChunk ..0000.8768!9 len:15 { "\"` and `\"" }
│                          ← StrChunk ..0000.8766!2 len:4 [2]
│                            ← StrChunk ..0000.9517!4 len:4 { " joy" }
│                          → StrChunk ..0000.9523!2 len:2 { "on" }
│                        → StrChunk ..0000.11001!10 len:54 { "operations" }
│                          ← StrChunk ..0000.8795!34 len:44 { "Then those users would send thei" … }
│                            ← StrChunk ..0000.8781!10 len:10 { "\"` to it. " }
│                          → StrChunk ..0000.8829!10 len:0 [10]
│                    → StrChunk ..0000.8972!5 len:541 { "\n\n```" }
│                      ← StrChunk ..0000.8918!10 len:97 { ")` method " }
│                        ← StrChunk ..0000.8851!1 len:47 [1]
│                          ← StrChunk ..0000.8859!1 len:7 { "\n" }
│                            ← StrChunk ..0000.8845!6 len:6 { "ack to" }
│                          → StrChunk ..0000.8882!34 len:40 { ", which will use the remote `.in" … }
│                            ← StrChunk ..0000.8852!6 len:6 { "user 1" }
│                        → StrChunk ..0000.8961!1 len:40 [1]
│                          ← StrChunk ..0000.8971!1 len:32 { "\n" }
│                            ← StrChunk ..0000.8930!31 len:31 { "to apply those operations, lets" }
│                          → StrChunk ..0000.8962!8 len:8 { "do that:" }
│                      → StrChunk ..0000.9328!59 len:439 { "\n\nThe final string is `\"json joy" … }
│                        ← StrChunk ..0000.8982!346 len:353 { "// User 2 and 3 insert their cha" … }
│                          ← StrChunk ..0000.8977!1 len:3 { "\n" }
│                            ← StrChunk ..0000.10005!2 len:2 { "ts" }
│                          → StrChunk ..0000.8978!4 len:4 { "\n```" }
│                        → StrChunk ..0000.9422!1 len:27 { "\n" }
│                          ← StrChunk ..0000.9411!6 len:26 { " joy\"`" }
│                            ← StrChunk ..0000.9389!20 len:20 { ")` first inserted `\"" }
│                          → StrChunk ..0000.9417!1 len:0 [1]
│                  → StrChunk ..0000.10258!4 len:937 { "has " }
│                    ← StrChunk ..0000.9535!2 len:728 { "\n`" }
│                      ← StrChunk ..0000.9531!2 len:554 { "ts" }
│                        ← StrChunk ..0000.9503!7 len:89 { "\nresult" }
│                          ← StrChunk ..0000.9487!14 len:76 { "l get the same" }
│                            ← StrChunk ..0000.9423!62 len:62 { " then `\"on\"`, lets try to revers" … }
│                          → StrChunk ..0000.9526!3 len:6 { "```" }
│                            ← StrChunk ..0000.9512!3 len:3 { ":\n\n" }
│                        → StrChunk ..0000.9537!462 len:463 { "// User 1 creates a new string \"" … }
│                          ← StrChunk ..0000.9534!1 len:1 { "\n" }
│                            ← StrChunk ..0000.9533!1 len:0 [1]
│                          → StrChunk ..0000.9999!1 len:0 [1]
│                      → StrChunk ..0000.10091!1 len:172 [1]
│                        ← StrChunk ..0000.10009!82 len:86 { "\nAgain, we get the `\"json joy\"` " … }
│                          ← StrChunk ..0000.10003!1 len:3 { "\n" }
│                            ← StrChunk ..0000.10000!2 len:2 { "``" }
│                          → StrChunk ..0000.10100!1 len:1 { "\n" }
│                        → StrChunk ..0000.10153!50 len:86 { "use the unique character IDs to " … }
│                          ← StrChunk ..0000.10101!21 len:28 { " cases is because we " }
│                            ← StrChunk ..0000.10092!7 len:7 { "in both" }
│                          → StrChunk ..0000.10205!8 len:8 { "\nUser 3 " }
│                    → StrChunk ..0000.10313!8 len:205 { " inserts" }
│                      ← StrChunk ..0000.10272!16 len:71 { "345`, hence for " }
│                        ← StrChunk ..0000.10243!5 len:36 { "User " }
│                          ← StrChunk ..0000.10217!24 len:24 { "site ID `789`, but user " }
│                            ← StrChunk ..0000.10213!4 len:0 [4]
│                          → StrChunk ..0000.10265!3 len:7 { "s `" }
│                            ← StrChunk ..0000.10250!4 len:4 { "2 ha" }
│                        → StrChunk ..0000.10300!1 len:19 [1]
│                          ← StrChunk ..0000.10312!1 len:9 { "\n" }
│                            ← StrChunk ..0000.10292!8 len:8 { "conflict" }
│                          → StrChunk ..0000.10301!10 len:10 { "concurrent" }
│                      → StrChunk ..0000.10454!4 len:126 { "here" }
│                        ← StrChunk ..0000.10332!2 len:72 { "s " }
│                          ← StrChunk ..0000.10322!8 len:8 { " User 3'" }
│                            ← StrChunk ..0000.10321!1 len:0 [1]
│                          → StrChunk ..0000.10335!62 len:62 { "inserts will appear to the left " … }
│                        → StrChunk ..0000.10450!3 len:50 { "CT/" }
│                          ← StrChunk ..0000.10402!19 len:19 { ", that is just how " }
│                            ← StrChunk ..0000.10397!5 len:0 [5]
│                          → StrChunk ..0000.10421!28 len:28 { "RGA algorithm is specified.\n" }
│                → StrChunk ..0000.11457!56 len:1324 { "- **Block-wise** means that the " … }
│                  ← StrChunk ..0000.11259!1 len:576 [1]
│                    ← StrChunk ..0000.10567!1 len:304 { "\n" }
│                      ← StrChunk ..0000.10483!1 len:64 [1]
│                        ← StrChunk ..0000.10537!4 len:26 { "The " }
│                          ← StrChunk ..0000.10458!3 len:4 { "## " }
│                            ← StrChunk ..0000.10449!1 len:1 { "\n" }
│                          → StrChunk ..0000.10561!1 len:18 { "-" }
│                            ← StrChunk ..0000.10466!17 len:17 { "Block-wise CT/RGA" }
│                        → StrChunk ..0000.10489!12 len:38 [12]
│                          ← StrChunk ..0000.14438!7 len:12 { " Splay " }
│                            ← StrChunk ..0000.10484!5 len:5 { "Split" }
│                          → StrChunk ..0000.10501!26 len:26 { "Rope with Identifier Table" }
│                      → StrChunk ..0000.11260!13 len:239 { " that in the " }
│                        ← StrChunk ..0000.11103!10 len:60 { "very fast," }
│                          ← StrChunk ..0000.11078!23 len:38 { " RGA implementation is " }
│                            ← StrChunk ..0000.11062!15 len:15 { "\nThe `json-joy`" }
│                          → StrChunk ..0000.11247!12 len:12 { " we will see" }
│                        → StrChunk ..0000.11299!3 len:166 [3]
│                          ← StrChunk ..0000.11303!145 len:166 { "this section we will take a look" … }
│                            ← StrChunk ..0000.11278!21 len:21 { "next section.\nBut in " }
│                          → StrChunk ..0000.11273!4 len:0 [4]
│                    → StrChunk ..0000.11101!1 len:272 [1]
│                      ← StrChunk ..0000.11242!1 len:87 { "\n" }
│                        ← StrChunk ..0000.11232!9 len:69 { "-the-art " }
│                          ← StrChunk ..0000.11222!8 len:8 { "state-of" }
│                            ← StrChunk ..0000.11113!41 len:0 [41]
│                          → StrChunk ..0000.11154!52 len:52 { "data structure that is specifica" … }
│                            ← StrChunk ..0000.11230!1 len:0 [1]
│                        → StrChunk ..0000.11244!1 len:17 { " " }
│                          ← StrChunk ..0000.11207!14 len:14 { "RGA algorithm." }
│                            ← StrChunk ..0000.11206!1 len:0 [1]
│                          → StrChunk ..0000.11452!2 len:2 { "It" }
│                      → StrChunk ..0000.10617!25 len:185 { "what can be describe as\n*" }
│                        ← StrChunk ..0000.10579!12 len:12 { " implements " }
│                          ← StrChunk ..0000.10568!11 len:0 [11]
│                            ← StrChunk ..0000.11077!1 len:0 [1]
│                          → StrChunk ..0000.10591!26 len:0 [26]
│                        → StrChunk ..0000.10771!18 len:148 { "decipher it for th" }
│                          ← StrChunk ..0000.10698!69 len:119 { "* algorithm. It is\na mouthful, b" … }
│                            ← StrChunk ..0000.10646!50 len:50 { "Block-wise CT/RGA-Split Rope wit" … }
│                          → StrChunk ..0000.10793!11 len:11 { "e reader.\n\n" }
│                  → StrChunk ..0000.12036!1 len:692 { "\n" }
│                    ← StrChunk ..0000.11951!3 len:281 { "\n  " }
│                      ← StrChunk ..0000.11514!1 len:117 [1]
│                        ← StrChunk ..0000.11916!1 len:34 { ")" }
│                          ← StrChunk ..0000.11917!27 len:29 { "`StringChunk` in `json-joy`" }
│                            ← StrChunk ..0000.11914!2 len:2 { " (" }
│                          → StrChunk ..0000.11945!3 len:4 { "\n  " }
│                            ← StrChunk ..0000.11513!1 len:1 { "," }
│                        → StrChunk ..0000.11531!3 len:83 [3]
│                          ← StrChunk ..0000.11949!1 len:17 { " " }
│                            ← StrChunk ..0000.11515!16 len:16 { "where each block" }
│                          → StrChunk ..0000.11534!66 len:66 { "contains a small metadata piece," … }
│                      → StrChunk ..0000.11615!75 len:161 { "with metadata allocated for each" … }
│                        ← StrChunk ..0000.11955!1 len:12 { " " }
│                          ← StrChunk ..0000.11601!11 len:11 { "separately," }
│                            ← StrChunk ..0000.11600!1 len:0 [1]
│                          → StrChunk ..0000.11612!3 len:0 [3]
│                        → StrChunk ..0000.11761!21 len:74 { ", however, it is not " }
│                          ← StrChunk ..0000.11690!13 len:13 { "  in academia" }
│                            ← StrChunk ..0000.11957!79 len:0 [79]
│                          → StrChunk ..0000.11787!40 len:40 { "commonly used in practice, becau" … }
│                    → StrChunk ..0000.12595!12 len:410 { " and can be " }
│                      ← StrChunk ..0000.12448!84 len:296 { "  Block-wise representation is m" … }
│                        ← StrChunk ..0000.12395!5 len:158 [5]
│                          ← StrChunk ..0000.12327!68 len:147 { "  single characters, which is ve" … }
│                            ← StrChunk ..0000.12238!79 len:79 { "  difficult to implement. The ca" … }
│                          → StrChunk ..0000.12400!11 len:11 { "efficient.\n" }
│                        → StrChunk ..0000.12587!1 len:54 [1]
│                          ← StrChunk ..0000.12729!7 len:51 { " unique" }
│                            ← StrChunk ..0000.12543!44 len:44 { ",\n  as implicitly each character" … }
│                          → StrChunk ..0000.12588!3 len:3 { " ID" }
│                      → StrChunk ..0000.12741!1 len:102 { " " }
│                        ← StrChunk ..0000.12634!1 len:28 [1]
│                          ← StrChunk ..0000.12737!3 len:25 { "\n  " }
│                            ← StrChunk ..0000.12612!22 len:22 { "referenced by that ID." }
│                          → StrChunk ..0000.12635!3 len:3 { "So," }
│                        → StrChunk ..0000.12689!30 len:73 { "requires a lot of bookkeeping." }
│                          ← StrChunk ..0000.12641!42 len:42 { "the blocks can be split and merg" … }
│                            ← StrChunk ..0000.12638!3 len:0 [3]
│                          → StrChunk ..0000.12742!1 len:1 { "\n" }
│              → StrChunk ..0000.16096!6 len:1143 { "s than" }
│                ← StrChunk ..0000.13636!1 len:1036 [1]
│                  ← StrChunk ..0000.13356!1 len:547 [1]
│                    ← StrChunk ..0000.12983!16 len:340 { "it\n  has formal " }
│                      ← StrChunk ..0000.12903!24 len:156 { "best known algorithm for" }
│                        ← StrChunk ..0000.12847!6 len:101 { "wable " }
│                          ← StrChunk ..0000.12829!2 len:63 { "ro" }
│                            ← StrChunk ..0000.12766!61 len:61 { "y means that the base algorithm " … }
│                          → StrChunk ..0000.12884!14 len:32 { "currently the " }
│                            ← StrChunk ..0000.12855!18 len:18 { "Array*.\n  This is " }
│                        → StrChunk ..0000.12966!1 len:31 { ")" }
│                          ← StrChunk ..0000.12967!15 len:22 { "strings, arrays" }
│                            ← StrChunk ..0000.12959!7 len:7 { " list (" }
│                          → StrChunk ..0000.12927!8 len:8 { " CRDTs, " }
│                      → StrChunk ..0000.13174!4 len:168 { "- **" }
│                        ← StrChunk ..0000.13096!20 len:109 { "probably most cited\n" }
│                          ← StrChunk ..0000.13068!26 len:47 { ", it is efficient, and is " }
│                            ← StrChunk ..0000.13001!21 len:21 { "proofs of correctness" }
│                          → StrChunk ..0000.13129!42 len:42 { "  list CRDT algorithm in academi" … }
│                        → StrChunk ..0000.13457!3 len:55 { "\n  " }
│                          ← StrChunk ..0000.13209!38 len:51 { "s to the optimization described " … }
│                            ← StrChunk ..0000.13182!13 len:13 { "Split** refer" }
│                          → StrChunk ..0000.13782!1 len:1 { "[" }
│                    → StrChunk ..0000.13461!1 len:207 [1]
│                      ← StrChunk ..0000.13783!1 len:106 { "]" }
│                        ← StrChunk ..0000.15698!18 len:74 { "Briot et al., 2006" }
│                          ← StrChunk ..0000.15695!2 len:49 { " (" }
│                            ← StrChunk ..0000.13403!47 len:47 { "*\"High Responsiveness for Group " … }
│                          → StrChunk ..0000.13450!6 len:7 { " paper" }
│                            ← StrChunk ..0000.15697!1 len:1 { ")" }
│                        → StrChunk ..0000.13460!1 len:31 { "," }
│                          ← StrChunk ..0000.13784!2 len:27 [2]
│                            ← StrChunk ..0000.13787!27 len:27 { "[high-responsiveness-crdts]" }
│                          → StrChunk ..0000.13815!3 len:3 { "\n  " }
│                      → StrChunk ..0000.13563!62 len:101 { "to the the other part of the blo" … }
│                        ← StrChunk ..0000.13522!1 len:25 [1]
│                          ← StrChunk ..0000.13819!1 len:25 { " " }
│                            ← StrChunk ..0000.13498!24 len:24 { "a \"split link\" is stored" }
│                          → StrChunk ..0000.13561!2 len:0 [2]
│                        → StrChunk ..0000.13626!10 len:14 { "to perform" }
│                          ← StrChunk ..0000.13625!1 len:3 [1]
│                            ← StrChunk ..0000.13821!3 len:3 { "\n  " }
│                          → StrChunk ..0000.13825!1 len:1 { " " }
│                  → StrChunk ..0000.14016!19 len:489 { ".\n  This allows for" }
│                    ← StrChunk ..0000.14449!4 len:255 [4]
│                      ← StrChunk ..0000.13827!3 len:84 { "\n  " }
│                        ← StrChunk ..0000.13751!2 len:75 { ", " }
│                          ← StrChunk ..0000.13694!55 len:55 { "search and delete operations on " … }
│                            ← StrChunk ..0000.13692!2 len:0 [2]
│                          → StrChunk ..0000.13758!17 len:18 { "hen the block was" }
│                            ← StrChunk ..0000.13755!1 len:1 { "w" }
│                        → StrChunk ..0000.14445!1 len:6 [1]
│                          ← StrChunk ..0000.13776!6 len:6 { "split." }
│                            ← StrChunk ..0000.13775!1 len:0 [1]
│                          → StrChunk ..0000.14463!227 len:0 [227]
│                      → StrChunk ..0000.13834!4 len:171 { "- **" }
│                        ← StrChunk ..0000.14446!2 len:1 [2]
│                          ← StrChunk ..0000.14453!1 len:0 [1]
│                            ← StrChunk ..0000.14455!7 len:0 [7]
│                          → StrChunk ..0000.13830!1 len:1 { "\n" }
│                        → StrChunk ..0000.13865!58 len:166 { "RGA blocks are stored in a rope-" … }
│                          ← StrChunk ..0000.13838!22 len:28 { "Rope** means that the " }
│                            ← StrChunk ..0000.14691!6 len:6 { "Splay " }
│                          → StrChunk ..0000.13930!80 len:80 { "Unlike the canonical RGA algorit" … }
│                    → StrChunk ..0000.14405!1 len:215 [1]
│                      ← StrChunk ..0000.14413!3 len:23 { "g n" }
│                        ← StrChunk ..0000.14407!1 len:18 { "(" }
│                          ← StrChunk ..0000.14402!3 len:15 { " `O" }
│                            ← StrChunk ..0000.16069!12 len:12 { " faster than" }
│                          → StrChunk ..0000.14409!2 len:2 { "lo" }
│                        → StrChunk ..0000.14411!1 len:2 [1]
│                          ← StrChunk ..0000.14419!1 len:2 [1]
│                            ← StrChunk ..0000.14417!2 len:2 { ")`" }
│                          → StrChunk ..0000.14408!1 len:0 [1]
│                      → StrChunk ..0000.14165!6 len:192 { "nother" }
│                        ← StrChunk ..0000.14055!30 len:57 { " lookups of text by position.\n" }
│                          ← StrChunk ..0000.14049!6 len:0 [6]
│                            ← StrChunk ..0000.14035!6 len:0 [6]
│                          → StrChunk ..0000.14088!27 len:27 { "- **Identifier Table** is a" }
│                        → StrChunk ..0000.14195!106 len:129 { "stores the mapping of character " … }
│                          ← StrChunk ..0000.14171!13 len:19 { " tree, which " }
│                            ← StrChunk ..0000.16081!6 len:6 { " splay" }
│                          → StrChunk ..0000.16088!4 len:4 { " les" }
│                → StrChunk ..0000.12935!24 len:101 [24]
│                  ← StrChunk ..0000.13860!4 len:19 [4]
│                    ← StrChunk ..0000.14339!1 len:19 { "." }
│                      ← StrChunk ..0000.16108!1 len:18 { " " }
│                        ← StrChunk ..0000.16092!2 len:13 [2]
│                          ← StrChunk ..0000.16102!1 len:3 [1]
│                            ← StrChunk ..0000.16104!3 len:3 { "\n  " }
│                          → StrChunk ..0000.14302!10 len:10 { "`O(log n)`" }
│                            ← StrChunk ..0000.14301!1 len:0 [1]
│                        → StrChunk ..0000.14400!1 len:4 [1]
│                          ← StrChunk ..0000.14315!4 len:4 { "time" }
│                            ← StrChunk ..0000.14312!3 len:0 [3]
│                          → StrChunk ..0000.14319!20 len:0 [20]
│                      → StrChunk ..0000.14115!49 len:0 [49]
│                        ← StrChunk ..0000.14193!1 len:0 [1]
│                          ← StrChunk ..0000.14184!5 len:0 [5]
│                            ← StrChunk ..0000.14340!55 len:0 [55]
│                          → StrChunk ..0000.14189!2 len:0 [2]
│                        → StrChunk ..0000.14010!4 len:0 [4]
│                          ← StrChunk ..0000.14041!6 len:0 [6]
│                            ← StrChunk ..0000.14085!2 len:0 [2]
│                          → StrChunk ..0000.13923!6 len:0 [6]
│                    → StrChunk ..0000.13357!44 len:0 [44]
│                      ← StrChunk ..0000.13679!12 len:0 [12]
│                        ← StrChunk ..0000.13753!1 len:0 [1]
│                          ← StrChunk ..0000.13756!1 len:0 [1]
│                            ← StrChunk ..0000.13831!2 len:0 [2]
│                          → StrChunk ..0000.13637!34 len:0 [34]
│                            ← StrChunk ..0000.13749!1 len:0 [1]
│                        → StrChunk ..0000.13468!29 len:0 [29]
│                          ← StrChunk ..0000.13523!37 len:0 [37]
│                            ← StrChunk ..0000.13671!7 len:0 [7]
│                          → StrChunk ..0000.13462!5 len:0 [5]
│                      → StrChunk ..0000.13171!2 len:0 [2]
│                        ← StrChunk ..0000.13196!4 len:0 [4]
│                          ← StrChunk ..0000.13204!2 len:0 [2]
│                            ← StrChunk ..0000.13195!1 len:0 [1]
│                          → StrChunk ..0000.13178!2 len:0 [2]
│                        → StrChunk ..0000.13022!45 len:0 [45]
│                          ← StrChunk ..0000.13094!1 len:0 [1]
│                            ← StrChunk ..0000.13116!12 len:0 [12]
│                          → StrChunk ..0000.12999!1 len:0 [1]
│                  → StrChunk ..0000.12037!24 len:82 [24]
│                    ← StrChunk ..0000.12607!4 len:0 [4]
│                      ← StrChunk ..0000.12827!1 len:0 [1]
│                        ← StrChunk ..0000.12853!1 len:0 [1]
│                          ← StrChunk ..0000.12873!9 len:0 [9]
│                            ← StrChunk ..0000.12898!4 len:0 [4]
│                          → StrChunk ..0000.12831!2 len:0 [2]
│                            ← StrChunk ..0000.12835!6 len:0 [6]
│                        → StrChunk ..0000.12719!4 len:0 [4]
│                          ← StrChunk ..0000.12743!2 len:0 [2]
│                            ← StrChunk ..0000.12764!1 len:0 [1]
│                          → StrChunk ..0000.12683!5 len:0 [5]
│                      → StrChunk ..0000.12411!36 len:0 [36]
│                        ← StrChunk ..0000.12534!4 len:0 [4]
│                          ← StrChunk ..0000.12541!1 len:0 [1]
│                            ← StrChunk ..0000.12591!2 len:0 [2]
│                          → StrChunk ..0000.12532!1 len:0 [1]
│                        → StrChunk ..0000.12200!37 len:0 [37]
│                          ← StrChunk ..0000.12119!25 len:0 [25]
│                            ← StrChunk ..0000.12317!9 len:0 [9]
│                          → StrChunk ..0000.12144!54 len:0 [54]
│                    → StrChunk ..0000.10789!2 len:82 [2]
│                      ← StrChunk ..0000.11831!80 len:0 [80]
│                        ← StrChunk ..0000.11827!1 len:0 [1]
│                          ← StrChunk ..0000.12061!54 len:0 [54]
│                            ← StrChunk ..0000.12117!1 len:0 [1]
│                          → StrChunk ..0000.11912!2 len:0 [2]
│                        → StrChunk ..0000.11703!57 len:0 [57]
│                          ← StrChunk ..0000.11782!4 len:0 [4]
│                            ← StrChunk ..0000.11828!2 len:0 [2]
│                          → StrChunk ..0000.11454!2 len:0 [2]
│                      → StrChunk ..0000.10541!1 len:82 { "\n" }
│                        ← StrChunk ..0000.10642!2 len:0 [2]
│                          ← StrChunk ..0000.10696!1 len:0 [1]
│                            ← StrChunk ..0000.10767!3 len:0 [3]
│                          → StrChunk ..0000.10527!10 len:0 [10]
│                        → StrChunk ..0000.14720!12 len:81 { "son-joy` imp" }
│                          ← StrChunk ..0000.14699!19 len:20 { "A novelty of the `j" }
│                            ← StrChunk ..0000.14422!1 len:1 { "\n" }
│                          → StrChunk ..0000.14736!49 len:49 { "lementation is that it uses Spla" … }
│            → StrChunk ..0000.16038!27 len:2968 [27]
│              ← StrChunk ..0000.16253!4 len:1594 { "exac" }
│                ← StrChunk ..0000.16425!6 len:472 { "); and" }
│                  ← StrChunk ..0000.15086!8 len:314 [8]
│                    ← StrChunk ..0000.16385!2 len:171 { "re" }
│                      ← StrChunk ..0000.16374!1 len:116 { "s" }
│                        ← StrChunk ..0000.16364!4 len:94 [4]
│                          ← StrChunk ..0000.16369!5 len:6 { "Chunk" }
│                            ← StrChunk ..0000.16363!1 len:1 { " " }
│                          → StrChunk ..0000.14988!9 len:88 { "traversal" }
│                            ← StrChunk ..0000.14905!79 len:79 { " Rope and the Identifier Table. " … }
│                        → StrChunk ..0000.15015!1 len:21 { " " }
│                          ← StrChunk ..0000.16375!1 len:19 { "s" }
│                            ← StrChunk ..0000.14997!18 len:18 { ", because the tree" }
│                          → StrChunk ..0000.16378!1 len:1 { "a" }
│                      → StrChunk ..0000.15030!12 len:53 [12]
│                        ← StrChunk ..0000.15018!12 len:24 { " splayed on " }
│                          ← StrChunk ..0000.15016!2 len:0 [2]
│                            ← StrChunk ..0000.16379!3 len:0 [3]
│                          → StrChunk ..0000.15161!12 len:12 { "every insert" }
│                        → StrChunk ..0000.15174!6 len:29 { "likely" }
│                          ← StrChunk ..0000.16109!1 len:22 { "*" }
│                            ← StrChunk ..0000.15042!21 len:21 { ", which results into\n" }
│                          → StrChunk ..0000.16110!1 len:1 { "*" }
│                    → StrChunk ..0000.16129!1 len:143 { " " }
│                      ← StrChunk ..0000.16388!1 len:78 [1]
│                        ← StrChunk ..0000.16111!18 len:75 { ", as users usually" }
│                          ← StrChunk ..0000.15330!20 len:55 { ", for all operations" }
│                            ← StrChunk ..0000.15094!35 len:35 { " faster than `O(log n)` access t" … }
│                          → StrChunk ..0000.16395!1 len:2 { "\n" }
│                            ← StrChunk ..0000.16387!1 len:1 { ":" }
│                        → StrChunk ..0000.16393!1 len:3 { ")" }
│                          ← StrChunk ..0000.16391!1 len:2 { "1" }
│                            ← StrChunk ..0000.16389!1 len:1 { "(" }
│                          → StrChunk ..0000.16390!1 len:0 [1]
│                      → StrChunk ..0000.16174!8 len:64 { "characte" }
│                        ← StrChunk ..0000.16214!1 len:14 [1]
│                          ← StrChunk ..0000.16397!1 len:14 { " " }
│                            ← StrChunk ..0000.16160!13 len:13 { "type multiple" }
│                          → StrChunk ..0000.16173!1 len:0 [1]
│                        → StrChunk ..0000.16401!14 len:42 { "for the Text R" }
│                          ← StrChunk ..0000.16398!2 len:25 { " (" }
│                            ← StrChunk ..0000.16190!23 len:23 { "rs at the same position" }
│                          → StrChunk ..0000.16421!3 len:3 { "ope" }
│                  → StrChunk ..0000.16496!1 len:152 { "\n" }
│                    ← StrChunk ..0000.16471!24 len:81 { "for the Identifier Table" }
│                      ← StrChunk ..0000.16442!9 len:36 { "reference" }
│                        ← StrChunk ..0000.16432!1 len:5 { "(" }
│                          ← StrChunk ..0000.16431!1 len:1 [1]
│                            ← StrChunk ..0000.16452!1 len:1 { "\n" }
│                          → StrChunk ..0000.16436!2 len:3 { ") " }
│                            ← StrChunk ..0000.16434!1 len:1 { "2" }
│                        → StrChunk ..0000.16458!6 len:22 [6]
│                          ← StrChunk ..0000.16506!11 len:16 { "most recent" }
│                            ← StrChunk ..0000.16453!5 len:5 { " the " }
│                          → StrChunk ..0000.16464!6 len:6 { " IDs (" }
│                      → StrChunk ..0000.16400!1 len:21 [1]
│                        ← StrChunk ..0000.16433!1 len:1 [1]
│                          ← StrChunk ..0000.16438!3 len:1 [3]
│                            ← StrChunk ..0000.16470!1 len:1 { ")" }
│                          → StrChunk ..0000.16415!3 len:0 [3]
│                        → StrChunk ..0000.15129!1 len:20 { "." }
│                          ← StrChunk ..0000.16130!25 len:0 [25]
│                            ← StrChunk ..0000.16182!4 len:0 [4]
│                          → StrChunk ..0000.15180!19 len:19 { " When the trees are" }
│                    → StrChunk ..0000.15355!3 len:70 { "can" }
│                      ← StrChunk ..0000.15202!15 len:33 { "serialized from" }
│                        ← StrChunk ..0000.15199!1 len:3 [1]
│                          ← StrChunk ..0000.15351!1 len:0 [1]
│                            ← StrChunk ..0000.16216!1 len:0 [1]
│                          → StrChunk ..0000.15217!1 len:3 { "-" }
│                            ← StrChunk ..0000.15200!2 len:2 { "un" }
│                        → StrChunk ..0000.15219!7 len:15 { "storage" }
│                          ← StrChunk ..0000.15218!1 len:1 [1]
│                            ← StrChunk ..0000.15353!1 len:1 { " " }
│                          → StrChunk ..0000.15228!7 len:7 { ", they " }
│                      → StrChunk ..0000.15239!3 len:34 [3]
│                        ← StrChunk ..0000.15358!1 len:3 [1]
│                          ← StrChunk ..0000.16218!1 len:1 [1]
│                            ← StrChunk ..0000.16498!1 len:1 { " " }
│                          → StrChunk ..0000.15359!2 len:2 { "be" }
│                        → StrChunk ..0000.16252!1 len:31 { " " }
│                          ← StrChunk ..0000.15271!4 len:29 { "into" }
│                            ← StrChunk ..0000.15242!25 len:25 { " balanced, which results " }
│                          → StrChunk ..0000.16262!1 len:1 { "*" }
│                → StrChunk ..0000.15867!13 len:1118 { " described in" }
│                  ← StrChunk ..0000.16282!3 len:271 { "say" }
│                    ← StrChunk ..0000.15309!20 len:75 { ", for all operations" }
│                      ← StrChunk ..0000.15276!10 len:26 { "`O(log n)`" }
│                        ← StrChunk ..0000.16500!1 len:5 { "\n" }
│                          ← StrChunk ..0000.16263!1 len:4 { "*" }
│                            ← StrChunk ..0000.16259!3 len:3 { "tly" }
│                          → StrChunk ..0000.15275!1 len:0 [1]
│                            ← StrChunk ..0000.16257!1 len:0 [1]
│                        → StrChunk ..0000.15362!1 len:11 [1]
│                          ← StrChunk ..0000.16265!10 len:11 { "complexity" }
│                            ← StrChunk ..0000.16220!1 len:1 { " " }
│                          → StrChunk ..0000.15286!12 len:0 [12]
│                      → StrChunk ..0000.16278!1 len:29 { " " }
│                        ← StrChunk ..0000.16222!1 len:12 [1]
│                          ← StrChunk ..0000.16276!1 len:1 [1]
│                            ← StrChunk ..0000.16502!1 len:1 { " " }
│                          → StrChunk ..0000.16223!11 len:11 { "for freshly" }
│                        → StrChunk ..0000.16235!14 len:16 { "hydrated trees" }
│                          ← StrChunk ..0000.16234!1 len:0 [1]
│                            ← StrChunk ..0000.16251!1 len:0 [1]
│                          → StrChunk ..0000.16279!2 len:2 { " (" }
│                    → StrChunk ..0000.15363!2 len:193 { "\n\n" }
│                      ← StrChunk ..0000.16321!1 len:41 [1]
│                        ← StrChunk ..0000.16330!1 len:39 [1]
│                          ← StrChunk ..0000.16504!1 len:7 { "\n" }
│                            ← StrChunk ..0000.16324!6 len:6 { ", when" }
│                          → StrChunk ..0000.16285!1 len:32 [1]
│                            ← StrChunk ..0000.16331!32 len:32 { "opening the document from a file" }
│                        → StrChunk ..0000.16249!1 len:2 { "." }
│                          ← StrChunk ..0000.16281!1 len:1 { ")" }
│                            ← StrChunk ..0000.16286!30 len:0 [30]
│                          → StrChunk ..0000.15329!1 len:0 [1]
│                      → StrChunk ..0000.15413!39 len:150 { "optimizations that make `json-jo" … }
│                        ← StrChunk ..0000.15395!18 len:26 { "ere are many more " }
│                          ← StrChunk ..0000.15390!1 len:2 { "h" }
│                            ← StrChunk ..0000.15381!1 len:1 { "T" }
│                          → StrChunk ..0000.15500!6 len:6 { "minor " }
│                        → StrChunk ..0000.15550!57 len:85 { "worth mentioning is the insert i" … }
│                          ← StrChunk ..0000.15507!1 len:18 { "\n" }
│                            ← StrChunk ..0000.15462!17 len:17 { ", but another one" }
│                          → StrChunk ..0000.15631!10 len:10 { " situation" }
│                  → StrChunk ..0000.15956!2 len:834 { "\n\n" }
│                    ← StrChunk ..0000.15930!5 len:213 [5]
│                      ← StrChunk ..0000.16066!1 len:50 { "]" }
│                        ← StrChunk ..0000.15880!1 len:22 [1]
│                          ← StrChunk ..0000.16068!1 len:2 { "[" }
│                            ← StrChunk ..0000.15955!1 len:1 { "\n" }
│                          → StrChunk ..0000.15881!20 len:20 { "(Briot et al., 2006)" }
│                            ← StrChunk ..0000.15953!1 len:0 [1]
│                        → StrChunk ..0000.15908!22 len:27 { "[high-responsiveness-c" }
│                          ← StrChunk ..0000.15901!7 len:0 [7]
│                            ← StrChunk ..0000.15952!1 len:0 [1]
│                          → StrChunk ..0000.15940!5 len:5 { "rdts]" }
│                      → StrChunk ..0000.15733!1 len:163 { "f" }
│                        ← StrChunk ..0000.15690!5 len:56 { " The " }
│                          ← StrChunk ..0000.15668!13 len:38 { "block splits." }
│                            ← StrChunk ..0000.15641!25 len:25 { ", which results\ninto two " }
│                          → StrChunk ..0000.15716!13 len:13 { "insert is per" }
│                        → StrChunk ..0000.15817!32 len:106 { "blocks are rotated to the bottom" }
│                          ← StrChunk ..0000.15780!33 len:73 { "\nto the top, while the other two" … }
│                            ← StrChunk ..0000.15736!40 len:40 { "ormed such that the new block is" … }
│                          → StrChunk ..0000.15866!1 len:1 { "." }
│                    → StrChunk ..0000.17597!18 len:619 { "be `\"GOOD G WP\"`.\n" }
│                      ← StrChunk ..0000.17362!1 len:396 { "\n" }
│                        ← StrChunk ..0000.17303!56 len:166 { "Lets look at an example of how t" … }
│                          ← StrChunk ..0000.17301!1 len:109 { "\n" }
│                            ← StrChunk ..0000.17192!108 len:108 { "![insert-into-middle-of-block](h" … }
│                          → StrChunk ..0000.17360!1 len:1 { "\n" }
│                        → StrChunk ..0000.17430!83 len:229 { "This will be a simple example, w" … }
│                          ← StrChunk ..0000.17428!1 len:64 { "\n" }
│                            ← StrChunk ..0000.17364!63 len:63 { "### Block-wise CT/RGA-Split Rope" … }
│                          → StrChunk ..0000.17514!82 len:82 { "a string `\"GG WP\"` and insert `\"" … }
│                      → StrChunk ..0000.17812!1 len:205 { "\n" }
│                        ← StrChunk ..0000.17703!80 len:192 { "it is to imagine the starting st" … }
│                          ← StrChunk ..0000.17618!84 len:85 { "Strings are represented by the R" … }
│                            ← StrChunk ..0000.17616!1 len:1 { "\n" }
│                          → StrChunk ..0000.17784!27 len:27 { "character has a unique ID.\n" }
│                        → StrChunk ..0000.26384!10 len:12 { "RGA string" }
│                          ← StrChunk ..0000.16033!2 len:2 { "![" }
│                            ← StrChunk ..0000.17814!1 len:0 [1]
│                          → StrChunk ..0000.17974!10 len:0 [10]
│              → StrChunk ..0000.14871!30 len:1374 [30]
│                ← StrChunk ..0000.18344!1 len:903 [1]
│                  ← StrChunk ..0000.18387!22 len:903 { "not important trivia, " }
│                    ← StrChunk ..0000.18058!28 len:418 { "that:\n\n- At least two users " }
│                      ← StrChunk ..0000.15958!75 len:124 [75]
│                        ← StrChunk ..0000.17934!39 len:78 { "blog/images/blogpost-001/rga-str" … }
│                          ← StrChunk ..0000.17858!37 len:39 { "https://streamich.github.io/json" … }
│                            ← StrChunk ..0000.16035!2 len:2 { "](" }
│                          → StrChunk ..0000.17818!39 len:0 [39]
│                            ← StrChunk ..0000.17895!38 len:0 [38]
│                        → StrChunk ..0000.17985!2 len:46 { "\nA" }
│                          ← StrChunk ..0000.17815!1 len:2 { "\n" }
│                            ← StrChunk ..0000.16037!1 len:1 { ")" }
│                          → StrChunk ..0000.17989!42 len:42 { " collaborative editing expert wi" … }
│                      → StrChunk ..0000.18208!2 len:266 { "- " }
│                        ← StrChunk ..0000.18186!11 len:107 { "the space `" }
│                          ← StrChunk ..0000.18134!50 len:90 { "User `a` inserted `\"GGWP\"`.\n  - " … }
│                            ← StrChunk ..0000.18092!40 len:40 { "`a` and `c` have edited the stri" … }
│                          → StrChunk ..0000.18199!6 len:6 { "\" \"`.\n" }
│                        → StrChunk ..0000.18346!18 len:157 { "at the same time.\n" }
│                          ← StrChunk ..0000.18310!34 len:128 { "\"WP\"` and user `c` inserted `\" \"" … }
│                            ← StrChunk ..0000.18212!94 len:94 { "Also, the `a.3` and `c.3` edits " … }
│                          → StrChunk ..0000.18372!11 len:11 { "\nThose are " }
│                    → StrChunk ..0000.18770!10 len:463 [10]
│                      ← StrChunk ..0000.18909!39 len:463 { "](https://streamich.github.io/js" … }
│                        ← StrChunk ..0000.18781!118 len:370 { "a unique ID, which is the ID of " … }
│                          ← StrChunk ..0000.18533!157 len:207 { "as a Block-wise RGA. In Block-wi" … }
│                            ← StrChunk ..0000.18413!50 len:50 { "now lets look at the same string" … }
│                          → StrChunk ..0000.18899!10 len:45 [10]
│                            ← StrChunk ..0000.26336!45 len:45 { "Single character vs block-wise r" … }
│                        → StrChunk ..0000.18987!1 len:54 { ")" }
│                          ← StrChunk ..0000.18948!39 len:53 [39]
│                            ← StrChunk ..0000.18989!53 len:53 { "blog/images/blogpost-001/single-" … }
│                          → StrChunk ..0000.18690!32 len:0 [32]
│                      → StrChunk ..0000.18498!1 len:0 [1]
│                        ← StrChunk ..0000.18497!1 len:0 [1]
│                          ← StrChunk ..0000.18463!28 len:0 [28]
│                            ← StrChunk ..0000.18722!47 len:0 [47]
│                          → StrChunk ..0000.18500!32 len:0 [32]
│                        → StrChunk ..0000.18383!2 len:0 [2]
│                          ← StrChunk ..0000.18409!3 len:0 [3]
│                            ← StrChunk ..0000.18491!3 len:0 [3]
│                          → StrChunk ..0000.18364!5 len:0 [5]
│                  → StrChunk ..0000.15517!18 len:0 [18]
│                    ← StrChunk ..0000.15813!3 len:0 [3]
│                      ← StrChunk ..0000.18132!1 len:0 [1]
│                        ← StrChunk ..0000.18205!2 len:0 [2]
│                          ← StrChunk ..0000.18210!1 len:0 [1]
│                            ← StrChunk ..0000.18306!2 len:0 [2]
│                          → StrChunk ..0000.18184!1 len:0 [1]
│                            ← StrChunk ..0000.18197!1 len:0 [1]
│                        → StrChunk ..0000.17987!1 len:0 [1]
│                          ← StrChunk ..0000.18031!22 len:0 [22]
│                            ← StrChunk ..0000.18086!3 len:0 [3]
│                          → StrChunk ..0000.15849!14 len:0 [14]
│                      → StrChunk ..0000.15666!1 len:0 [1]
│                        ← StrChunk ..0000.15729!2 len:0 [2]
│                          ← StrChunk ..0000.15734!1 len:0 [1]
│                            ← StrChunk ..0000.15776!2 len:0 [2]
│                          → StrChunk ..0000.15681!6 len:0 [6]
│                        → StrChunk ..0000.15509!1 len:0 [1]
│                          ← StrChunk ..0000.15479!6 len:0 [6]
│                            ← StrChunk ..0000.15607!19 len:0 [19]
│                          → StrChunk ..0000.15485!15 len:0 [15]
│                    → StrChunk ..0000.15306!1 len:0 [1]
│                      ← StrChunk ..0000.15391!2 len:0 [2]
│                        ← StrChunk ..0000.15510!6 len:0 [6]
│                          ← StrChunk ..0000.15535!6 len:0 [6]
│                            ← StrChunk ..0000.15542!7 len:0 [7]
│                          → StrChunk ..0000.15452!5 len:0 [5]
│                        → StrChunk ..0000.15365!8 len:0 [8]
│                          ← StrChunk ..0000.15374!6 len:0 [6]
│                            ← StrChunk ..0000.15382!4 len:0 [4]
│                          → StrChunk ..0000.15298!1 len:0 [1]
│                      → StrChunk ..0000.15130!27 len:0 [27]
│                        ← StrChunk ..0000.15235!2 len:0 [2]
│                          ← StrChunk ..0000.15267!3 len:0 [3]
│                            ← StrChunk ..0000.15299!5 len:0 [5]
│                          → StrChunk ..0000.15226!1 len:0 [1]
│                        → StrChunk ..0000.14785!34 len:0 [34]
│                          ← StrChunk ..0000.14984!3 len:0 [3]
│                            ← StrChunk ..0000.15063!22 len:0 [22]
│                          → StrChunk ..0000.14865!1 len:0 [1]
│                → StrChunk ..0000.19653!29 len:471 { "We will insert another block " }
│                  ← StrChunk ..0000.16985!12 len:127 [12]
│                    ← StrChunk ..0000.16665!9 len:0 [9]
│                      ← StrChunk ..0000.10542!1 len:0 [1]
│                        ← StrChunk ..0000.14732!2 len:0 [2]
│                          ← StrChunk ..0000.14819!45 len:0 [45]
│                            ← StrChunk ..0000.14866!4 len:0 [4]
│                          → StrChunk ..0000.14423!14 len:0 [14]
│                            ← StrChunk ..0000.14718!1 len:0 [1]
│                        → StrChunk ..0000.16577!3 len:0 [3]
│                          ← StrChunk ..0000.16541!34 len:0 [34]
│                            ← StrChunk ..0000.16517!22 len:0 [22]
│                          → StrChunk ..0000.16588!69 len:0 [69]
│                      → StrChunk ..0000.16927!4 len:0 [4]
│                        ← StrChunk ..0000.16737!20 len:0 [20]
│                          ← StrChunk ..0000.16688!47 len:0 [47]
│                            ← StrChunk ..0000.16680!2 len:0 [2]
│                          → StrChunk ..0000.16819!77 len:0 [77]
│                        → StrChunk ..0000.16931!54 len:0 [54]
│                          ← StrChunk ..0000.16998!2 len:0 [2]
│                            ← StrChunk ..0000.16896!27 len:0 [27]
│                          → StrChunk ..0000.17023!8 len:0 [8]
│                    → StrChunk ..0000.16757!32 len:127 [32]
│                      ← StrChunk ..0000.17187!1 len:0 [1]
│                        ← StrChunk ..0000.17070!67 len:0 [67]
│                          ← StrChunk ..0000.17005!15 len:0 [15]
│                            ← StrChunk ..0000.17000!1 len:0 [1]
│                          → StrChunk ..0000.17189!3 len:0 [3]
│                            ← StrChunk ..0000.17149!38 len:0 [38]
│                        → StrChunk ..0000.17031!38 len:0 [38]
│                          ← StrChunk ..0000.17020!2 len:0 [2]
│                            ← StrChunk ..0000.17137!6 len:0 [6]
│                          → StrChunk ..0000.17001!3 len:0 [3]
│                      → StrChunk ..0000.19042!36 len:127 { "Each character still has a uniqu" … }
│                        ← StrChunk ..0000.16735!1 len:2 { "\n" }
│                          ← StrChunk ..0000.16789!1 len:0 [1]
│                            ← StrChunk ..0000.16791!27 len:0 [27]
│                          → StrChunk ..0000.17984!1 len:1 { "\n" }
│                        → StrChunk ..0000.19778!2 len:89 { "\n\n" }
│                          ← StrChunk ..0000.19159!12 len:87 { "` and `a.4`." }
│                            ← StrChunk ..0000.19082!75 len:75 { ", it is just the memory is not u" … }
│                          → StrChunk ..0000.19652!1 len:0 [1]
│                  → StrChunk ..0000.20375!3 len:315 [3]
│                    ← StrChunk ..0000.19917!1 len:287 [1]
│                      ← StrChunk ..0000.20190!1 len:143 [1]
│                        ← StrChunk ..0000.19878!6 len:107 { "block " }
│                          ← StrChunk ..0000.19828!45 len:87 { "will result\ninto a block split. " … }
│                            ← StrChunk ..0000.19781!42 len:42 { "in the middle of an existing blo" … }
│                          → StrChunk ..0000.20192!4 len:14 { ".5` " }
│                            ← StrChunk ..0000.20180!10 len:10 { "with ID `d" }
│                        → StrChunk ..0000.20010!4 len:36 { " two" }
│                          ← StrChunk ..0000.19914!3 len:31 { "the" }
│                            ← StrChunk ..0000.19884!28 len:28 { "will be inserted in between " }
│                          → StrChunk ..0000.20197!1 len:1 { "\n" }
│                      → StrChunk ..0000.20200!2 len:144 { " (" }
│                        ← StrChunk ..0000.20016!1 len:17 [1]
│                          ← StrChunk ..0000.20199!1 len:6 { " " }
│                            ← StrChunk ..0000.19918!5 len:5 { "`\"G\"`" }
│                          → StrChunk ..0000.20017!11 len:11 { "characters." }
│                        → StrChunk ..0000.20325!50 len:125 { "the `d.5` block still implicitly" … }
│                          ← StrChunk ..0000.20262!18 len:71 { "each character in\n" }
│                            ← StrChunk ..0000.20203!53 len:53 { "Note that `d` means that it is y" … }
│                          → StrChunk ..0000.20415!4 len:4 { "are " }
│                    → StrChunk ..0000.20402!6 len:28 { "`, `d." }
│                      ← StrChunk ..0000.20426!1 len:18 { "6" }
│                        ← StrChunk ..0000.20381!3 len:10 [3]
│                          ← StrChunk ..0000.20420!1 len:4 { "5" }
│                            ← StrChunk ..0000.20378!3 len:3 { "`d." }
│                          → StrChunk ..0000.20384!6 len:6 { "`, `d." }
│                        → StrChunk ..0000.20430!1 len:7 { "7" }
│                          ← StrChunk ..0000.20393!6 len:6 { "`, `d." }
│                            ← StrChunk ..0000.20390!3 len:0 [3]
│                          → StrChunk ..0000.20399!3 len:0 [3]
│                      → StrChunk ..0000.20288!1 len:4 [1]
│                        ← StrChunk ..0000.20411!3 len:4 { "`.)" }
│                          ← StrChunk ..0000.20408!3 len:1 [3]
│                            ← StrChunk ..0000.20434!1 len:1 { "8" }
│                          → StrChunk ..0000.20280!6 len:0 [6]
│                        → StrChunk ..0000.20286!1 len:0 [1]
│                          ← StrChunk ..0000.20289!1 len:0 [1]
│                            ← StrChunk ..0000.20291!33 len:0 [33]
│                          → StrChunk ..0000.20256!5 len:0 [5]
│        → StrChunk ..0000.40044!1 len:17179 [1]
│          ← StrChunk ..0000.32778!1 len:8741 { " " }
│            ← StrChunk ..0000.19445!10 len:4149 [10]
│              ← StrChunk ..0000.21364!24 len:1999 { "traversal of the tree.\n\n" }
│                ← StrChunk ..0000.20501!68 len:1005 { "So, a little more precisely, the" … }
│                  ← StrChunk ..0000.19873!4 len:347 [4]
│                    ← StrChunk ..0000.26411!6 len:97 [6]
│                      ← StrChunk ..0000.26500!4 len:16 { "lock" }
│                        ← StrChunk ..0000.20031!3 len:5 { "\n![" }
│                          ← StrChunk ..0000.20030!1 len:1 [1]
│                            ← StrChunk ..0000.20029!1 len:1 { "\n" }
│                          → StrChunk ..0000.26499!1 len:1 [1]
│                            ← StrChunk ..0000.26596!1 len:1 { "B" }
│                        → StrChunk ..0000.26505!6 len:7 { "insert" }
│                          ← StrChunk ..0000.26504!1 len:1 [1]
│                            ← StrChunk ..0000.26598!1 len:1 { " " }
│                          → StrChunk ..0000.26395!7 len:0 [7]
│                      → StrChunk ..0000.20139!41 len:81 { "blog/images/blogpost-001/block-i" … }
│                        ← StrChunk ..0000.20034!10 len:39 [10]
│                          ← StrChunk ..0000.26402!6 len:0 [6]
│                            ← StrChunk ..0000.26409!1 len:0 [1]
│                          → StrChunk ..0000.20044!39 len:39 { "](https://streamich.github.io/js" … }
│                        → StrChunk ..0000.19923!86 len:1 [86]
│                          ← StrChunk ..0000.20136!1 len:1 { ")" }
│                            ← StrChunk ..0000.20083!53 len:0 [53]
│                          → StrChunk ..0000.19912!1 len:0 [1]
│                    → StrChunk ..0000.19173!1 len:250 [1]
│                      ← StrChunk ..0000.19693!5 len:2 [5]
│                        ← StrChunk ..0000.19691!2 len:1 [2]
│                          ← StrChunk ..0000.19682!7 len:0 [7]
│                            ← StrChunk ..0000.19823!4 len:0 [4]
│                          → StrChunk ..0000.19776!1 len:1 { "\n" }
│                            ← StrChunk ..0000.19699!77 len:0 [77]
│                        → StrChunk ..0000.19263!1 len:1 [1]
│                          ← StrChunk ..0000.19648!2 len:0 [2]
│                            ← StrChunk ..0000.19689!1 len:0 [1]
│                          → StrChunk ..0000.19264!1 len:1 { "\n" }
│                      → StrChunk ..0000.19234!28 len:248 { "lets look at the second one." }
│                        ← StrChunk ..0000.19214!1 len:53 [1]
│                          ← StrChunk ..0000.19266!1 len:39 { " " }
│                            ← StrChunk ..0000.19174!38 len:38 { "Block-wise representation is our" … }
│                          → StrChunk ..0000.19215!14 len:14 { "optimization, " }
│                        → StrChunk ..0000.19499!85 len:167 { "list, instead we store them in a" … }
│                          ← StrChunk ..0000.19323!35 len:81 { "don't store the blocks in a link" … }
│                            ← StrChunk ..0000.19275!46 len:46 { "\nThe second important optimizati" … }
│                          → StrChunk ..0000.20436!1 len:1 { "\n" }
│                  → StrChunk ..0000.20772!60 len:590 { "1` and `b.2`, which means\nit use" … }
│                    ← StrChunk ..0000.26432!1 len:157 [1]
│                      ← StrChunk ..0000.26490!3 len:14 { "ope" }
│                        ← StrChunk ..0000.26485!3 len:6 { "ext" }
│                          ← StrChunk ..0000.26484!1 len:1 [1]
│                            ← StrChunk ..0000.26594!1 len:1 { "T" }
│                          → StrChunk ..0000.26488!2 len:2 [2]
│                            ← StrChunk ..0000.26591!2 len:2 { " R" }
│                        → StrChunk ..0000.26495!3 len:5 { "ree" }
│                          ← StrChunk ..0000.26493!2 len:2 [2]
│                            ← StrChunk ..0000.26587!2 len:2 { " t" }
│                          → StrChunk ..0000.26418!12 len:0 [12]
│                      → StrChunk ..0000.20618!41 len:143 [41]
│                        ← StrChunk ..0000.20579!39 len:82 { "](https://streamich.github.io/js" … }
│                          ← StrChunk ..0000.20569!10 len:0 [10]
│                            ← StrChunk ..0000.26430!1 len:0 [1]
│                          → StrChunk ..0000.20661!43 len:43 { "blog/images/blogpost-001/text-ro" … }
│                        → StrChunk ..0000.20735!30 len:61 { "at there are two tombstones `b" }
│                          ← StrChunk ..0000.20704!29 len:30 { "\n\nNote, in the tree we see th" }
│                            ← StrChunk ..0000.20659!1 len:1 { ")" }
│                          → StrChunk ..0000.20767!1 len:1 { "." }
│                    → StrChunk ..0000.21045!41 len:373 { "inserted in the middle of the `b" … }
│                      ← StrChunk ..0000.20934!13 len:149 { "etween the `b" }
│                        ← StrChunk ..0000.20877!18 len:77 { "was deleted. Also," }
│                          ← StrChunk ..0000.20862!9 len:33 { ".1`, but " }
│                            ← StrChunk ..0000.20836!24 len:24 { "ted concurrently with `a" }
│                          → StrChunk ..0000.20918!14 len:26 { "*split link\" b" }
│                            ← StrChunk ..0000.20897!12 len:12 { " there\nis a " }
│                        → StrChunk ..0000.21009!2 len:59 { "as" }
│                          ← StrChunk ..0000.20996!11 len:56 { ".1` block w" }
│                            ← StrChunk ..0000.20949!45 len:45 { ".1` and `b.2` blocks, which mean" … }
│                          → StrChunk ..0000.21021!1 len:1 { "\n" }
│                      → StrChunk ..0000.21183!17 len:183 { "deleted. The fact" }
│                        ← StrChunk ..0000.21157!8 len:30 { " and `b." }
│                          ← StrChunk ..0000.21139!3 len:14 { ".1`" }
│                            ← StrChunk ..0000.21126!11 len:11 { ", before `b" }
│                          → StrChunk ..0000.21167!8 len:8 { "2` were " }
│                        → StrChunk ..0000.21245!55 len:136 { " is not important, but it is imp" … }
│                          ← StrChunk ..0000.21217!18 len:31 { "es are deleted now" }
│                            ← StrChunk ..0000.21202!13 len:13 { "\nthat `b` nod" }
│                          → StrChunk ..0000.21304!50 len:50 { "keep\ntrack of split links, which" … }
│                → StrChunk ..0000.21235!5 len:970 [5]
│                  ← StrChunk ..0000.22316!149 len:871 { "reconstruct them on the fly, whe" … }
│                    ← StrChunk ..0000.21842!42 len:707 { "blog/images/blogpost-001/insert-" … }
│                      ← StrChunk ..0000.26482!1 len:260 { "1" }
│                        ← StrChunk ..0000.21554!7 len:220 { "series\n" }
│                          ← StrChunk ..0000.21536!12 len:78 { ", through a " }
│                            ← StrChunk ..0000.21449!66 len:66 { "Now that we know the general set" … }
│                          → StrChunk ..0000.26434!12 len:135 { "Insert step " }
│                            ← StrChunk ..0000.21625!123 len:123 { "of a three step process. First, " … }
│                        → StrChunk ..0000.21748!10 len:39 [10]
│                          ← StrChunk ..0000.26446!1 len:0 [1]
│                            ← StrChunk ..0000.26448!1 len:0 [1]
│                          → StrChunk ..0000.21758!39 len:39 { "](https://streamich.github.io/js" … }
│                      → StrChunk ..0000.22135!85 len:405 { "will just follow the split link " … }
│                        ← StrChunk ..0000.21884!207 len:244 { "\n\nIn the process a new split lin" … }
│                          ← StrChunk ..0000.21840!1 len:1 { ")" }
│                            ← StrChunk ..0000.21797!43 len:0 [43]
│                          → StrChunk ..0000.22096!36 len:36 { "find the second `\"G\"` character," … }
│                        → StrChunk ..0000.22272!19 len:76 { "all the\nsplit links" }
│                          ← StrChunk ..0000.22240!24 len:40 { "the tree, we can remove " }
│                            ← StrChunk ..0000.22222!16 len:16 { "hen serializing " }
│                          → StrChunk ..0000.22293!17 len:17 { ", because we can " }
│                    → StrChunk ..0000.22091!4 len:15 [4]
│                      ← StrChunk ..0000.22291!1 len:15 [1]
│                        ← StrChunk ..0000.22570!4 len:15 { "the " }
│                          ← StrChunk ..0000.22465!1 len:1 [1]
│                            ← StrChunk ..0000.22575!1 len:1 { "\n" }
│                          → StrChunk ..0000.22310!5 len:10 [5]
│                            ← StrChunk ..0000.22466!10 len:10 { "ID `d.5`.\n" }
│                        → StrChunk ..0000.22220!1 len:0 [1]
│                          ← StrChunk ..0000.22238!1 len:0 [1]
│                            ← StrChunk ..0000.22264!4 len:0 [4]
│                          → StrChunk ..0000.22132!2 len:0 [2]
│                      → StrChunk ..0000.21548!5 len:0 [5]
│                        ← StrChunk ..0000.21579!1 len:0 [1]
│                          ← StrChunk ..0000.21581!43 len:0 [43]
│                            ← StrChunk ..0000.21561!16 len:0 [16]
│                          → StrChunk ..0000.21577!1 len:0 [1]
│                        → StrChunk ..0000.21354!9 len:0 [9]
│                          ← StrChunk ..0000.21388!60 len:0 [60]
│                            ← StrChunk ..0000.21515!16 len:0 [16]
│                          → StrChunk ..0000.21300!2 len:0 [2]
│                  → StrChunk ..0000.20768!1 len:99 [1]
│                    ← StrChunk ..0000.20994!1 len:0 [1]
│                      ← StrChunk ..0000.21137!1 len:0 [1]
│                        ← StrChunk ..0000.21175!6 len:0 [6]
│                          ← StrChunk ..0000.21200!1 len:0 [1]
│                            ← StrChunk ..0000.21215!1 len:0 [1]
│                          → StrChunk ..0000.21142!14 len:0 [14]
│                            ← StrChunk ..0000.21165!1 len:0 [1]
│                        → StrChunk ..0000.21022!22 len:0 [22]
│                          ← StrChunk ..0000.21011!9 len:0 [9]
│                            ← StrChunk ..0000.21086!39 len:0 [39]
│                          → StrChunk ..0000.21007!1 len:0 [1]
│                      → StrChunk ..0000.20895!1 len:0 [1]
│                        ← StrChunk ..0000.20916!1 len:0 [1]
│                          ← StrChunk ..0000.20932!1 len:0 [1]
│                            ← StrChunk ..0000.20947!1 len:0 [1]
│                          → StrChunk ..0000.20909!6 len:0 [6]
│                        → StrChunk ..0000.20832!2 len:0 [2]
│                          ← StrChunk ..0000.20860!1 len:0 [1]
│                            ← StrChunk ..0000.20871!3 len:0 [3]
│                          → StrChunk ..0000.20770!1 len:0 [1]
│                    → StrChunk ..0000.26464!1 len:99 { "2" }
│                      ← StrChunk ..0000.20463!1 len:15 [1]
│                        ← StrChunk ..0000.20439!24 len:0 [24]
│                          ← StrChunk ..0000.20733!1 len:0 [1]
│                            ← StrChunk ..0000.20765!1 len:0 [1]
│                          → StrChunk ..0000.20465!35 len:0 [35]
│                        → StrChunk ..0000.22476!2 len:15 { "![" }
│                          ← StrChunk ..0000.19646!1 len:1 { "\n" }
│                            ← StrChunk ..0000.20437!1 len:0 [1]
│                          → StrChunk ..0000.26450!12 len:12 { "Insert step " }
│                      → StrChunk ..0000.22564!1 len:83 [1]
│                        ← StrChunk ..0000.22488!76 len:77 { "](https://streamich.github.io/js" … }
│                          ← StrChunk ..0000.22478!10 len:0 [10]
│                            ← StrChunk ..0000.26462!1 len:0 [1]
│                          → StrChunk ..0000.22577!1 len:1 { "2" }
│                        → StrChunk ..0000.19358!39 len:6 [39]
│                          ← StrChunk ..0000.19647!1 len:6 { "\n" }
│                            ← StrChunk ..0000.22565!5 len:5 { ".png)" }
│                          → StrChunk ..0000.19436!5 len:0 [5]
│              → StrChunk ..0000.26239!50 len:2150 [50]
│                ← StrChunk ..0000.23879!3 len:1914 [3]
│                  ← StrChunk ..0000.22730!10 len:739 [10]
│                    ← StrChunk ..0000.19267!4 len:160 [4]
│                      ← StrChunk ..0000.19476!11 len:0 [11]
│                        ← StrChunk ..0000.19490!4 len:0 [4]
│                          ← StrChunk ..0000.19494!1 len:0 [1]
│                            ← StrChunk ..0000.19458!18 len:0 [18]
│                          → StrChunk ..0000.19495!1 len:0 [1]
│                            ← StrChunk ..0000.19497!1 len:0 [1]
│                        → StrChunk ..0000.19397!38 len:0 [38]
│                          ← StrChunk ..0000.19441!2 len:0 [2]
│                            ← StrChunk ..0000.19455!2 len:0 [2]
│                          → StrChunk ..0000.19321!1 len:0 [1]
│                      → StrChunk ..0000.22614!10 len:160 { " that the " }
│                        ← StrChunk ..0000.19171!1 len:35 { "\n" }
│                          ← StrChunk ..0000.19212!1 len:0 [1]
│                            ← StrChunk ..0000.19229!4 len:0 [4]
│                          → StrChunk ..0000.22578!34 len:34 { "Finally, we perform rotations su" … }
│                        → StrChunk ..0000.26480!1 len:115 { "3" }
│                          ← StrChunk ..0000.26466!12 len:114 { "Insert step " }
│                            ← StrChunk ..0000.22628!102 len:102 { "new block `d.5` is rotated to th" … }
│                          → StrChunk ..0000.26478!1 len:0 [1]
│                    → StrChunk ..0000.23670!30 len:579 { "\nsorted views of the same data" }
│                      ← StrChunk ..0000.22974!136 len:356 { "Now the example above is a bit s" … }
│                        ← StrChunk ..0000.22612!1 len:84 [1]
│                          ← StrChunk ..0000.22624!3 len:82 [3]
│                            ← StrChunk ..0000.22740!82 len:82 { "](https://streamich.github.io/js" … }
│                          → StrChunk ..0000.22822!1 len:2 { "\n" }
│                            ← StrChunk ..0000.19172!1 len:1 { "\n" }
│                        → StrChunk ..0000.23568!81 len:136 { "nodes are used in both trees, so" … }
│                          ← StrChunk ..0000.23516!45 len:46 { "Actually, for optimization purpo" … }
│                            ← StrChunk ..0000.23480!1 len:1 { " " }
│                          → StrChunk ..0000.23659!9 len:9 { "different" }
│                      → StrChunk ..0000.23941!12 len:193 { "conceptually" }
│                        ← StrChunk ..0000.23861!18 len:170 { ", and here is\nhow " }
│                          ← StrChunk ..0000.23715!130 len:141 { "is an implementation detail. The" … }
│                            ← StrChunk ..0000.23701!11 len:11 { ", but that " }
│                          → StrChunk ..0000.23883!11 len:11 { "both trees " }
│                        → StrChunk ..0000.23894!26 len:11 [26]
│                          ← StrChunk ..0000.23929!10 len:10 { " look like" }
│                            ← StrChunk ..0000.23924!5 len:0 [5]
│                          → StrChunk ..0000.23920!1 len:1 { ":" }
│                  → StrChunk ..0000.25206!1 len:1175 { "\n" }
│                    ← StrChunk ..0000.23235!1 len:124 { "\n" }
│                      ← StrChunk ..0000.23561!6 len:1 [6]
│                        ← StrChunk ..0000.23668!1 len:1 [1]
│                          ← StrChunk ..0000.23712!2 len:0 [2]
│                            ← StrChunk ..0000.23845!15 len:0 [15]
│                          → StrChunk ..0000.23658!1 len:1 { "\n" }
│                            ← StrChunk ..0000.23649!9 len:0 [9]
│                        → StrChunk ..0000.23486!2 len:0 [2]
│                          ← StrChunk ..0000.23490!22 len:0 [22]
│                            ← StrChunk ..0000.23481!5 len:0 [5]
│                          → StrChunk ..0000.23234!1 len:0 [1]
│                      → StrChunk ..0000.26549!1 len:122 [1]
│                        ← StrChunk ..0000.26538!11 len:31 { "Identifier " }
│                          ← StrChunk ..0000.26520!13 len:15 { "Example with " }
│                            ← StrChunk ..0000.25102!2 len:2 { "![" }
│                          → StrChunk ..0000.26551!5 len:5 { "Table" }
│                        → StrChunk ..0000.25104!10 len:91 [10]
│                          ← StrChunk ..0000.26512!7 len:0 [7]
│                            ← StrChunk ..0000.26533!4 len:0 [4]
│                          → StrChunk ..0000.25114!91 len:91 { "](https://streamich.github.io/js" … }
│                    → StrChunk ..0000.26041!90 len:1050 { "a single block for the whole wor" … }
│                      ← StrChunk ..0000.25663!1 len:823 { "\n" }
│                        ← StrChunk ..0000.25401!97 len:450 { "Rotating recently accessed conte" … }
│                          ← StrChunk ..0000.25302!98 len:191 { "for typical user interactions is" … }
│                            ← StrChunk ..0000.25208!93 len:93 { "Note that in both trees the newl" … }
│                          → StrChunk ..0000.25594!68 len:162 { "as the previous character, which" … }
│                            ← StrChunk ..0000.25499!94 len:94 { "for the next character, because " … }
│                        → StrChunk ..0000.25850!96 len:372 { "for each character. Instead, a n" … }
│                          ← StrChunk ..0000.25756!93 len:183 { "types a whole word, or a sentenc" … }
│                            ← StrChunk ..0000.25665!90 len:90 { "And this leads to the final opti" … }
│                          → StrChunk ..0000.25947!93 len:93 { "So, if a user types a whole word" … }
│                      → StrChunk ..0000.26557!28 len:137 { "Character merging into block" }
│                        ← StrChunk ..0000.26157!1 len:29 { "\n" }
│                          ← StrChunk ..0000.26158!1 len:26 { "\n" }
│                            ← StrChunk ..0000.26132!25 len:25 { "blocks with adjacent IDs." }
│                          → StrChunk ..0000.23236!2 len:2 { "![" }
│                        → StrChunk ..0000.26202!37 len:80 { "https://streamich.github.io/json" … }
│                          ← StrChunk ..0000.23248!2 len:2 { "](" }
│                            ← StrChunk ..0000.23238!10 len:0 [10]
│                          → StrChunk ..0000.26290!41 len:41 { "blog/images/blogpost-001/char-me" … }
│                → StrChunk ..0000.23479!1 len:236 [1]
│                  ← StrChunk ..0000.24593!107 len:1 [107]
│                    ← StrChunk ..0000.24081!2 len:1 [2]
│                      ← StrChunk ..0000.23383!6 len:1 [6]
│                        ← StrChunk ..0000.23331!51 len:1 [51]
│                          ← StrChunk ..0000.23250!37 len:0 [37]
│                            ← StrChunk ..0000.26160!41 len:0 [41]
│                          → StrChunk ..0000.23329!1 len:1 { ")" }
│                            ← StrChunk ..0000.23287!42 len:0 [42]
│                        → StrChunk ..0000.23954!21 len:0 [21]
│                          ← StrChunk ..0000.23421!44 len:0 [44]
│                            ← StrChunk ..0000.23391!24 len:0 [24]
│                          → StrChunk ..0000.23993!45 len:0 [45]
│                      → StrChunk ..0000.24363!9 len:0 [9]
│                        ← StrChunk ..0000.24335!28 len:0 [28]
│                          ← StrChunk ..0000.24228!82 len:0 [82]
│                            ← StrChunk ..0000.24091!51 len:0 [51]
│                          → StrChunk ..0000.24373!148 len:0 [148]
│                        → StrChunk ..0000.24310!11 len:0 [11]
│                          ← StrChunk ..0000.24322!10 len:0 [10]
│                            ← StrChunk ..0000.24333!1 len:0 [1]
│                          → StrChunk ..0000.24521!1 len:0 [1]
│                    → StrChunk ..0000.24142!9 len:0 [9]
│                      ← StrChunk ..0000.24780!5 len:0 [5]
│                        ← StrChunk ..0000.24786!85 len:0 [85]
│                          ← StrChunk ..0000.24730!50 len:0 [50]
│                            ← StrChunk ..0000.24710!16 len:0 [16]
│                          → StrChunk ..0000.24871!1 len:0 [1]
│                            ← StrChunk ..0000.24873!229 len:0 [229]
│                        → StrChunk ..0000.24700!5 len:0 [5]
│                          ← StrChunk ..0000.24726!1 len:0 [1]
│                            ← StrChunk ..0000.24728!1 len:0 [1]
│                          → StrChunk ..0000.24522!70 len:0 [70]
│                      → StrChunk ..0000.24194!5 len:0 [5]
│                        ← StrChunk ..0000.24224!3 len:0 [3]
│                          ← StrChunk ..0000.24200!22 len:0 [22]
│                            ← StrChunk ..0000.24157!37 len:0 [37]
│                          → StrChunk ..0000.24222!1 len:0 [1]
│                        → StrChunk ..0000.24038!42 len:0 [42]
│                          ← StrChunk ..0000.24083!4 len:0 [4]
│                            ← StrChunk ..0000.24151!5 len:0 [5]
│                          → StrChunk ..0000.23975!17 len:0 [17]
│                  → StrChunk ..0000.16584!3 len:235 [3]
│                    ← StrChunk ..0000.22899!36 len:1 [36]
│                      ← StrChunk ..0000.22944!7 len:0 [7]
│                        ← StrChunk ..0000.23389!1 len:0 [1]
│                          ← StrChunk ..0000.23415!5 len:0 [5]
│                            ← StrChunk ..0000.23465!11 len:0 [11]
│                          → StrChunk ..0000.22848!51 len:0 [51]
│                            ← StrChunk ..0000.23110!122 len:0 [122]
│                        → StrChunk ..0000.22960!2 len:0 [2]
│                          ← StrChunk ..0000.22964!9 len:0 [9]
│                            ← StrChunk ..0000.22953!7 len:0 [7]
│                          → StrChunk ..0000.22951!1 len:0 [1]
│                      → StrChunk ..0000.19078!2 len:1 [2]
│                        ← StrChunk ..0000.22824!1 len:0 [1]
│                          ← StrChunk ..0000.22826!21 len:0 [21]
│                            ← StrChunk ..0000.22823!1 len:0 [1]
│                          → StrChunk ..0000.19157!1 len:0 [1]
│                        → StrChunk ..0000.16674!3 len:1 [3]
│                          ← StrChunk ..0000.16682!3 len:1 [3]
│                            ← StrChunk ..0000.16736!1 len:1 { "\n" }
│                          → StrChunk ..0000.16657!5 len:0 [5]
│                    → StrChunk ..0000.26733!1 len:234 { "\n" }
│                      ← StrChunk ..0000.26599!1 len:105 { "\n" }
│                        ← StrChunk ..0000.16539!1 len:16 [1]
│                          ← StrChunk ..0000.16575!1 len:0 [1]
│                            ← StrChunk ..0000.16580!2 len:0 [2]
│                          → StrChunk ..0000.10543!16 len:16 { "\n\n## Benchmarks\n" }
│                        → StrChunk ..0000.26632!7 len:88 { " sectio" }
│                          ← StrChunk ..0000.26624!2 len:7 { "is" }
│                            ← StrChunk ..0000.26609!5 len:5 { "In th" }
│                          → StrChunk ..0000.26647!74 len:74 { "n we will benchmark `json-joy` i" … }
│                      → StrChunk ..0000.26836!1 len:128 { "\n" }
│                        ← StrChunk ..0000.26734!45 len:90 { " For that, lets first take a loo" … }
│                          ← StrChunk ..0000.26722!10 len:10 { "libraries." }
│                            ← StrChunk ..0000.26721!1 len:0 [1]
│                          → StrChunk ..0000.26783!35 len:35 { "sets wi will use for benchmarkin" … }
│                        → StrChunk ..0000.26837!2 len:37 { "\n\n" }
│                          ← StrChunk ..0000.26824!12 len:13 { "### Datasets" }
│                            ← StrChunk ..0000.26818!1 len:1 { "\n" }
│                          → StrChunk ..0000.32722!22 len:22 { "There will be no micro" }
│            → StrChunk ..0000.34137!3 len:4591 { "981" }
│              ← StrChunk ..0000.32992!50 len:1515 { " The editing trace was collected" … }
│                ← StrChunk ..0000.32938!14 len:801 { "vscode-tracker" }
│                  ← StrChunk ..0000.27007!6 len:358 { " `json" }
│                    ← StrChunk ..0000.32817!1 len:230 [1]
│                      ← StrChunk ..0000.26839!2 len:79 { "Fi" }
│                        ← StrChunk ..0000.32779!37 len:65 { " large text documents will be te" … }
│                          ← StrChunk ..0000.32767!10 len:27 { "real world" }
│                            ← StrChunk ..0000.32744!17 len:17 { "benchmarks, only " }
│                          → StrChunk ..0000.32761!5 len:1 [5]
│                            ← StrChunk ..0000.32777!1 len:1 { " " }
│                        → StrChunk ..0000.26845!1 len:12 [1]
│                          ← StrChunk ..0000.34584!1 len:3 { "\n" }
│                            ← StrChunk ..0000.26843!2 len:2 { "ve" }
│                          → StrChunk ..0000.26846!9 len:9 { "realistic" }
│                      → StrChunk ..0000.26989!1 len:151 [1]
│                        ← StrChunk ..0000.33145!4 len:136 { " now" }
│                          ← StrChunk ..0000.26858!131 len:131 { " relatively long text documents " … }
│                            ← StrChunk ..0000.26855!3 len:0 [3]
│                          → StrChunk ..0000.33144!1 len:1 { "!" }
│                        → StrChunk ..0000.26996!1 len:15 [1]
│                          ← StrChunk ..0000.27004!3 len:9 { "\n  " }
│                            ← StrChunk ..0000.26990!6 len:6 { " It is" }
│                          → StrChunk ..0000.26997!6 len:6 { "called" }
│                    → StrChunk ..0000.32882!2 len:122 { " T" }
│                      ← StrChunk ..0000.27059!28 len:85 { "contains all inserts and del" }
│                        ← StrChunk ..0000.33149!13 len:22 [13]
│                          ← StrChunk ..0000.27032!1 len:10 { "`" }
│                            ← StrChunk ..0000.27019!9 len:9 { "-joy-crdt" }
│                          → StrChunk ..0000.27046!3 len:12 { "ce " }
│                            ← StrChunk ..0000.27033!9 len:9 { ", the tra" }
│                        → StrChunk ..0000.27122!1 len:35 [1]
│                          ← StrChunk ..0000.27129!3 len:30 { "\n  " }
│                            ← StrChunk ..0000.27095!27 len:27 { "etes made to type this blog" }
│                          → StrChunk ..0000.27123!5 len:5 { "post." }
│                      → StrChunk ..0000.32917!1 len:35 { "i" }
│                        ← StrChunk ..0000.32905!7 len:25 [7]
│                          ← StrChunk ..0000.34589!9 len:22 { "collected" }
│                            ← StrChunk ..0000.32892!13 len:13 { "he trace was " }
│                          → StrChunk ..0000.32912!3 len:3 { " us" }
│                        → StrChunk ..0000.32937!1 len:9 { "[" }
│                          ← StrChunk ..0000.32929!6 len:7 { "g the " }
│                            ← StrChunk ..0000.32920!1 len:1 { "n" }
│                          → StrChunk ..0000.32990!1 len:1 { "`" }
│                  → StrChunk ..0000.27605!17 len:429 { "[crdt-benchmarks]" }
│                    ← StrChunk ..0000.27263!11 len:98 [11]
│                      ← StrChunk ..0000.32921!4 len:37 [4]
│                        ← StrChunk ..0000.32972!18 len:37 { "VS Code extension." }
│                          ← StrChunk ..0000.32952!18 len:19 { "][vscode-tracker] " }
│                            ← StrChunk ..0000.32991!1 len:1 { "`" }
│                          → StrChunk ..0000.32935!1 len:0 [1]
│                            ← StrChunk ..0000.32970!1 len:0 [1]
│                        → StrChunk ..0000.32884!4 len:0 [4]
│                          ← StrChunk ..0000.32915!1 len:0 [1]
│                            ← StrChunk ..0000.32918!1 len:0 [1]
│                          → StrChunk ..0000.27298!3 len:0 [3]
│                      → StrChunk ..0000.27136!2 len:61 { "- " }
│                        ← StrChunk ..0000.27274!2 len:1 [2]
│                          ← StrChunk ..0000.27278!2 len:0 [2]
│                            ← StrChunk ..0000.27282!14 len:0 [14]
│                          → StrChunk ..0000.27132!1 len:1 { "\n" }
│                        → StrChunk ..0000.27347!15 len:58 { "CRDT benchmarks" }
│                          ← StrChunk ..0000.27314!32 len:42 { "four traces are taken from the [" }
│                            ← StrChunk ..0000.27302!10 len:10 { "The other " }
│                          → StrChunk ..0000.27363!1 len:1 { "]" }
│                    → StrChunk ..0000.27425!108 len:314 { "https://github.com/josephg/crdt-" … }
│                      ← StrChunk ..0000.27391!1 len:62 [1]
│                        ← StrChunk ..0000.27368!8 len:24 { " reposit" }
│                          ← StrChunk ..0000.27367!1 len:0 [1]
│                            ← StrChunk ..0000.27364!1 len:0 [1]
│                          → StrChunk ..0000.27536!3 len:16 { "\n  " }
│                            ← StrChunk ..0000.27378!13 len:13 { "ory, see this" }
│                        → StrChunk ..0000.34598!7 len:38 { "rmation" }
│                          ← StrChunk ..0000.27392!28 len:29 { "description and license info" }
│                            ← StrChunk ..0000.27421!1 len:1 { "[" }
│                          → StrChunk ..0000.27422!2 len:2 { "](" }
│                      → StrChunk ..0000.32717!5 len:144 { "trace" }
│                        ← StrChunk ..0000.27420!1 len:17 { "." }
│                          ← StrChunk ..0000.27424!1 len:1 [1]
│                            ← StrChunk ..0000.27534!1 len:1 { ")" }
│                          → StrChunk ..0000.27622!15 len:15 { "\n  - The first " }
│                        → StrChunk ..0000.27706!29 len:122 { "Martin Kleppmann, the author\n" }
│                          ← StrChunk ..0000.27646!51 len:51 { " is the canonical `automerge-pap" … }
│                            ← StrChunk ..0000.27643!3 len:0 [3]
│                          → StrChunk ..0000.27774!42 len:42 { "    of the [Automerge][automerge" … }
│                → StrChunk ..0000.33997!1 len:664 { "s" }
│                  ← StrChunk ..0000.33251!1 len:221 { " " }
│                    ← StrChunk ..0000.33166!3 len:106 { " It" }
│                      ← StrChunk ..0000.33106!2 len:90 { "](" }
│                        ← StrChunk ..0000.33042!1 len:54 [1]
│                          ← StrChunk ..0000.33104!1 len:6 [1]
│                            ← StrChunk ..0000.33098!6 len:6 { "\n    [" }
│                          → StrChunk ..0000.33051!45 len:48 { "Conflict-Free Replicated JSON Da" … }
│                            ← StrChunk ..0000.33043!3 len:3 { "\"A " }
│                        → StrChunk ..0000.33108!1 len:34 [1]
│                          ← StrChunk ..0000.33142!1 len:33 { ")" }
│                            ← StrChunk ..0000.33109!32 len:32 { "https://arxiv.org/abs/1608.03960" }
│                          → StrChunk ..0000.33096!1 len:1 { "." }
│                      → StrChunk ..0000.33217!7 len:13 [7]
│                        ← StrChunk ..0000.33215!2 len:5 [2]
│                          ← StrChunk ..0000.33169!1 len:5 [1]
│                            ← StrChunk ..0000.33245!5 len:5 { "\n    " }
│                          → StrChunk ..0000.33225!5 len:0 [5]
│                        → StrChunk ..0000.33240!1 len:8 [1]
│                          ← StrChunk ..0000.33241!1 len:0 [1]
│                            ← StrChunk ..0000.33230!10 len:0 [10]
│                          → StrChunk ..0000.33170!8 len:8 { "contains" }
│                    → StrChunk ..0000.33283!6 len:114 { "of 104" }
│                      ← StrChunk ..0000.33998!17 len:84 { "single character " }
│                        ← StrChunk ..0000.33189!1 len:8 { "," }
│                          ← StrChunk ..0000.33183!3 len:3 { "259" }
│                            ← StrChunk ..0000.33178!5 len:0 [5]
│                          → StrChunk ..0000.33190!1 len:4 { " " }
│                            ← StrChunk ..0000.33186!3 len:3 { "778" }
│                        → StrChunk ..0000.34016!5 len:59 { "\n    " }
│                          ← StrChunk ..0000.33252!30 len:54 { ", with the final document size" }
│                            ← StrChunk ..0000.33191!24 len:24 { "insert/delete operations" }
│                          → StrChunk ..0000.33282!1 len:0 [1]
│                      → StrChunk ..0000.33305!7 len:24 { ", which" }
│                        ← StrChunk ..0000.33293!1 len:10 { " " }
│                          ← StrChunk ..0000.33289!3 len:4 { "852" }
│                            ← StrChunk ..0000.33292!1 len:1 { "," }
│                          → StrChunk ..0000.33298!5 len:5 { "bytes" }
│                        → StrChunk ..0000.33364!4 len:7 [4]
│                          ← StrChunk ..0000.33312!1 len:1 [1]
│                            ← StrChunk ..0000.34022!1 len:1 { " " }
│                          → StrChunk ..0000.33368!6 len:6 { "result" }
│                  → StrChunk ..0000.33501!24 len:442 { "collected while writing\n" }
│                    ← StrChunk ..0000.33336!1 len:120 [1]
│                      ← StrChunk ..0000.33386!23 len:45 { "RGA blocks in the tree." }
│                        ← StrChunk ..0000.33378!7 len:22 { " 12,387" }
│                          ← StrChunk ..0000.33377!1 len:3 [1]
│                            ← StrChunk ..0000.33374!3 len:3 { " in" }
│                          → StrChunk ..0000.33385!1 len:12 [1]
│                            ← StrChunk ..0000.33984!12 len:12 { " `json-joy` " }
│                        → StrChunk ..0000.33335!1 len:0 [1]
│                          ← StrChunk ..0000.33330!2 len:0 [2]
│                            ← StrChunk ..0000.33313!15 len:0 [15]
│                          → StrChunk ..0000.33332!3 len:0 [3]
│                      → StrChunk ..0000.33294!2 len:75 [2]
│                        ← StrChunk ..0000.33328!1 len:0 [1]
│                          ← StrChunk ..0000.33337!8 len:0 [8]
│                            ← StrChunk ..0000.33352!11 len:0 [11]
│                          → StrChunk ..0000.33303!1 len:0 [1]
│                        → StrChunk ..0000.27876!4 len:75 { "  - " }
│                          ← StrChunk ..0000.27870!1 len:1 { "\n" }
│                            ← StrChunk ..0000.33046!4 len:0 [4]
│                          → StrChunk ..0000.33413!70 len:70 { "The second one is `seph-blog1` t" … }
│                    → StrChunk ..0000.33936!14 len:298 { "    in 18,222 " }
│                      ← StrChunk ..0000.33918!1 len:201 { "," }
│                        ← StrChunk ..0000.33813!70 len:175 { "    137,154 insert/delete operat" … }
│                          ← StrChunk ..0000.33752!20 len:103 { " The trace contains\n" }
│                            ← StrChunk ..0000.33589!83 len:83 { "    the [\"5000x faster CRDTs: An" … }
│                          → StrChunk ..0000.33913!2 len:2 { "56" }
│                        → StrChunk ..0000.33892!20 len:25 { " bytes, which result" }
│                          ← StrChunk ..0000.33883!9 len:3 [9]
│                            ← StrChunk ..0000.33915!3 len:3 { "769" }
│                          → StrChunk ..0000.33919!2 len:2 { "s\n" }
│                      → StrChunk ..0000.34046!1 len:83 { "T" }
│                        ← StrChunk ..0000.34034!1 len:39 { "\n" }
│                          ← StrChunk ..0000.33950!23 len:34 { "RGA blocks in the tree." }
│                            ← StrChunk ..0000.33973!11 len:11 { "`json-joy` " }
│                          → StrChunk ..0000.34040!4 len:4 { "  - " }
│                        → StrChunk ..0000.34121!16 len:43 { ". It contains 36" }
│                          ← StrChunk ..0000.34081!40 len:26 [40]
│                            ← StrChunk ..0000.34055!26 len:26 { "he third one is `rustcode`" }
│                          → StrChunk ..0000.34140!1 len:1 { "," }
│              → StrChunk ..0000.37766!2 len:3073 { "\n\n" }
│                ← StrChunk ..0000.34030!2 len:2340 [2]
│                  ← StrChunk ..0000.34576!1 len:335 { "," }
│                    ← StrChunk ..0000.34246!5 len:262 [5]
│                      ← StrChunk ..0000.34211!6 len:104 [6]
│                        ← StrChunk ..0000.34289!2 len:69 { "65" }
│                          ← StrChunk ..0000.34149!62 len:63 { "    insert/delete operations, wi" … }
│                            ← StrChunk ..0000.34143!1 len:1 { "\n" }
│                          → StrChunk ..0000.34291!3 len:4 { "218" }
│                            ← StrChunk ..0000.34294!1 len:1 { "," }
│                        → StrChunk ..0000.34301!1 len:35 { "," }
│                          ← StrChunk ..0000.34296!2 len:31 { "12" }
│                            ← StrChunk ..0000.34217!29 len:29 { " bytes, which results in\n    " }
│                          → StrChunk ..0000.34298!3 len:3 { "505" }
│                      → StrChunk ..0000.34569!1 len:158 { "," }
│                        ← StrChunk ..0000.34358!51 len:89 { "  - The last one is `sveltecompo" … }
│                          ← StrChunk ..0000.34302!1 len:36 { "\n" }
│                            ← StrChunk ..0000.34251!35 len:35 { " `json-joy` RGA blocks in the tr" … }
│                          → StrChunk ..0000.34564!2 len:2 { "18" }
│                        → StrChunk ..0000.34418!63 len:68 { " insert/delete operations, with " … }
│                          ← StrChunk ..0000.34409!9 len:3 [9]
│                            ← StrChunk ..0000.34566!3 len:3 { "335" }
│                          → StrChunk ..0000.34571!2 len:2 { "18" }
│                    → StrChunk ..0000.34352!5 len:72 [5]
│                      ← StrChunk ..0000.34579!3 len:72 { "813" }
│                        ← StrChunk ..0000.34490!25 len:30 { " bytes, which results in " }
│                          ← StrChunk ..0000.34481!9 len:3 [9]
│                            ← StrChunk ..0000.34573!3 len:3 { "451" }
│                          → StrChunk ..0000.34582!1 len:2 { "," }
│                            ← StrChunk ..0000.34578!1 len:1 { "5" }
│                        → StrChunk ..0000.34308!5 len:39 [5]
│                          ← StrChunk ..0000.34524!39 len:39 { " `json-joy` RGA blocks in\n    th" … }
│                            ← StrChunk ..0000.34515!9 len:0 [9]
│                          → StrChunk ..0000.34319!32 len:0 [32]
│                      → StrChunk ..0000.34047!1 len:0 [1]
│                        ← StrChunk ..0000.34144!4 len:0 [4]
│                          ← StrChunk ..0000.34303!4 len:0 [4]
│                            ← StrChunk ..0000.34313!3 len:0 [3]
│                          → StrChunk ..0000.34141!1 len:0 [1]
│                        → StrChunk ..0000.34044!1 len:0 [1]
│                          ← StrChunk ..0000.34048!2 len:0 [2]
│                            ← StrChunk ..0000.34052!1 len:0 [1]
│                          → StrChunk ..0000.34035!4 len:0 [4]
│                  → StrChunk ..0000.33487!2 len:2005 [2]
│                    ← StrChunk ..0000.33790!1 len:0 [1]
│                      ← StrChunk ..0000.33772!7 len:0 [7]
│                        ← StrChunk ..0000.33933!1 len:0 [1]
│                          ← StrChunk ..0000.33921!9 len:0 [9]
│                            ← StrChunk ..0000.34023!5 len:0 [5]
│                          → StrChunk ..0000.33934!1 len:0 [1]
│                            ← StrChunk ..0000.33930!3 len:0 [3]
│                        → StrChunk ..0000.33783!7 len:0 [7]
│                          ← StrChunk ..0000.33779!3 len:0 [3]
│                            ← StrChunk ..0000.33782!1 len:0 [1]
│                          → StrChunk ..0000.33792!20 len:0 [20]
│                      → StrChunk ..0000.33536!1 len:0 [1]
│                        ← StrChunk ..0000.33535!1 len:0 [1]
│                          ← StrChunk ..0000.33525!9 len:0 [9]
│                            ← StrChunk ..0000.33672!12 len:0 [12]
│                          → StrChunk ..0000.33538!49 len:0 [49]
│                        → StrChunk ..0000.33483!2 len:0 [2]
│                          ← StrChunk ..0000.33587!1 len:0 [1]
│                            ← StrChunk ..0000.33534!1 len:0 [1]
│                          → StrChunk ..0000.33491!8 len:0 [8]
│                    → StrChunk ..0000.37752!14 len:2005 { "editing trace:" }
│                      ← StrChunk ..0000.35765!5 len:254 { "lete " }
│                        ← StrChunk ..0000.27883!1 len:46 { "\n" }
│                          ← StrChunk ..0000.27880!3 len:0 [3]
│                            ← StrChunk ..0000.33485!1 len:0 [1]
│                          → StrChunk ..0000.35718!45 len:45 { "\nEach dataset contains a list of" … }
│                        → StrChunk ..0000.35823!105 len:203 { "specifies the position\nin the do" … }
│                          ← StrChunk ..0000.35805!16 len:28 { "each operations " }
│                            ← StrChunk ..0000.35774!12 len:12 { "operations, " }
│                          → StrChunk ..0000.37668!70 len:70 { "\n\nHere is the sample of the firs" … }
│                      → StrChunk ..0000.37666!2 len:1737 { "js" }
│                        ← StrChunk ..0000.35928!5 len:5 { "\n\n```" }
│                          ← StrChunk ..0000.37738!1 len:0 [1]
│                            ← StrChunk ..0000.37740!10 len:0 [10]
│                          → StrChunk ..0000.37665!1 len:0 [1]
│                        → StrChunk ..0000.35934!1 len:1730 [1]
│                          ← StrChunk ..0000.35940!1725 len:1726 { "[\n  [ 0, 0, '\\\\' ],  [ 1, 0, 'd'" … }
│                            ← StrChunk ..0000.35933!1 len:1 { "\n" }
│                          → StrChunk ..0000.35935!4 len:4 { "\n```" }
│                → StrChunk ..0000.34812!2 len:731 { "][" }
│                  ← StrChunk ..0000.35821!1 len:305 [1]
│                    ← StrChunk ..0000.37930!10 len:171 { " to be del" }
│                      ← StrChunk ..0000.37887!2 len:104 [2]
│                        ← StrChunk ..0000.37858!1 len:82 [1]
│                          ← StrChunk ..0000.37914!6 len:48 { ": (1) " }
│                            ← StrChunk ..0000.37816!42 len:42 { "Each operation is a 3-tuple whic" … }
│                          → StrChunk ..0000.37922!6 len:34 { "; (2) " }
│                            ← StrChunk ..0000.37859!28 len:28 { "the position in the document" }
│                        → StrChunk ..0000.37902!1 len:22 [1]
│                          ← StrChunk ..0000.37929!1 len:14 { "\n" }
│                            ← StrChunk ..0000.37889!13 len:13 { "the length of" }
│                          → StrChunk ..0000.37903!8 len:8 { "the text" }
│                      → StrChunk ..0000.37970!1 len:57 [1]
│                        ← StrChunk ..0000.37958!12 len:55 { ") the text t" }
│                          ← StrChunk ..0000.37956!1 len:12 { "3" }
│                            ← StrChunk ..0000.37944!11 len:11 { "eted; and (" }
│                          → StrChunk ..0000.37972!31 len:31 { "o be inserted at that position." }
│                        → StrChunk ..0000.37911!2 len:2 { "\n\n" }
│                          ← StrChunk ..0000.37940!2 len:0 [2]
│                            ← StrChunk ..0000.37955!1 len:0 [1]
│                          → StrChunk ..0000.37768!47 len:0 [47]
│                    → StrChunk ..0000.35714!4 len:134 { "CRDT" }
│                      ← StrChunk ..0000.34607!4 len:24 { "### " }
│                        ← StrChunk ..0000.35763!1 len:1 [1]
│                          ← StrChunk ..0000.35770!2 len:0 [2]
│                            ← StrChunk ..0000.35786!17 len:0 [17]
│                          → StrChunk ..0000.34605!1 len:1 { "\n" }
│                            ← StrChunk ..0000.34633!1 len:0 [1]
│                        → StrChunk ..0000.35712!1 len:19 { "a" }
│                          ← StrChunk ..0000.35344!2 len:13 { "ag" }
│                            ← StrChunk ..0000.35327!11 len:11 { "Benchmarks " }
│                          → StrChunk ..0000.35346!5 len:5 { "inst " }
│                      → StrChunk ..0000.34634!2 len:106 { "\n\n" }
│                        ← StrChunk ..0000.35338!5 len:10 [5]
│                          ← StrChunk ..0000.35356!10 len:10 { " libraries" }
│                            ← StrChunk ..0000.35351!5 len:0 [5]
│                          → StrChunk ..0000.34613!20 len:0 [20]
│                        → StrChunk ..0000.34798!3 len:94 { "- [" }
│                          ← StrChunk ..0000.34789!3 len:82 { ":\n\n" }
│                            ← StrChunk ..0000.34700!79 len:79 { "First we will benchmark `json-jo" … }
│                          → StrChunk ..0000.34802!9 len:9 { "Automerge" }
│                  → StrChunk ..0000.35037!1 len:424 { "." }
│                    ← StrChunk ..0000.34898!14 len:176 { "avaScript.\n- [" }
│                      ← StrChunk ..0000.35053!16 len:71 { " implementation " }
│                        ← StrChunk ..0000.34824!4 len:51 { " is " }
│                          ← StrChunk ..0000.34814!1 len:10 { "]" }
│                            ← StrChunk ..0000.34815!9 len:9 { "automerge" }
│                          → StrChunk ..0000.35038!10 len:37 { " algorithm" }
│                            ← StrChunk ..0000.34830!27 len:27 { "probably the best known RGA" }
│                        → StrChunk ..0000.34865!25 len:4 [25]
│                          ← StrChunk ..0000.34857!1 len:0 [1]
│                            ← StrChunk ..0000.35049!2 len:0 [2]
│                          → StrChunk ..0000.34890!4 len:4 { "in J" }
│                      → StrChunk ..0000.34923!3 len:91 { "yjs" }
│                        ← StrChunk ..0000.34912!1 len:6 { "]" }
│                          ← StrChunk ..0000.34913!1 len:4 [1]
│                            ← StrChunk ..0000.34915!4 len:4 { "Y.js" }
│                          → StrChunk ..0000.34919!1 len:1 { "[" }
│                        → StrChunk ..0000.34972!37 len:82 { "cript CRDT library, which implem" … }
│                          ← StrChunk ..0000.34943!17 len:31 { "widely used JavaS" }
│                            ← StrChunk ..0000.34927!14 len:14 { "] is the most " }
│                          → StrChunk ..0000.35016!14 len:14 { "YATA algorithm" }
│                    → StrChunk ..0000.41741!13 len:247 { "\nexecute the " }
│                      ← StrChunk ..0000.35366!1 len:222 { "\n" }
│                        ← StrChunk ..0000.35322!4 len:130 { "its " }
│                          ← StrChunk ..0000.35197!115 len:116 { "- [Y.rs][yrs] is a port of Y.js " … }
│                            ← StrChunk ..0000.35069!1 len:1 { "\n" }
│                          → StrChunk ..0000.35312!10 len:10 { "Rust code." }
│                        → StrChunk ..0000.41679!17 len:91 { ", numbers are in " }
│                          ← StrChunk ..0000.41627!50 len:51 { "Below is a sample output of runn" … }
│                            ← StrChunk ..0000.38014!1 len:1 { "\n" }
│                          → StrChunk ..0000.41706!23 len:23 { "milliseconds it took to" }
│                      → StrChunk ..0000.41696!3 len:12 [3]
│                        ← StrChunk ..0000.41754!2 len:12 [2]
│                          ← StrChunk ..0000.41769!4 len:12 [4]
│                            ← StrChunk ..0000.41757!12 len:12 { "full trace:\n" }
│                          → StrChunk ..0000.41729!9 len:0 [9]
│                        → StrChunk ..0000.41677!1 len:0 [1]
│                          ← StrChunk ..0000.41699!1 len:0 [1]
│                            ← StrChunk ..0000.41701!4 len:0 [4]
│                          → StrChunk ..0000.38016!13 len:0 [13]
│          → StrChunk ..0000.30960!11 len:8438 { "performance" }
│            ← StrChunk ..0000.28546!9 len:6461 { "y authors" }
│              ← StrChunk ..0000.34801!1 len:4772 [1]
│                ← StrChunk ..0000.42224!31 len:4119 { "100x faster than Y.js and 1,000" }
│                  ← StrChunk ..0000.42042!10 len:3900 { "\n- Y.rs is" }
│                    ← StrChunk ..0000.42293!7 len:3774 { "Notable" }
│                      ← StrChunk ..0000.40045!1581 len:3604 { "\n\n\n=============================" … }
│                        ← StrChunk ..0000.38006!3 len:2017 { "```" }
│                          ← StrChunk ..0000.38004!1 len:2 { "\n" }
│                            ← StrChunk ..0000.38015!1 len:1 { "\n" }
│                          → StrChunk ..0000.38029!2012 len:2012 { "\n===============================" … }
│                            ← StrChunk ..0000.38013!1 len:0 [1]
│                        → StrChunk ..0000.41775!1 len:6 { "\n" }
│                          ← StrChunk ..0000.38009!4 len:4 { "\n```" }
│                            ← StrChunk ..0000.40041!1 len:0 [1]
│                          → StrChunk ..0000.42017!1 len:1 { "\n" }
│                      → StrChunk ..0000.41776!1 len:163 { "\n" }
│                        ← StrChunk ..0000.42019!4 len:15 [4]
│                          ← StrChunk ..0000.42028!14 len:14 { " observations:" }
│                            ← StrChunk ..0000.42024!4 len:0 [4]
│                          → StrChunk ..0000.42018!1 len:1 { "\n" }
│                        → StrChunk ..0000.41988!12 len:147 { "0x faster th" }
│                          ← StrChunk ..0000.41967!17 len:122 { "- Y.js is about 1" }
│                            ← StrChunk ..0000.41859!105 len:105 { "- Automerge participated only it" … }
│                          → StrChunk ..0000.42004!13 len:13 { "an Automerge." }
│                    → StrChunk ..0000.42000!2 len:116 [2]
│                      ← StrChunk ..0000.42148!40 len:81 { "`sveltecomponent`, which is the " … }
│                        ← StrChunk ..0000.42073!9 len:41 { "than Y.js" }
│                          ← StrChunk ..0000.42060!8 len:8 { " slower " }
│                            ← StrChunk ..0000.42052!8 len:0 [8]
│                          → StrChunk ..0000.42082!6 len:24 { ", but " }
│                            ← StrChunk ..0000.42130!18 len:18 { " in all benchmarks" }
│                        → StrChunk ..0000.42088!37 len:0 [37]
│                          ← StrChunk ..0000.42128!1 len:0 [1]
│                            ← StrChunk ..0000.42188!1 len:0 [1]
│                          → StrChunk ..0000.42068!4 len:0 [4]
│                      → StrChunk ..0000.41789!3 len:35 [3]
│                        ← StrChunk ..0000.41777!12 len:0 [12]
│                          ← StrChunk ..0000.41964!2 len:0 [2]
│                            ← StrChunk ..0000.41984!2 len:0 [2]
│                          → StrChunk ..0000.41793!65 len:0 [65]
│                        → StrChunk ..0000.42202!22 len:35 { "- `json-joy` is about " }
│                          ← StrChunk ..0000.42190!9 len:10 { "  trace.\n" }
│                            ← StrChunk ..0000.38005!1 len:1 { "\n" }
│                          → StrChunk ..0000.42289!3 len:3 { "50-" }
│                  → StrChunk ..0000.35370!2 len:188 [2]
│                    ← StrChunk ..0000.35367!2 len:188 [2]
│                      ← StrChunk ..0000.42288!1 len:146 { "\n" }
│                        ← StrChunk ..0000.42917!7 len:144 { "\n\nY.rs " }
│                          ← StrChunk ..0000.42266!22 len:24 { "faster than Automerge." }
│                            ← StrChunk ..0000.42257!2 len:2 { "x " }
│                          → StrChunk ..0000.42924!2 len:113 [2]
│                            ← StrChunk ..0000.42928!113 len:113 { "implementation might have bugs, " … }
│                        → StrChunk ..0000.42199!2 len:1 [2]
│                          ← StrChunk ..0000.42255!1 len:0 [1]
│                            ← StrChunk ..0000.42259!6 len:0 [6]
│                          → StrChunk ..0000.35459!1 len:1 { "\n" }
│                      → StrChunk ..0000.35415!2 len:42 [2]
│                        ← StrChunk ..0000.35388!2 len:42 [2]
│                          ← StrChunk ..0000.35418!41 len:42 { "### Benchmarks against non-CRDT " … }
│                            ← StrChunk ..0000.35369!1 len:1 { "\n" }
│                          → StrChunk ..0000.35394!19 len:0 [19]
│                        → StrChunk ..0000.35382!3 len:0 [3]
│                          ← StrChunk ..0000.35390!2 len:0 [2]
│                            ← StrChunk ..0000.35413!1 len:0 [1]
│                          → StrChunk ..0000.35378!2 len:0 [2]
│                    → StrChunk ..0000.35111!44 len:0 [44]
│                      ← StrChunk ..0000.35081!3 len:0 [3]
│                        ← StrChunk ..0000.35074!4 len:0 [4]
│                          ← StrChunk ..0000.35070!3 len:0 [3]
│                            ← StrChunk ..0000.35373!3 len:0 [3]
│                          → StrChunk ..0000.35078!2 len:0 [2]
│                            ← StrChunk ..0000.35073!1 len:0 [1]
│                        → StrChunk ..0000.35156!12 len:0 [12]
│                          ← StrChunk ..0000.35085!26 len:0 [26]
│                            ← StrChunk ..0000.35080!1 len:0 [1]
│                          → StrChunk ..0000.35169!27 len:0 [27]
│                      → StrChunk ..0000.34921!1 len:0 [1]
│                        ← StrChunk ..0000.34960!6 len:0 [6]
│                          ← StrChunk ..0000.35009!5 len:0 [5]
│                            ← StrChunk ..0000.35030!5 len:0 [5]
│                          → StrChunk ..0000.34941!1 len:0 [1]
│                        → StrChunk ..0000.34858!5 len:0 [5]
│                          ← StrChunk ..0000.34894!2 len:0 [2]
│                            ← StrChunk ..0000.34920!1 len:0 [1]
│                          → StrChunk ..0000.34828!1 len:0 [1]
│                → StrChunk ..0000.42895!1 len:653 { "[" }
│                  ← StrChunk ..0000.42322!113 len:555 { "- `rope.js` is a JavaScript libr" … }
│                    ← StrChunk ..0000.35462!2 len:230 { "\n`" }
│                      ← StrChunk ..0000.34696!3 len:1 [3]
│                        ← StrChunk ..0000.34779!7 len:0 [7]
│                          ← StrChunk ..0000.34792!2 len:0 [2]
│                            ← StrChunk ..0000.34796!1 len:0 [1]
│                          → StrChunk ..0000.34679!15 len:0 [15]
│                            ← StrChunk ..0000.34636!41 len:0 [41]
│                        → StrChunk ..0000.34611!1 len:1 [1]
│                          ← StrChunk ..0000.34677!1 len:0 [1]
│                            ← StrChunk ..0000.34694!1 len:0 [1]
│                          → StrChunk ..0000.34606!1 len:1 { "\n" }
│                      → StrChunk ..0000.35655!3 len:227 [3]
│                        ← StrChunk ..0000.35527!128 len:176 { "- `V8 strings` is a benchmark ag" … }
│                          ← StrChunk ..0000.35481!22 len:32 { "RGA implementation i\n\n" }
│                            ← StrChunk ..0000.35466!10 len:10 { "json-joy` " }
│                          → StrChunk ..0000.42302!16 len:16 { "String.prototype" }
│                        → StrChunk ..0000.35687!25 len:51 { "rt and delete operations." }
│                          ← StrChunk ..0000.35667!18 len:25 { ")` to perform inse" }
│                            ← StrChunk ..0000.35658!7 len:7 { ".slice(" }
│                          → StrChunk ..0000.42318!1 len:1 { "\n" }
│                    → StrChunk ..0000.42539!3 len:212 [3]
│                      ← StrChunk ..0000.42516!1 len:112 { "." }
│                        ← StrChunk ..0000.42487!1 len:97 { " " }
│                          ← StrChunk ..0000.42600!19 len:68 { " a highly optimized" }
│                            ← StrChunk ..0000.42438!49 len:49 { "- `diamond-types-node` is a WebA" … }
│                          → StrChunk ..0000.42488!23 len:28 { "`diamond-types` library" }
│                            ← StrChunk ..0000.42511!5 len:5 { "Rust " }
│                        → StrChunk ..0000.42518!10 len:14 { "It appends" }
│                          ← StrChunk ..0000.42517!1 len:3 [1]
│                            ← StrChunk ..0000.42620!3 len:3 { "\n  " }
│                          → StrChunk ..0000.42624!1 len:1 { " " }
│                      → StrChunk ..0000.42625!30 len:100 { "string contents in a skip list" }
│                        ← StrChunk ..0000.42542!13 len:43 { " metadata to " }
│                          ← StrChunk ..0000.42529!9 len:9 { "operation" }
│                            ← StrChunk ..0000.42528!1 len:0 [1]
│                          → StrChunk ..0000.42579!21 len:21 { "a log and stores the " }
│                        → StrChunk ..0000.42676!9 len:27 { "very fast" }
│                          ← StrChunk ..0000.42865!1 len:17 { "[" }
│                            ← StrChunk ..0000.42660!16 len:16 { " powered by\n  a " }
│                          → StrChunk ..0000.42866!1 len:1 { "]" }
│                  → StrChunk ..0000.42564!2 len:97 [2]
│                    ← StrChunk ..0000.42703!1 len:54 { "[" }
│                      ← StrChunk ..0000.42870!1 len:34 [1]
│                        ← StrChunk ..0000.42872!19 len:21 [19]
│                          ← StrChunk ..0000.42896!1 len:21 { "]" }
│                            ← StrChunk ..0000.42897!20 len:20 { "jump-rope-benchmarks" }
│                          → StrChunk ..0000.42891!1 len:0 [1]
│                            ← StrChunk ..0000.42893!1 len:0 [1]
│                        → StrChunk ..0000.42688!10 len:13 { "`JumpRope`" }
│                          ← StrChunk ..0000.42685!2 len:2 { " [" }
│                            ← StrChunk ..0000.42867!2 len:0 [2]
│                          → StrChunk ..0000.42699!1 len:1 { "]" }
│                      → StrChunk ..0000.42687!1 len:19 [1]
│                        ← StrChunk ..0000.42704!1 len:19 [1]
│                          ← StrChunk ..0000.42715!10 len:19 { "] library." }
│                            ← StrChunk ..0000.42705!9 len:9 { "jump-rope" }
│                          → StrChunk ..0000.42700!2 len:0 [2]
│                        → StrChunk ..0000.42563!1 len:0 [1]
│                          ← StrChunk ..0000.42555!6 len:0 [6]
│                            ← StrChunk ..0000.42655!1 len:0 [1]
│                          → StrChunk ..0000.42568!7 len:0 [7]
│                    → StrChunk ..0000.35505!2 len:43 [2]
│                      ← StrChunk ..0000.35665!1 len:0 [1]
│                        ← StrChunk ..0000.42319!2 len:0 [2]
│                          ← StrChunk ..0000.42435!2 len:0 [2]
│                            ← StrChunk ..0000.42561!1 len:0 [1]
│                          → StrChunk ..0000.35685!1 len:0 [1]
│                        → StrChunk ..0000.35522!4 len:0 [4]
│                          ← StrChunk ..0000.35508!8 len:0 [8]
│                            ← StrChunk ..0000.35503!2 len:0 [2]
│                          → StrChunk ..0000.35516!3 len:0 [3]
│                      → StrChunk ..0000.27884!3 len:43 [3]
│                        ← StrChunk ..0000.35460!2 len:2 { "\n\n" }
│                          ← StrChunk ..0000.35464!1 len:0 [1]
│                            ← StrChunk ..0000.35476!4 len:0 [4]
│                          → StrChunk ..0000.42657!1 len:0 [1]
│                        → StrChunk ..0000.27917!8 len:41 { "d among " }
│                          ← StrChunk ..0000.27903!12 len:22 { "e on Rust fa" }
│                            ← StrChunk ..0000.27891!10 len:10 { "\n### A not" }
│                          → StrChunk ..0000.27928!11 len:11 { "CRDT librar" }
│              → StrChunk ..0000.29376!1 len:1680 { "[" }
│                ← StrChunk ..0000.29109!1 len:789 { "`" }
│                  ← StrChunk ..0000.28228!78 len:526 { "It seems there is a pattern of J" … }
│                    ← StrChunk ..0000.28558!5 len:208 [5]
│                      ← StrChunk ..0000.27955!66 len:206 { ", we believe that Rust is a grea" … }
│                        ← StrChunk ..0000.27946!3 len:9 { "Fir" }
│                          ← StrChunk ..0000.27942!2 len:2 { "\n\n" }
│                            ← StrChunk ..0000.27939!3 len:0 [3]
│                          → StrChunk ..0000.28555!2 len:4 { "ly" }
│                            ← StrChunk ..0000.27951!2 len:2 { "st" }
│                        → StrChunk ..0000.28574!102 len:131 { "This comment is not about the Ru" … }
│                          ← StrChunk ..0000.28049!10 len:29 { "some day.\n" }
│                            ← StrChunk ..0000.28023!19 len:19 { "`json-joy` to Rust " }
│                          → StrChunk ..0000.28059!5 len:0 [5]
│                      → StrChunk ..0000.28088!44 len:2 [44]
│                        ← StrChunk ..0000.28064!3 len:0 [3]
│                          ← StrChunk ..0000.28563!2 len:0 [2]
│                            ← StrChunk ..0000.28567!3 len:0 [3]
│                          → StrChunk ..0000.28069!15 len:0 [15]
│                        → StrChunk ..0000.28158!1 len:2 { "\n" }
│                          ← StrChunk ..0000.28132!26 len:0 [26]
│                            ← StrChunk ..0000.28572!1 len:0 [1]
│                          → StrChunk ..0000.28163!1 len:1 { "\n" }
│                    → StrChunk ..0000.28707!1 len:240 { "s" }
│                      ← StrChunk ..0000.28462!1 len:139 { "e" }
│                        ← StrChunk ..0000.28340!25 len:95 { " here are the\nexamples:\n\n" }
│                          ← StrChunk ..0000.28306!4 len:4 { " and" }
│                            ← StrChunk ..0000.28676!27 len:0 [27]
│                          → StrChunk ..0000.28453!5 len:66 { "has r" }
│                            ← StrChunk ..0000.28368!61 len:61 { "- [Automerge][automerge] is a Ja" … }
│                        → StrChunk ..0000.28502!4 len:43 { ", wh" }
│                          ← StrChunk ..0000.30490!4 len:27 { " API" }
│                            ← StrChunk ..0000.28467!23 len:23 { "written its lower-level" }
│                          → StrChunk ..0000.28508!12 len:12 { "at it\n  call" }
│                      → StrChunk ..0000.29050!2 len:100 { "to" }
│                        ← StrChunk ..0000.29049!1 len:14 { "," }
│                          ← StrChunk ..0000.28531!3 len:10 { "nd\"" }
│                            ← StrChunk ..0000.28520!7 len:7 { " \"backe" }
│                          → StrChunk ..0000.28534!3 len:3 { " in" }
│                        → StrChunk ..0000.28732!38 len:84 { "nd is compiled into WebAssembly " … }
│                          ← StrChunk ..0000.28708!20 len:26 { " Now, the Rust backe" }
│                            ← StrChunk ..0000.28537!6 len:6 { " Rust." }
│                          → StrChunk ..0000.29052!20 len:20 { " and published as\n  " }
│                  → StrChunk ..0000.29205!22 len:262 { "ts document operations" }
│                    ← StrChunk ..0000.29120!3 len:131 [3]
│                      ← StrChunk ..0000.29116!4 len:68 { ", wh" }
│                        ← StrChunk ..0000.29111!1 len:34 { "`" }
│                          ← StrChunk ..0000.29073!25 len:25 { "@automerge/automerge-wasm" }
│                            ← StrChunk ..0000.29072!1 len:0 [1]
│                          → StrChunk ..0000.29099!8 len:8 { " package" }
│                            ← StrChunk ..0000.29098!1 len:0 [1]
│                        → StrChunk ..0000.29163!19 len:30 [19]
│                          ← StrChunk ..0000.29162!1 len:30 { "`" }
│                            ← StrChunk ..0000.29126!29 len:29 { "ich the `@automerge/automerge" }
│                          → StrChunk ..0000.29155!5 len:0 [5]
│                      → StrChunk ..0000.28787!8 len:63 { "\n  code " }
│                        ← StrChunk ..0000.28770!4 len:11 [4]
│                          ← StrChunk ..0000.29107!1 len:0 [1]
│                            ← StrChunk ..0000.29112!2 len:0 [2]
│                          → StrChunk ..0000.28774!11 len:11 { " JavaScript" }
│                        → StrChunk ..0000.28827!20 len:44 { " through WebAssembly" }
│                          ← StrChunk ..0000.28810!17 len:10 [17]
│                            ← StrChunk ..0000.28800!10 len:10 { "calls into" }
│                          → StrChunk ..0000.29189!14 len:14 { " ABI for all i" }
│                    → StrChunk ..0000.28953!48 len:109 { "Automerge is still 1,000x slower" … }
│                      ← StrChunk ..0000.28881!1 len:51 [1]
│                        ← StrChunk ..0000.28860!21 len:29 { ", as you can see from" }
│                          ← StrChunk ..0000.28847!5 len:5 { ". But" }
│                            ← StrChunk ..0000.29203!1 len:0 [1]
│                          → StrChunk ..0000.29228!3 len:3 { "\n  " }
│                        → StrChunk ..0000.28903!1 len:22 [1]
│                          ← StrChunk ..0000.29232!1 len:22 { " " }
│                            ← StrChunk ..0000.28882!21 len:21 { "the benchmarks above," }
│                          → StrChunk ..0000.28951!2 len:0 [2]
│                      → StrChunk ..0000.29042!1 len:10 { "\n" }
│                        ← StrChunk ..0000.29234!3 len:1 [3]
│                          ← StrChunk ..0000.29001!30 len:1 [30]
│                            ← StrChunk ..0000.30495!1 len:1 { "." }
│                          → StrChunk ..0000.29031!11 len:0 [11]
│                        → StrChunk ..0000.29048!1 len:8 { "Y" }
│                          ← StrChunk ..0000.29317!1 len:3 { "[" }
│                            ← StrChunk ..0000.29046!2 len:2 { "- " }
│                          → StrChunk ..0000.29318!4 len:4 { ".rs]" }
│                → StrChunk ..0000.30749!25 len:890 { "tive editing libraries. T" }
│                  ← StrChunk ..0000.29450!33 len:499 { " 100x slower than `json-joy` and" … }
│                    ← StrChunk ..0000.29383!4 len:119 { "Y.js" }
│                      ← StrChunk ..0000.30499!17 len:50 [17]
│                        ← StrChunk ..0000.29322!11 len:48 { " is a Rust " }
│                          ← StrChunk ..0000.29377!1 len:4 { "]" }
│                            ← StrChunk ..0000.29378!3 len:3 { "yrs" }
│                          → StrChunk ..0000.30517!12 len:33 { "CRDT library" }
│                            ← StrChunk ..0000.29337!21 len:21 { "port of a JavaScript " }
│                        → StrChunk ..0000.29375!1 len:2 { " " }
│                          ← StrChunk ..0000.29358!17 len:0 [17]
│                            ← StrChunk ..0000.30497!1 len:0 [1]
│                          → StrChunk ..0000.29381!1 len:1 { "[" }
│                      → StrChunk ..0000.29399!46 len:65 { "As you can see from the\n  benchm" … }
│                        ← StrChunk ..0000.29390!1 len:8 { "]" }
│                          ← StrChunk ..0000.29391!3 len:5 { "yrs" }
│                            ← StrChunk ..0000.29388!2 len:2 { "][" }
│                          → StrChunk ..0000.29394!2 len:2 { ". " }
│                        → StrChunk ..0000.29447!3 len:11 { " is" }
│                          ← StrChunk ..0000.29445!2 len:2 [2]
│                            ← StrChunk ..0000.29528!2 len:2 { "js" }
│                          → StrChunk ..0000.29530!6 len:6 { " about" }
│                    → StrChunk ..0000.29821!1 len:347 { "\n" }
│                      ← StrChunk ..0000.29733!87 len:177 { " through WebAssembly `ywasm` pac" … }
│                        ← StrChunk ..0000.29551!20 len:47 { "which is exposed to\n" }
│                          ← StrChunk ..0000.29694!1 len:15 { "(" }
│                            ← StrChunk ..0000.29537!14 len:14 { "the Rust port " }
│                          → StrChunk ..0000.29729!4 len:12 [4]
│                            ← StrChunk ..0000.29717!12 len:12 { "  JavaScript" }
│                        → StrChunk ..0000.30569!1 len:43 [1]
│                          ← StrChunk ..0000.30571!6 len:43 { "-joy`." }
│                            ← StrChunk ..0000.30532!37 len:37 { ",\n  also about 100x slower than " … }
│                          → StrChunk ..0000.29820!1 len:0 [1]
│                      → StrChunk ..0000.30633!4 len:169 { "CRDT" }
│                        ← StrChunk ..0000.30604!29 len:77 { "intends to implement various " }
│                          ← StrChunk ..0000.30578!24 len:42 { "is a Rust library which " }
│                            ← StrChunk ..0000.29825!18 len:18 { "- `diamond-types` " }
│                          → StrChunk ..0000.30638!6 len:6 { "novel " }
│                        → StrChunk ..0000.30700!1 len:88 { "a" }
│                          ← StrChunk ..0000.30665!31 len:49 { "\n  written by Seph Gentle, the " }
│                            ← StrChunk ..0000.30645!18 len:18 { " algorithms. It is" }
│                          → StrChunk ..0000.30705!38 len:38 { "uthor of numerous JavaScript col" … }
│                  → StrChunk ..0000.30663!1 len:366 [1]
│                    ← StrChunk ..0000.30904!1 len:151 [1]
│                      ← StrChunk ..0000.30906!11 len:151 { " from\n  the" }
│                        ← StrChunk ..0000.30802!28 len:106 { "  is chosen in search of per" }
│                          ← StrChunk ..0000.30791!5 len:8 { "Rust\n" }
│                            ← StrChunk ..0000.30782!3 len:3 { "he " }
│                          → StrChunk ..0000.30881!23 len:70 { "through WebAssembly ABI" }
│                            ← StrChunk ..0000.30832!47 len:47 { "formance, the library is exposed" … }
│                        → StrChunk ..0000.30941!3 len:34 [3]
│                          ← StrChunk ..0000.30947!12 len:34 { "NPM package." }
│                            ← StrChunk ..0000.30919!22 len:22 { " `diamond-types-node` " }
│                          → StrChunk ..0000.30917!1 len:0 [1]
│                      → StrChunk ..0000.30785!3 len:0 [3]
│                        ← StrChunk ..0000.30800!1 len:0 [1]
│                          ← StrChunk ..0000.30830!1 len:0 [1]
│                            ← StrChunk ..0000.30879!1 len:0 [1]
│                          → StrChunk ..0000.30796!3 len:0 [3]
│                        → StrChunk ..0000.30701!2 len:0 [2]
│                          ← StrChunk ..0000.30743!3 len:0 [3]
│                            ← StrChunk ..0000.30774!4 len:0 [4]
│                          → StrChunk ..0000.30696!2 len:0 [2]
│                    → StrChunk ..0000.29996!1 len:215 [1]
│                      ← StrChunk ..0000.29893!78 len:83 { "As a rule of thumb, an equivalen" … }
│                        ← StrChunk ..0000.29843!3 len:2 [3]
│                          ← StrChunk ..0000.30602!1 len:0 [1]
│                            ← StrChunk ..0000.30637!1 len:0 [1]
│                          → StrChunk ..0000.29846!2 len:2 { "\n\n" }
│                        → StrChunk ..0000.29993!1 len:3 { "-" }
│                          ← StrChunk ..0000.29992!1 len:1 [1]
│                            ← StrChunk ..0000.30103!1 len:1 { "2" }
│                          → StrChunk ..0000.30105!1 len:1 { "5" }
│                      → StrChunk ..0000.30106!24 len:132 { "However, when compiling " }
│                        ← StrChunk ..0000.29973!17 len:60 { "x faster than the" }
│                          ← StrChunk ..0000.29971!2 len:0 [2]
│                            ← StrChunk ..0000.29994!1 len:0 [1]
│                          → StrChunk ..0000.29997!43 len:43 { "\nsame algorithm implemented in J" … }
│                        → StrChunk ..0000.30186!4 len:48 { "-4x " }
│                          ← StrChunk ..0000.30166!16 len:37 { "it loses about\n3" }
│                            ← StrChunk ..0000.30132!21 len:21 { "Rust to WebAssembly, " }
│                          → StrChunk ..0000.30192!7 len:7 { "of its " }
│            → StrChunk ..0000.27049!8 len:1966 [8]
│              ← StrChunk ..0000.31057!1 len:880 [1]
│                ← StrChunk ..0000.31771!32 len:880 { "`@automerge/automerge-wasm` - 1." }
│                  ← StrChunk ..0000.31433!79 len:611 { "modules result in larger bundle " … }
│                    ← StrChunk ..0000.31284!26 len:377 { "limit\nthe data structures " }
│                      ← StrChunk ..0000.30438!8 len:269 { "peed as " }
│                        ← StrChunk ..0000.30305!1 len:137 [1]
│                          ← StrChunk ..0000.30290!13 len:13 { ". So, net-net" }
│                            ← StrChunk ..0000.30199!5 len:0 [5]
│                          → StrChunk ..0000.30316!118 len:124 { "ported from JavaScript to Rust a" … }
│                            ← StrChunk ..0000.30306!6 len:6 { " code " }
│                        → StrChunk ..0000.31099!1 len:124 { "\n" }
│                          ← StrChunk ..0000.30972!1 len:30 { "\n" }
│                            ← StrChunk ..0000.30450!29 len:29 { "the original JavaScript code." }
│                          → StrChunk ..0000.31185!93 len:93 { "However, packaging code into Web" … }
│                      → StrChunk ..0000.31376!8 len:82 { "Secondly" }
│                        ← StrChunk ..0000.31743!2 len:60 { "\n\n" }
│                          ← StrChunk ..0000.31339!36 len:58 { "the JavaScript and WebAssembly c" … }
│                            ← StrChunk ..0000.31315!22 len:22 { "one can share between " }
│                          → StrChunk ..0000.31375!1 len:0 [1]
│                        → StrChunk ..0000.31747!1 len:14 { " " }
│                          ← StrChunk ..0000.31412!4 len:13 { "mbly" }
│                            ← StrChunk ..0000.31399!9 len:9 { ", WebAsse" }
│                          → StrChunk ..0000.31416!1 len:0 [1]
│                    → StrChunk ..0000.31810!1 len:155 { " " }
│                      ← StrChunk ..0000.31600!1 len:63 [1]
│                        ← StrChunk ..0000.31563!1 len:25 { "W" }
│                          ← StrChunk ..0000.31536!1 len:1 [1]
│                            ← StrChunk ..0000.31749!1 len:1 { "\n" }
│                          → StrChunk ..0000.31751!1 len:23 { " " }
│                            ← StrChunk ..0000.31578!22 len:22 { "ASM modules can easily" }
│                        → StrChunk ..0000.31612!5 len:38 { "KB in" }
│                          ← StrChunk ..0000.31809!1 len:10 { " " }
│                            ← StrChunk ..0000.31601!9 len:9 { "reach 100" }
│                          → StrChunk ..0000.31625!23 len:23 { " size, sometimes even 1" }
│                      → StrChunk ..0000.31695!20 len:91 { "WASM modules for the" }
│                        ← StrChunk ..0000.31753!1 len:42 { "\n" }
│                          ← StrChunk ..0000.31671!23 len:41 { "real-world sizes of the" }
│                            ← StrChunk ..0000.31648!18 len:18 { "MB. Below are the " }
│                          → StrChunk ..0000.31694!1 len:0 [1]
│                        → StrChunk ..0000.31716!26 len:29 { "libraries mentioned above:" }
│                          ← StrChunk ..0000.31715!1 len:1 [1]
│                            ← StrChunk ..0000.31755!1 len:1 { " " }
│                          → StrChunk ..0000.31756!2 len:2 { "\n\n" }
│                  → StrChunk ..0000.31564!7 len:237 [7]
│                    ← StrChunk ..0000.32032!94 len:237 { "\n\n![Character merging into block" … }
│                      ← StrChunk ..0000.31969!41 len:133 { "blog/images/wasm-sizes/automerge" … }
│                        ← StrChunk ..0000.31804!2 len:75 { "MB" }
│                          ← StrChunk ..0000.31803!1 len:2 [1]
│                            ← StrChunk ..0000.31807!2 len:2 { "3 " }
│                          → StrChunk ..0000.31854!70 len:71 { "\n![Character merging into block]" … }
│                            ← StrChunk ..0000.31811!1 len:1 { "\n" }
│                        → StrChunk ..0000.32023!2 len:17 [2]
│                          ← StrChunk ..0000.32010!13 len:14 { "\n\n`ywasm` - 1" }
│                            ← StrChunk ..0000.32029!1 len:1 { ")" }
│                          → StrChunk ..0000.32025!3 len:3 { " MB" }
│                      → StrChunk ..0000.31812!42 len:10 [42]
│                        ← StrChunk ..0000.32136!9 len:10 { "wasm.png)" }
│                          ← StrChunk ..0000.32126!10 len:1 [10]
│                            ← StrChunk ..0000.32147!1 len:1 { "y" }
│                          → StrChunk ..0000.31924!42 len:0 [42]
│                        → StrChunk ..0000.31617!4 len:0 [4]
│                          ← StrChunk ..0000.31666!4 len:0 [4]
│                            ← StrChunk ..0000.31758!12 len:0 [12]
│                          → StrChunk ..0000.31610!1 len:0 [1]
│                    → StrChunk ..0000.31164!20 len:0 [20]
│                      ← StrChunk ..0000.31337!1 len:0 [1]
│                        ← StrChunk ..0000.31417!15 len:0 [15]
│                          ← StrChunk ..0000.31512!21 len:0 [21]
│                            ← StrChunk ..0000.31537!25 len:0 [25]
│                          → StrChunk ..0000.31384!13 len:0 [13]
│                            ← StrChunk ..0000.31408!2 len:0 [2]
│                        → StrChunk ..0000.31100!1 len:0 [1]
│                          ← StrChunk ..0000.31278!3 len:0 [3]
│                            ← StrChunk ..0000.31310!4 len:0 [4]
│                          → StrChunk ..0000.31103!43 len:0 [43]
│                      → StrChunk ..0000.31034!3 len:0 [3]
│                        ← StrChunk ..0000.30973!1 len:0 [1]
│                          ← StrChunk ..0000.31101!1 len:0 [1]
│                            ← StrChunk ..0000.31146!9 len:0 [9]
│                          → StrChunk ..0000.31007!21 len:0 [21]
│                        → StrChunk ..0000.31073!26 len:0 [26]
│                          ← StrChunk ..0000.31059!13 len:0 [13]
│                            ← StrChunk ..0000.31039!18 len:0 [18]
│                          → StrChunk ..0000.31072!1 len:0 [1]
│                → StrChunk ..0000.28527!2 len:0 [2]
│                  ← StrChunk ..0000.29578!11 len:0 [11]
│                    ← StrChunk ..0000.30303!1 len:0 [1]
│                      ← StrChunk ..0000.30978!3 len:0 [3]
│                        ← StrChunk ..0000.31028!2 len:0 [2]
│                          ← StrChunk ..0000.31032!1 len:0 [1]
│                            ← StrChunk ..0000.31037!1 len:0 [1]
│                          → StrChunk ..0000.30984!21 len:0 [21]
│                            ← StrChunk ..0000.30974!4 len:0 [4]
│                        → StrChunk ..0000.30434!2 len:0 [2]
│                          ← StrChunk ..0000.30446!3 len:0 [3]
│                            ← StrChunk ..0000.30479!8 len:0 [8]
│                          → StrChunk ..0000.30312!2 len:0 [2]
│                      → StrChunk ..0000.30130!1 len:0 [1]
│                        ← StrChunk ..0000.30182!2 len:0 [2]
│                          ← StrChunk ..0000.30190!1 len:0 [1]
│                            ← StrChunk ..0000.30204!85 len:0 [85]
│                          → StrChunk ..0000.30153!10 len:0 [10]
│                        → StrChunk ..0000.29822!2 len:0 [2]
│                          ← StrChunk ..0000.29848!44 len:0 [44]
│                            ← StrChunk ..0000.30040!61 len:0 [61]
│                          → StrChunk ..0000.29571!2 len:0 [2]
│                    → StrChunk ..0000.29335!1 len:0 [1]
│                      ← StrChunk ..0000.29609!64 len:0 [64]
│                        ← StrChunk ..0000.29678!15 len:0 [15]
│                          ← StrChunk ..0000.29589!20 len:0 [20]
│                            ← StrChunk ..0000.29674!4 len:0 [4]
│                          → StrChunk ..0000.29693!1 len:0 [1]
│                            ← StrChunk ..0000.29696!20 len:0 [20]
│                        → StrChunk ..0000.29396!2 len:0 [2]
│                          ← StrChunk ..0000.29483!43 len:0 [43]
│                            ← StrChunk ..0000.29573!4 len:0 [4]
│                          → StrChunk ..0000.29382!1 len:0 [1]
│                      → StrChunk ..0000.28926!3 len:0 [3]
│                        ← StrChunk ..0000.28904!22 len:0 [22]
│                          ← StrChunk ..0000.29043!2 len:0 [2]
│                            ← StrChunk ..0000.29333!1 len:0 [1]
│                          → StrChunk ..0000.28932!18 len:0 [18]
│                        → StrChunk ..0000.28785!1 len:0 [1]
│                          ← StrChunk ..0000.28795!4 len:0 [4]
│                            ← StrChunk ..0000.28852!4 len:0 [4]
│                          → StrChunk ..0000.28728!2 len:0 [2]
│                  → StrChunk ..0000.27944!1 len:0 [1]
│                    ← StrChunk ..0000.28226!1 len:0 [1]
│                      ← StrChunk ..0000.28365!2 len:0 [2]
│                        ← StrChunk ..0000.28463!2 len:0 [2]
│                          ← StrChunk ..0000.28490!9 len:0 [9]
│                            ← StrChunk ..0000.28506!1 len:0 [1]
│                          → StrChunk ..0000.28429!19 len:0 [19]
│                            ← StrChunk ..0000.28458!2 len:0 [2]
│                        → StrChunk ..0000.28215!11 len:0 [11]
│                          ← StrChunk ..0000.28164!31 len:0 [31]
│                            ← StrChunk ..0000.28310!15 len:0 [15]
│                          → StrChunk ..0000.28195!20 len:0 [20]
│                      → StrChunk ..0000.28046!2 len:0 [2]
│                        ← StrChunk ..0000.28067!1 len:0 [1]
│                          ← StrChunk ..0000.28084!3 len:0 [3]
│                            ← StrChunk ..0000.28159!2 len:0 [2]
│                          → StrChunk ..0000.28042!2 len:0 [2]
│                        → StrChunk ..0000.27953!1 len:0 [1]
│                          ← StrChunk ..0000.28021!1 len:0 [1]
│                            ← StrChunk ..0000.28044!1 len:0 [1]
│                          → StrChunk ..0000.27949!1 len:0 [1]
│                    → StrChunk ..0000.27760!1 len:0 [1]
│                      ← StrChunk ..0000.27871!4 len:0 [4]
│                        ← StrChunk ..0000.27901!1 len:0 [1]
│                          ← StrChunk ..0000.27915!1 len:0 [1]
│                            ← StrChunk ..0000.27925!2 len:0 [2]
│                          → StrChunk ..0000.27887!2 len:0 [2]
│                        → StrChunk ..0000.27761!9 len:0 [9]
│                          ← StrChunk ..0000.27759!1 len:0 [1]
│                            ← StrChunk ..0000.27735!22 len:0 [22]
│                          → StrChunk ..0000.27771!2 len:0 [2]
│                      → StrChunk ..0000.27365!1 len:0 [1]
│                        ← StrChunk ..0000.27637!3 len:0 [3]
│                          ← StrChunk ..0000.27697!7 len:0 [7]
│                            ← StrChunk ..0000.27757!1 len:0 [1]
│                          → StrChunk ..0000.27376!1 len:0 [1]
│                        → StrChunk ..0000.27133!2 len:0 [2]
│                          ← StrChunk ..0000.27312!1 len:0 [1]
│                            ← StrChunk ..0000.27346!1 len:0 [1]
│                          → StrChunk ..0000.27087!4 len:0 [4]
│              → StrChunk ..0000.42737!53 len:1086 { "]: https://github.com/josephg/ju" … }
│                ← StrChunk ..0000.32487!74 len:1033 { "]: https://www.sciencedirect.com" … }
│                  ← StrChunk ..0000.32262!5 len:158 { ".png)" }
│                    ← StrChunk ..0000.10559!1 len:143 { "\n" }
│                      ← StrChunk ..0000.26779!2 len:0 [2]
│                        ← StrChunk ..0000.27013!3 len:0 [3]
│                          ← StrChunk ..0000.27028!2 len:0 [2]
│                            ← StrChunk ..0000.27042!2 len:0 [2]
│                          → StrChunk ..0000.26819!4 len:0 [4]
│                            ← StrChunk ..0000.26841!1 len:0 [1]
│                        → StrChunk ..0000.26614!5 len:0 [5]
│                          ← StrChunk ..0000.26626!3 len:0 [3]
│                            ← StrChunk ..0000.26639!4 len:0 [4]
│                          → StrChunk ..0000.26600!7 len:0 [7]
│                      → StrChunk ..0000.32287!6 len:142 { "300 KB" }
│                        ← StrChunk ..0000.32150!5 len:24 [5]
│                          ← StrChunk ..0000.32268!18 len:20 { "diamond-types-node" }
│                            ← StrChunk ..0000.32148!2 len:2 { "\n`" }
│                          → StrChunk ..0000.32155!4 len:4 { "` - " }
│                        → StrChunk ..0000.32295!18 len:112 { "diamond-types-node" }
│                          ← StrChunk ..0000.32163!94 len:94 { "\n\n![Character merging into block" … }
│                            ← StrChunk ..0000.32159!4 len:0 [4]
│                          → StrChunk ..0000.32257!5 len:0 [5]
│                    → StrChunk ..0000.10241!1 len:10 [1]
│                      ← StrChunk ..0000.10330!1 len:5 [1]
│                        ← StrChunk ..0000.28705!2 len:5 { "\n\n" }
│                          ← StrChunk ..0000.31745!1 len:3 { "\n" }
│                            ← StrChunk ..0000.32313!2 len:2 { "\n\n" }
│                          → StrChunk ..0000.10461!1 len:0 [1]
│                            ← StrChunk ..0000.10464!1 len:0 [1]
│                        → StrChunk ..0000.10254!3 len:0 [3]
│                          ← StrChunk ..0000.10268!2 len:0 [2]
│                            ← StrChunk ..0000.10288!2 len:0 [2]
│                          → StrChunk ..0000.10248!1 len:0 [1]
│                      → StrChunk ..0000.32464!1 len:5 [1]
│                        ← StrChunk ..0000.32317!11 len:1 [11]
│                          ← StrChunk ..0000.32315!1 len:1 [1]
│                            ← StrChunk ..0000.10203!1 len:1 { "\n" }
│                          → StrChunk ..0000.32329!43 len:0 [43]
│                        → StrChunk ..0000.32481!1 len:4 { "[" }
│                          ← StrChunk ..0000.32480!1 len:0 [1]
│                            ← StrChunk ..0000.32372!91 len:0 [91]
│                          → StrChunk ..0000.32483!3 len:3 { "rga" }
│                  → StrChunk ..0000.27816!1 len:801 { "[" }
│                    ← StrChunk ..0000.19591!54 len:488 { "]: https://en.wikipedia.org/wiki" … }
│                      ← StrChunk ..0000.13257!4 len:250 { "high" }
│                        ← StrChunk ..0000.32316!1 len:149 [1]
│                          ← StrChunk ..0000.32482!1 len:147 [1]
│                            ← StrChunk ..0000.32568!147 len:147 { "\n[causal-tree]: https://www.rese" … }
│                          → StrChunk ..0000.13247!1 len:2 { "[" }
│                            ← StrChunk ..0000.10204!1 len:1 { "\n" }
│                        → StrChunk ..0000.19584!1 len:97 { "[" }
│                          ← StrChunk ..0000.13285!71 len:92 { "]: https://pages.lip6.fr/Marc.Sh" … }
│                            ← StrChunk ..0000.13263!21 len:21 { "-responsiveness-crdts" }
│                          → StrChunk ..0000.19586!4 len:4 { "rope" }
│                      → StrChunk ..0000.19645!1 len:184 { "\n" }
│                        ← StrChunk ..0000.27558!45 len:62 { "]: https://github.com/josephg/cr" … }
│                          ← StrChunk ..0000.27542!15 len:17 { "crdt-benchmarks" }
│                            ← StrChunk ..0000.27539!2 len:2 { "\n[" }
│                          → StrChunk ..0000.27541!1 len:0 [1]
│                        → StrChunk ..0000.27149!3 len:121 { "]: " }
│                          ← StrChunk ..0000.27140!8 len:9 { "datasets" }
│                            ← StrChunk ..0000.27138!1 len:1 { "[" }
│                          → StrChunk ..0000.27154!109 len:109 { "https://github.com/josephg/crdt-" … }
│                    → StrChunk ..0000.32837!45 len:312 { "]: https://github.com/josephg/vs" … }
│                      ← StrChunk ..0000.29245!37 len:140 { "]: https://github.com/y-crdt/y-c" … }
│                        ← StrChunk ..0000.29239!1 len:55 { "[" }
│                          ← StrChunk ..0000.27828!42 len:51 { "]: https://github.com/automerge/" … }
│                            ← StrChunk ..0000.27818!9 len:9 { "automerge" }
│                          → StrChunk ..0000.29241!3 len:3 { "yrs" }
│                        → StrChunk ..0000.32818!1 len:48 { "[" }
│                          ← StrChunk ..0000.29287!30 len:33 { "]: https://github.com/yjs/yjs\n" }
│                            ← StrChunk ..0000.29283!3 len:3 { "yjs" }
│                          → StrChunk ..0000.32822!14 len:14 { "vscode-tracker" }
│                      → StrChunk ..0000.42841!11 len:127 [11]
│                        ← StrChunk ..0000.33709!43 len:105 { "]: https://josephg.com/blog/crdt" … }
│                          ← StrChunk ..0000.33698!10 len:11 { "seph-blog1" }
│                            ← StrChunk ..0000.33696!1 len:1 { "[" }
│                          → StrChunk ..0000.42790!51 len:51 { "[jump-rope]: https://github.com/" … }
│                        → StrChunk ..0000.42727!9 len:22 { "jump-rope" }
│                          ← StrChunk ..0000.42725!1 len:2 { "[" }
│                            ← StrChunk ..0000.42852!1 len:1 { "\n" }
│                          → StrChunk ..0000.42854!11 len:11 { "-benchmarks" }
│                → StrChunk ..0000.5225!1 len:0 [1]
│                  ← StrChunk ..0000.9485!1 len:0 [1]
│                    ← StrChunk ..0000.19585!1 len:0 [1]
│                      ← StrChunk ..0000.29240!1 len:0 [1]
│                        ← StrChunk ..0000.32820!1 len:0 [1]
│                          ← StrChunk ..0000.33697!1 len:0 [1]
│                            ← StrChunk ..0000.42726!1 len:0 [1]
│                          → StrChunk ..0000.29282!1 len:0 [1]
│                            ← StrChunk ..0000.32819!1 len:0 [1]
│                        → StrChunk ..0000.27152!1 len:0 [1]
│                          ← StrChunk ..0000.27817!1 len:0 [1]
│                            ← StrChunk ..0000.29237!1 len:0 [1]
│                          → StrChunk ..0000.27139!1 len:0 [1]
│                      → StrChunk ..0000.10146!1 len:0 [1]
│                        ← StrChunk ..0000.13248!1 len:0 [1]
│                          ← StrChunk ..0000.13249!7 len:0 [7]
│                            ← StrChunk ..0000.13261!1 len:0 [1]
│                          → StrChunk ..0000.10122!20 len:0 [20]
│                        → StrChunk ..0000.9510!1 len:0 [1]
│                          ← StrChunk ..0000.9529!1 len:0 [1]
│                            ← StrChunk ..0000.10142!2 len:0 [2]
│                          → StrChunk ..0000.9501!1 len:0 [1]
│                    → StrChunk ..0000.8716!1 len:0 [1]
│                      ← StrChunk ..0000.8872!3 len:0 [3]
│                        ← StrChunk ..0000.8928!1 len:0 [1]
│                          ← StrChunk ..0000.9387!1 len:0 [1]
│                            ← StrChunk ..0000.9409!1 len:0 [1]
│                          → StrChunk ..0000.8860!10 len:0 [10]
│                            ← StrChunk ..0000.8916!1 len:0 [1]
│                        → StrChunk ..0000.8791!3 len:0 [3]
│                          ← StrChunk ..0000.8841!2 len:0 [2]
│                            ← StrChunk ..0000.8870!1 len:0 [1]
│                          → StrChunk ..0000.8719!21 len:0 [21]
│                      → StrChunk ..0000.6124!1 len:0 [1]
│                        ← StrChunk ..0000.6182!8 len:0 [8]
│                          ← StrChunk ..0000.6193!1 len:0 [1]
│                            ← StrChunk ..0000.8663!1 len:0 [1]
│                          → StrChunk ..0000.6134!1 len:0 [1]
│                        → StrChunk ..0000.5976!1 len:0 [1]
│                          ← StrChunk ..0000.6016!12 len:0 [12]
│                            ← StrChunk ..0000.6093!2 len:0 [2]
│                          → StrChunk ..0000.5817!1 len:0 [1]
│                  → StrChunk ..0000.1315!1 len:0 [1]
│                    ← StrChunk ..0000.3445!1 len:0 [1]
│                      ← StrChunk ..0000.3658!4 len:0 [4]
│                        ← StrChunk ..0000.5072!2 len:0 [2]
│                          ← StrChunk ..0000.5099!1 len:0 [1]
│                            ← StrChunk ..0000.5102!5 len:0 [5]
│                          → StrChunk ..0000.3681!1 len:0 [1]
│                            ← StrChunk ..0000.3706!3 len:0 [3]
│                        → StrChunk ..0000.3506!2 len:0 [2]
│                          ← StrChunk ..0000.3637!1 len:0 [1]
│                            ← StrChunk ..0000.3654!2 len:0 [2]
│                          → StrChunk ..0000.3481!9 len:0 [9]
│                      → StrChunk ..0000.1698!2 len:0 [2]
│                        ← StrChunk ..0000.2663!4 len:0 [4]
│                          ← StrChunk ..0000.3338!1 len:0 [1]
│                            ← StrChunk ..0000.3355!1 len:0 [1]
│                          → StrChunk ..0000.1709!1 len:0 [1]
│                        → StrChunk ..0000.1352!1 len:0 [1]
│                          ← StrChunk ..0000.1376!1 len:0 [1]
│                            ← StrChunk ..0000.1687!1 len:0 [1]
│                          → StrChunk ..0000.1317!1 len:0 [1]
│                    → StrChunk ..0000.302!1 len:0 [1]
│                      ← StrChunk ..0000.897!1 len:0 [1]
│                        ← StrChunk ..0000.1028!56 len:0 [56]
│                          ← StrChunk ..0000.1242!5 len:0 [5]
│                            ← StrChunk ..0000.1302!1 len:0 [1]
│                          → StrChunk ..0000.988!5 len:0 [5]
│                        → StrChunk ..0000.366!1 len:0 [1]
│                          ← StrChunk ..0000.527!1 len:0 [1]
│                            ← StrChunk ..0000.827!7 len:0 [7]
│                          → StrChunk ..0000.339!2 len:0 [2]
│                      → StrChunk ..0000.181!1 len:0 [1]
│                        ← StrChunk ..0000.204!1 len:0 [1]
│                          ← StrChunk ..0000.230!1 len:0 [1]
│                            ← StrChunk ..0000.296!1 len:0 [1]
│                          → StrChunk ..0000.174!1 len:0 [1]
│                        → StrChunk ..0000.49!1 len:0 [1]
│                          ← StrChunk ..0000.115!1 len:0 [1]
│                            ← StrChunk ..0000.175!3 len:0 [3]
│                          → StrChunk ..0000.13!1 len:0 [1]
│  
├─ Index (1 nodes)
│  └─ StrNode ..0000.1
│  
├─ View
│  └─ "# Introducing fast RGA implementation that will power JSON CRDTs\n\nFirst, a little note on JSON CRDT. JSON CRDT will be a specification and a JavaScript\nimplementation of JSON data type as a CRDT (Conflict-free Replicated Data Type). The\naim for JSON CRDT is to create a sound state-of-the-art CRDT specification which will\nsupport all JSON values, including lists, for which this RGA algorithm is needed.\n\nNow back to the RGA algorithm, what is that? RGA stands for [*Replicated Growable Array*][rga],\nalso known as CT ([*Causal Tree*][causal-tree]), sometimes you might find it abbreviated as CT/RGA. The\nCT/RGA algorithm, or RGA for short, allows to implement conflict free list data\nstructures, such as strings, binary blobs, or arrays (think JSON arrays).\n\nWhat is conflict-free, or CRDTs? Those are data types, which can be forked; then\ntwo or more peers can edit their copies independently and at any point in time all the\nforks can be merged back without conflicts. Also, forks can be merged in any order,\nwhich does not change the contents of the final document.\n\n\n## `json-joy` RGA implementation\n\nNow `json-joy` implements and advanced version of the RGA algorithm (we will take a look\nat it later what is advanced about it, but for now, just think about it as being very efficient\nand fast). Great news is that it is ready, and you can use it, lets see how it can be done.\n\nFirst, you will need to install the `json-joy` NPM package.\n\n```\nyarn add json-joy\n```\n\n`json-joy` implements an abstract version of the RGA algorithm in `AbstractRga` class, where\nelements can be of any type. But below we will take a look at application of it to a string\ndata type, which is implemented in the `StringRga` class.\n\nIn general, RGAs support two operations: (1) insert; and (2) delete. Lets see how to use those\nfor string editing.\n\nImport the `StringRga` class. Also, import the `ts` helper, which will allow us to create\n\"timestamps\" (aka *operation IDs*). All elements in RGA (and usually in all CRDTs, for that\nmatter) have a unique ID. We will need the `ts` helper to generate those IDs.\n\n```ts\nimport {StringRga} from 'json-joy/es2020/json-crdt/types/rga-string/StringRga';\nimport {ts} from 'json-joy/es2020/json-crdt-patch/clock';\n```\n\nDon't worry `StringRga` will not actually store an ID for every character, but more on that\nlater. IDs are 2-tuples of *Site ID* (aka *Process ID* or *Session ID*) and an ever\nincreasing sequence counter, i.e. \"time\"; essentially, and ID is a *Logical Timestamp*,\nwhere each user will have their own *Logical Clock*, and the collection nof all Logical Clocks\nof all users will for a *Vector Clock*.\n\nNow create the text CRDT data type, you will need to give it a unique ID:\n\n```ts\nconst sid = 123; // Site ID\nlet time = 0;  // \"time\"\n\nconst id = ts(sid, time++);\nconst str = new StringRga(id);\n```\n\nWe can see what is storied in our string using the `.view()` method, lets verify that\nit is empty:\n\n```ts\nconsole.log(str.view());\n// \"\"\n```\n\nWe can also print the internal state like so:\n\n```ts\nconsole.log(str + '');\n// StringRga 123.0 { \"\" }\n// └─ ∅\n```\n\nIt shows that the string has ID `123.0` and empty contents.\n\nNow lets insert somethign in to the string. A local insert can be performed using the\n`.insAt()` method.\n\n```ts\nlet content = 'Hell world!';\nstr.insAt(0, ts(sid, time), content);\ntime += content.length;\nconsole.log(str + '');\n// StringRga 123.0 { \"Hell world!\" }\n// └─ StringChunk 123.1!11 len:11 { \"Hell world!\" }\n```\n\nYou can see that a `StringChunk` was inserted, where `123.1!11` specifies the ID of\nthe first character of the chunk `123.1` and `!11` denotes the length of the chunk.\n\nLets perform another insert, to fix our text:\n\n```ts\ncontent = 'o,';\nstr.insAt(4, ts(sid, time), content);\ntime += content.length;\n\nconsole.log(str + '');\n// StringRga 123.0 { \"Hello, world!\" }\n// └─ StringChunk 123.12!2 len:13 { \"o,\" }\n//    ← StringChunk 123.1!4 len:4 { \"Hell\" }\n//    → StringChunk 123.5!7 len:7 { \" world!\" }\n\nconsole.log(str.view());\n// Hello, world!\n```\n\nYou can see we fixed the text to be `Hello, world!`, now you might also notice that\nthe string now has three `StringChunk` nodes arranged in a binary tree, where `←`\nand `→` represent the left and right children. More on that later, but that is the\nsecret source which makes the `json-joy` RGA implementation really fast: the text\nchunks follow what is known in academia *block-wise* storage, where chunks of text\nare stored in blocks with a small metadata piece allocated for each block, instead of\nstoring each character separately, with metadata allocated for each character. And\nbinary tree represents a custom [rope-like][rope] data structure, specifically\ndesigned for the RGA algorithm.\n\n[rope]: https://en.wikipedia.org/wiki/Rope_(data_structure)\n\nAll of this might sound overwhelming, but that is expected, you will not need to\nknow or use any of this; this is the lower-level (under-the-hood-workings) that will\npower the JSON CRDT implementation, for you&mdash;as a developer&mdash;it will be exposed\nin a nicely packaged API where you don't need to know anything about the inner workings\nof the CRDT algorithms.\n\nFor the sake of completeness, lets briefly take a look at other public methods that\nthe `StringRga` class exposes. Above I mentioned that RGA usually supports two operations;\ninsert and delete. That is true, but actually, in CRDTs, those are usually sub-divided\ninto *remote* and *local* operations. So, essentially `StringRga` supports four\nmain operations: (1) remote insert; (2) remote delete; (3) local insert; and (4) local\ndelete.\n\nWhat are those local vs remote operations? Local operations are the ones that user\nperforms on their machine, where operations contain the offset position in the text,\nfor example:\n\n- `insertAt(position, text)`\n- `deleteAt(position, length)`\n\nRemote operations are the ones received from other peers, and those don't reference the\nposition in text, instead they reference one or more IDs of the CRDT after which to\nperform the operation, for example:\n\n- `insert(afterId, text)`\n- `delete(...ids)`\n\nWe have already seen the local insert operation of the `StringRga`, it was `.insAt()`.\nNow lets take a look at the remote insert operation `.ins()`. It works similar to\n`.insAt()`, but instead of the insertion position, we will need to specify the ID of\nthe character after which we want to apply our insert.\n\nConsider we have three users: User 1 will create a new string `\"js\"`, then they will\nfork it and send the that string to two other users: (1) User 2 will insert `\"on\"` at\nthe end of it; (2) User 3 will concurrently (at the same time) insert `\" joy\"` at the\nsame position. Regardless in which order we apply the two remote operations of\nUser 2 and User 3, we will receive the same final result.\n\nLets create a new string `str1` with contents `\"js\"`, we will use the local `.insAt()`\nmethod to do that:\n\n```ts\nconst user1 = 123;\nconst user2 = 345;\nconst user3 = 789;\n\n// User 1 creates a new string\nconst str1 = new StringRga(ts(user1, 0));\nstr1.insAt(0, ts(user1, 1), 'js');\n```\n\nNothing new here, just one thing to note that the IDs of characters `j` and `s` will\nbe `123.1` and `123.2`, respectively. (And ID of the string is `123.0`.)\n\nNow imagine that this string was sent to two other users, who concurrently appended\n`\" joy\"` and `\"on\"` to it. Then those users would send their operations back to\nuser 1, which will use the remote `.ins()` method to apply those operations, lets\ndo that:\n\n```ts\n// User 2 and 3 insert their changes at the same time \"ts(user1, 2)\"\nstr1.ins(ts(user1, 2), ts(user2, 3), ' joy');\nstr1.ins(ts(user1, 2), ts(user3, 3), 'on');\n\nconsole.log(str1 + '');\n// StringRga 123.0 { \"json joy\" }\n// └─ StringChunk 789.3!2 len:8 { \"on\" }\n//    ← StringChunk 123.1!2 len:2 { \"js\" }\n//    → StringChunk 345.3!4 len:4 { \" joy\" }\n```\n\nThe final string is `\"json joy\"`. You can see that `.ins()` first inserted `\" joy\"`\nand then `\"on\"`, lets try to reverse the order and see if we still get the same\nresult:\n\n```ts\n// User 1 creates a new string \"js\"\nconst str2 = new StringRga(ts(user1, 0));\nstr2.insAt(0, ts(user1, 1), 'js');\n\n// User 2 and 3 insert their changes at the same time \"ts(user1, 2)\"\nstr2.ins(ts(user1, 2), ts(user3, 3), 'on');\nstr2.ins(ts(user1, 2), ts(user2, 3), ' joy');\n\nconsole.log(str2 + '');\n// StringRga 123.0 { \"json joy\" }\n// └─ StringChunk 345.3!4 len:8 { \" joy\" }\n//    ← StringChunk 789.3!2 len:4 { \"on\" }\n//      ← StringChunk 123.1!2 len:2 { \"js\" }\n```\n\nAgain, we get the `\"json joy\"` final result. The reason that results are the same\nin both cases is because we use the unique character IDs to order the inserts.\nUser 3 has site ID `789`, but user User 2 has `345`, hence for conflict\nconcurrent inserts User 3's inserts will appear to the left of User 2's inserts.\nNo magic here, that is just how CT/RGA algorithm is specified.\n\n\n## The Block-wise CT/RGA-Split Splay Rope with Identifier Table\n\nThe `json-joy` RGA implementation is very fast, we will see that in the next section.\nBut in this section we will take a look at the data structure that powers the\n`StringRga` class. The `StringRga` class is fast because it uses a custom\nstate-of-the-art data structure that is specifically designed for the\nRGA algorithm. It implements what can be describe as\n*Block-wise CT/RGA-Split Rope with Identifier Table* algorithm. It is\na mouthful, but the purpose of this section is to decipher it for the reader.\n\n- **Block-wise** means that the text is stored in blocks (`StringChunk` in `json-joy`),\n  where each block contains a small metadata piece, instead of storing each character\n  separately, with metadata allocated for each character. This is a well known technique\n  in academia, however, it is not commonly used in practice, because it is\n  difficult to implement. The canonical RGA algorithm is just a linked list of\n  single characters, which is very easy to implement, but it is not efficient.\n  Block-wise representation is more efficient, but it is more difficult to implement,\n  as implicitly each character still has a unique ID and can be referenced by that ID.\n  So, the blocks can be split and merged, which requires a lot of bookkeeping.\n- **CT/RGA** simply means that the base algorithm is *Causal Trees/Replicated Growable Array*.\n  This is currently the best known algorithm for list (strings, arrays) CRDTs, it\n  has formal proofs of correctness, it is efficient, and is probably most cited\n  list CRDT algorithm in academic papers.\n- **Split** refers to the optimization described in the\n  [*\"High Responsiveness for Group Editing CRDTs\"* (Briot et al., 2006) paper][high-responsiveness-crdts],\n  a \"split link\" is stored to the the other part of the block that was split. This allows\n  to perform search and delete operations on blocks more efficiently, when the block was\n  split.\n- **Splay Rope** means that the RGA blocks are stored in a rope-like binary splay tree.\n  Unlike the canonical RGA algorithm, where the blocks are stored in a linked list.\n  This allows for faster than `O(log n)` lookups of text by position.\n- **Identifier Table** is another splay tree, which stores the mapping of character IDs\n  to the blocks. This allows to perform lookups of characters by ID in less than\n  `O(log n)` time.\n\nA novelty of the `json-joy` implementation is that it uses Splay trees for both\nthe Chunk Rope and the Identifier Table. In practice this results into a very fast\ntree traversals, because the trees are splayed on every insert, which results into\n*likely* faster than `O(log n)` access time, for all operations, as users usually:\n(1) type multiple characters at the same position (for the Text Rope); and\n(2) reference the most recent IDs (for the Identifier Table). When the trees are\nun-serialized from storage, they can be balanced, which results into *exactly*\n`O(log n)` complexity, for all operations for freshly hydrated trees (say, when\nopening the document from a file).\n\nThere are many more minor optimizations that make `json-joy` fast, but another one\nworth mentioning is the insert in the middle of the block situation described in\n[(Briot et al., 2006)][high-responsiveness-crdts], which results\ninto two block splits. The insert is performed such that the new block is rotated\nto the top, while the other two blocks are rotated to the bottom.\n\n![insert-into-middle-of-block](https://streamich.github.io/json-joy/blog/images/blockwise-middle-split.png)\n\nLets look at an example of how this all works together.\n\n\n### Block-wise CT/RGA-Split Rope with Identifier Table Example\n\nThis will be a simple example, which showcases a single insert. We will start with\na string `\"GG WP\"` and insert `\"OOD \"` in the middle of it. The final string will\nbe `\"GOOD G WP\"`.\n\nStrings are represented by the RGA algorithm, so the simplest way of thinking about\nit is to imagine the starting string as a linked list of characters, where each\ncharacter has a unique ID.\n\n![RGA string](https://streamich.github.io/json-joy/blog/images/blogpost-001/rga-string.png)\n\nA collaborative editing expert will notice that:\n\n- At least two users `a` and `c` have edited the string.\n  - User `a` inserted `\"GGWP\"`.\n  - User `c` inserted the space `\" \"`.\n- Also, the `a.3` and `c.3` edits were made concurrently, which means that user `a`\n  inserted `\"WP\"` and user `c` inserted `\" \"` at the same time.\n\nThose are not important trivia, now lets look at the same string, but represented\nas a Block-wise RGA. In Block-wise RGA we don't waste memory on storing each\ncharacter separately, instead we store the characters in blocks. Each block has\na unique ID, which is the ID of the first character in the block. The blocks are\nlinked together in a linked list.\n\n![Single character vs block-wise representation](https://streamich.github.io/json-joy/blog/images/blogpost-001/single-char-vs-blockwise.png)\n\nEach character still has a unique ID, it is just the memory is not used to store\nmetadata about characters `a.2` and `a.4`.\n\nWe will insert another block in the middle of an existing block, which will result\ninto a block split. The `\"OOD \"` block with ID `d.5` will be inserted in between the two\n`\"G\"` characters. (Note that `d` means that it is yet another user, and each character in\nthe `d.5` block still implicitly has an ID, which are `d.5`, `d.6`, `d.7`, `d.8`.)\n\n![Block insert](https://streamich.github.io/json-joy/blog/images/blogpost-001/block-insert.png)\n\nBlock-wise representation is our first optimization, lets look at the second one.\nThe second important optimization is that we don't store the blocks in a linked\nlist, instead we store them in a binary tree, or more specifically in a [Rope][rope].\nSo, a little more precisely, the situation could look like this:\n\n![Text Rope tree](https://streamich.github.io/json-joy/blog/images/blogpost-001/text-rope-tree.png)\n\nNote, in the tree we see that there are two tombstones `b.1` and `b.2`, which means\nit used to be text which was inserted concurrently with `a.1`, but was deleted. Also, there\nis a *split link\" between the `b.1` and `b.2` blocks, which means that the `a.1` block was\ninserted in the middle of the `b.1` block, before `b.1` and `b.2` were deleted. The fact\nthat `b` nodes are deleted now is not important, but it is important to note that we keep\ntrack of split links, which allow for faster traversal of the tree.\n\nNow that we know the general setup, lets look at the actual insert, through a series\nof a three step process. First, we need to split the `\"GG\"` block, which is done by\ninserting a new block with ID `a2`.\n\n![Insert step 1](https://streamich.github.io/json-joy/blog/images/blogpost-001/insert-step-1.png)\n\nIn the process a new split link `s3` is created, this will allow for faster traversal, for example,\nwhen somebody will want to delete both `\"GG\"` characters, we will not need to traverse the\nwhole tree to find the second `\"G\"` character, we will just follow the split link `s3` to\nthe second `\"G\"` character. Also, note that when serializing the tree, we can remove all the\nsplit links, because we can reconstruct them on the fly, when de-serializing the tree.\n\nSecond, we need to insert the `\"OOD \"` block, which is done by inserting a new block with\nthe ID `d.5`.\n\n![Insert step 2](https://streamich.github.io/json-joy/blog/images/blogpost-001/insert-step-2.png)\n\nFinally, we perform rotations such that the new block `d.5` is rotated to the top, while\nthe `a.1` and `a.2` blocks are rotated to the bottom.\n\n![Insert step 3](https://streamich.github.io/json-joy/blog/images/blogpost-001/insert-step-3.png)\n\nNow the example above is a bit simplified, because in reality we have two trees, one for\nthe Text Rope and one for the Identifier Table. Actually, for optimization purposes the same\nnodes are used in both trees, so the trees are not separate, but rather they are different\nsorted views of the same data, but that is an implementation detail. The important thing is\nthat we have two trees, one for the Text Rope and one for the Identifier Table, and here is\nhow both trees conceptually look like:\n\n![Example with Identifier Table](https://streamich.github.io/json-joy/blog/images/blogpost-001/with-identifier-table.png)\n\nNote that in both trees the newly inserted blocks are rotated to the top of the trees, which\nfor typical user interactions is a good thing. Users type sequentially whole sentences at a time.\nRotating recently accessed content to the top often leads to less then `O(log n)` insertion time\nfor the next character, because the next character is likely to be inserted in the same block\nas the previous character, which is already at the top of the tree.\n\nAnd this leads to the final optimization that I will mention: merging blocks. When a user\ntypes a whole word, or a sentence, or a paragraph sequentially, we do not create a new block\nfor each character. Instead, a new block is created only when user changes the cursor position.\nSo, if a user types a whole word, or a sentence, or a paragraph sequentially, we will create\na single block for the whole word, or sentence, or paragraph. This is done by merging the\nblocks with adjacent IDs.\n\n![Character merging into block](https://streamich.github.io/json-joy/blog/images/blogpost-001/char-merging.png)\n\n\n## Benchmarks\n\nIn this section we will benchmark `json-joy` implementation of `StringRga` against other\nlibraries. For that, lets first take a look at the datasets wi will use for benchmarking.\n\n\n### Datasets\n\nThere will be no micro benchmarks, only real world large text documents will be tested. Five\nrealistic relatively long text documents will be used.\n\n- The first one is the editing trace of this blog post, yes, the one you are reading now! It is\n  called `json-joy-crdt`, the trace contains all inserts and deletes made to type this blog\n  post. The trace was collected using the [`vscode-tracker`][vscode-tracker] VS Code extension.\n- The other four traces are taken from the [CRDT benchmarks][crdt-benchmarks] repository, see this\n  [description and license information](https://github.com/josephg/crdt-benchmarks/blob/7b0b90e912cfa88aff8c6336917343ee08653e51/README.md#data-sets).\n  - The first trace is the canonical `automerge-paper` trace, made by Martin Kleppmann, the author\n    of the [Automerge][automerge] library. The editing trace was collected while writing the\n    [\"A Conflict-Free Replicated JSON Datatype\" paper](https://arxiv.org/abs/1608.03960). It\n    contains 259,778 single character insert/delete operations, with the final document size\n    of 104,852 bytes, which results in 12,387 `json-joy` RGA blocks in the tree.\n  - The second one is `seph-blog1` trace, which is a trace by Seph Gentle collected while writing\n    the [\"5000x faster CRDTs: An Adventure in Optimization\"][seph-blog1] blog post. The trace contains\n    137,154 insert/delete operations, with the final document size of 56,769 bytes, which results\n    in 18,222 `json-joy` RGA blocks in the tree.\n  - The third one is `rustcode`. It contains 36,981\n    insert/delete operations, with the final document size of 65,218 bytes, which results in\n    12,505 `json-joy` RGA blocks in the tree.\n  - The last one is `sveltecomponent`, it contains 18,335 insert/delete operations, with the\n    final document size of 18,451 bytes, which results in 5,813 `json-joy` RGA blocks in\n    the tree.\n\nEach dataset contains a list of insert or delete operations, each operations specifies the position\nin the document and whether text needs to be inserted or deleted at that position.\n\nHere is the sample of the first operations of the `automerge-paper` editing trace:\n\n```js\n[\n  [ 0, 0, '\\\\' ],  [ 1, 0, 'd' ],   [ 2, 0, 'o' ],   [ 3, 0, 'c' ],\n  [ 4, 0, 'u' ],   [ 5, 0, 'm' ],   [ 6, 0, 'e' ],   [ 7, 0, 'n' ],\n  [ 8, 0, 't' ],   [ 9, 0, 'c' ],   [ 10, 0, 'l' ],  [ 11, 0, 'a' ],\n  [ 12, 0, 's' ],  [ 13, 0, 's' ],  [ 14, 0, '[' ],  [ 15, 0, 'a' ],\n  [ 16, 0, '4' ],  [ 17, 0, 'p' ],  [ 18, 0, 'a' ],  [ 19, 0, 'p' ],\n  [ 20, 0, 'e' ],  [ 21, 0, 'r' ],  [ 22, 0, ',' ],  [ 23, 0, 't' ],\n  [ 24, 0, 'w' ],  [ 25, 0, 'o' ],  [ 26, 0, 'c' ],  [ 27, 0, 'o' ],\n  [ 28, 0, 'l' ],  [ 29, 0, 'u' ],  [ 30, 0, 'm' ],  [ 31, 0, 'n' ],\n  [ 32, 0, ',' ],  [ 33, 0, '1' ],  [ 34, 0, '0' ],  [ 35, 0, 'p' ],\n  [ 36, 0, 't' ],  [ 37, 0, ']' ],  [ 38, 0, '{' ],  [ 39, 0, 'a' ],\n  [ 40, 0, 'r' ],  [ 41, 0, 't' ],  [ 42, 0, 'i' ],  [ 43, 0, 'c' ],\n  [ 44, 0, 'l' ],  [ 45, 0, 'e' ],  [ 46, 0, '}' ],  [ 47, 0, '\\n' ],\n  [ 48, 0, '\\\\' ], [ 49, 0, 'u' ],  [ 50, 0, 's' ],  [ 51, 0, 'e' ],\n  [ 52, 0, 'p' ],  [ 53, 0, 'a' ],  [ 54, 0, 'c' ],  [ 55, 0, 'k' ],\n  [ 56, 0, 'a' ],  [ 57, 0, 'g' ],  [ 58, 0, 'e' ],  [ 59, 0, '{' ],\n  [ 59, 1, '' ],   [ 59, 0, '[' ],  [ 60, 0, 'u' ],  [ 61, 0, 't' ],\n  [ 62, 0, 'f' ],  [ 63, 0, '8' ],  [ 64, 0, ']' ],  [ 65, 0, '{' ],\n  [ 66, 0, 'i' ],  [ 67, 0, 'n' ],  [ 68, 0, 'p' ],  [ 69, 0, 'u' ],\n  [ 70, 0, 't' ],  [ 71, 0, 'e' ],  [ 72, 0, 'n' ],  [ 73, 0, 'c' ],\n  [ 74, 0, '}' ],  [ 75, 0, '\\n' ], [ 76, 0, '\\\\' ], [ 77, 0, 'u' ],\n  [ 78, 0, 's' ],  [ 79, 0, 'e' ],  [ 80, 0, 'p' ],  [ 81, 0, 'a' ],\n  [ 82, 0, 'c' ],  [ 83, 0, 'k' ],  [ 84, 0, 'a' ],  [ 85, 0, 'g' ],\n  [ 86, 0, 'e' ],  [ 87, 0, '{' ],  [ 88, 0, 'm' ],  [ 89, 0, 'a' ],\n  [ 90, 0, 't' ],  [ 91, 0, 'h' ],  [ 92, 0, 'p' ],  [ 93, 0, 't' ],\n  [ 94, 0, 'm' ],  [ 95, 0, 'x' ],  [ 96, 0, '}' ],  [ 97, 0, ' ' ],\n```\n\nEach operation is a 3-tuple which contains: (1) the position in the document; (2) the length of\nthe text to be deleted; and (3) the text to be inserted at that position.\n\n\n### Benchmarks against CRDT libraries\n\nFirst we will benchmark `json-joy` against a peer group of other CRDT libraries:\n\n- [Automerge][automerge] is probably the best known RGA algorithm implementation in JavaScript.\n- [Y.js][yjs] is the most widely used JavaScript CRDT library, which implements YATA algorithm.\n- [Y.rs][yrs] is a port of Y.js to Rust. We use the `ywasm` package, which is a WebAssembly\n  module compiled from its Rust code.\n\nBelow is a sample output of running the benchmarks, numbers are in milliseconds it took to\nexecute the full trace:\n\n\n```\n============================================================================\nEditing trace: \"sveltecomponent\" , Transactions: 18335 , End length: 18451\n----------------------------------------------------------------------------\nAutomerge\n#1: 7325.6\n#2: 7281\n#3: 7286.3\nCorrect: false Length: 18451 Chunks: 0\nBest: 7281 Worst: 7325.6 Average: 7297.6 Tx/sec: 2,512\n----------------------------------------------------------------------------\nY.js\n#1: 381.2\n#2: 358.6\n#3: 360.1\nCorrect: true Length: 18451 Chunks: 4627\nBest: 358.6 Worst: 381.2 Average: 366.6 Tx/sec: 50,008\n----------------------------------------------------------------------------\nY.rs\n#1: 272.5\n#2: 256.6\n#3: 255.9\nCorrect: true Length: 18451 Chunks: 0\nBest: 255.9 Worst: 272.5 Average: 261.7 Tx/sec: 70,071\n----------------------------------------------------------------------------\nStringRga (json-joy)\n#1: 19.1\n#2: 8.1\n#3: 6.2\nCorrect: true Length: 18451 Chunks: 5813\nBest: 6.2 Worst: 19.1 Average: 11.1 Tx/sec: 1,650,406\n\n\n============================================================================\nEditing trace: \"seph-blog1\" , Transactions: 137154 , End length: 56769\n----------------------------------------------------------------------------\nAutomerge\n#1: 20531.4\n#2: 22141.3\n#3: 20786.2\nCorrect: false Length: 56769 Chunks: 0\nBest: 20531.4 Worst: 22141.3 Average: 21153 Tx/sec: 6,484\n----------------------------------------------------------------------------\nY.js\n#1: 2661\n#2: 2664.9\n#3: 2652.8\nCorrect: true Length: 56769 Chunks: 15092\nBest: 2652.8 Worst: 2664.9 Average: 2659.5 Tx/sec: 51,571\n----------------------------------------------------------------------------\nY.rs\n#1: 4534.2\n#2: 4411.7\n#3: 4488.2\nCorrect: false Length: 56777 Chunks: 0\nBest: 4411.7 Worst: 4534.2 Average: 4478.1 Tx/sec: 30,628\n----------------------------------------------------------------------------\nStringRga (json-joy)\n#1: 23.7\n#2: 24.8\n#3: 22.9\nCorrect: true Length: 56769 Chunks: 18222\nBest: 22.9 Worst: 24.8 Average: 23.8 Tx/sec: 5,763,130\n\n\n============================================================================\nEditing trace: \"rustcode\" , Transactions: 36981 , End length: 65218\n----------------------------------------------------------------------------\nY.js\n#1: 720\n#2: 717.4\n#3: 710.7\nCorrect: true Length: 65218 Chunks: 10044\nBest: 710.7 Worst: 720 Average: 716 Tx/sec: 51,647\n----------------------------------------------------------------------------\nY.rs\n#1: 856.8\n#2: 862.2\n#3: 857.9\nCorrect: false Length: 65235 Chunks: 0\nBest: 856.8 Worst: 862.2 Average: 859 Tx/sec: 43,053\n----------------------------------------------------------------------------\nStringRga (json-joy)\n#1: 19.4\n#2: 17.9\n#3: 12.5\nCorrect: true Length: 65218 Chunks: 12505\nBest: 12.5 Worst: 19.4 Average: 16.6 Tx/sec: 2,225,405\n\n\n============================================================================\nEditing trace: \"automerge-paper\" , Transactions: 259778 , End length: 104852\n----------------------------------------------------------------------------\nY.js\n#1: 4787.8\n#2: 4740\n#3: 4739.7\nCorrect: true Length: 104852 Chunks: 10971\nBest: 4739.7 Worst: 4787.8 Average: 4755.8 Tx/sec: 54,623\n----------------------------------------------------------------------------\nY.rs\n#1: 5923.9\n#2: 5869.7\n#3: 5904.8\nCorrect: true Length: 104852 Chunks: 0\nBest: 5869.7 Worst: 5923.9 Average: 5899.5 Tx/sec: 44,034\n----------------------------------------------------------------------------\nStringRga (json-joy)\n#1: 98.6\n#2: 49.6\n#3: 45.9\nCorrect: true Length: 104852 Chunks: 12387\nBest: 45.9 Worst: 98.6 Average: 64.7 Tx/sec: 4,014,031\n```\n\nNotable observations:\n\n- Automerge participated only it the first two traces, as it was not able to handle the\n  larger traces.\n- Y.js is about 10x faster than Automerge.\n- Y.rs is slower than Y.js in all benchmarks, but `sveltecomponent`, which is the smallest\n  trace.\n- `json-joy` is about 50-100x faster than Y.js and 1,000x faster than Automerge.\n\nY.rs implementation might have bugs, as in the above benchmarks it produces correct results\nin only 2 out of 5 traces.\n\n\n### Benchmarks against non-CRDT libraries\n\n`json-joy` RGA implementation i\n\n- `V8 strings` is a benchmark against native JavaScript strings, which are implemented in V8\n  JavaScript engine. It just uses `String.prototype.slice()` to perform insert and delete operations.\n- `rope.js` is a JavaScript library which implements a rope data structure, it is very fast\n  for large strings.\n- `diamond-types-node` is a WebAssembly module of a highly optimized Rust `diamond-types` library.\n  It appends operation metadata to a log and stores the string contents in a skip list powered by\n  a [very fast][jump-rope-benchmarks] [`JumpRope`][jump-rope] library.\n\n\n### A note on Rust fad among CRDT library authors\n\nFirstly, we believe that Rust is a great language and would love to port `json-joy` to Rust some day.\nThis comment is not about the Rust language, but rather about the Rust fad among CRDT library authors.\n\nIt seems there is a pattern of JavaScript CRDT libraries being ported to Rust, and here are the\nexamples:\n\n- [Automerge][automerge] is a JavaScript CRDT library, which has rewritten its lower-level API, what it\n  calls \"backend\", into Rust. Now, the Rust backend is compiled into WebAssembly module and published as\n  `@automerge/automerge-wasm` package, which the `@automerge/automerge` JavaScript\n  code calls into through WebAssembly ABI for all its document operations. But, as you can see from\n  the benchmarks above, Automerge is still 1,000x slower than `json-joy`.\n- [Y.rs][yrs] is a Rust port of a JavaScript CRDT library [Y.js][yrs]. As you can see from the\n  benchmarks above, Y.js is about 100x slower than `json-joy` and the Rust port (which is exposed to\n  JavaScript through WebAssembly `ywasm` package) is about the same speed as the JavaScript version,\n  also about 100x slower than `json-joy`.\n- `diamond-types` is a Rust library which intends to implement various novel CRDT algorithms. It is\n  written by Seph Gentle, the author of numerous JavaScript collaborative editing libraries. The Rust\n  is chosen in search of performance, the library is exposed to JavaScript through WebAssembly ABI from\n  the `diamond-types-node` NPM package.\n\nAs a rule of thumb, an equivalent algorithm implemented in Rust will be about 2-5x faster than the\nsame algorithm implemented in JavaScript. However, when compiling Rust to WebAssembly, it loses about\n3-4x of its performance. So, net-net code ported from JavaScript to Rust and then compiled to WebAssembly\nfor consumption in JavaScript will be about the same speed as the original JavaScript code.\n\nHowever, packaging code into WebAssembly modules has downsides. Firstly, WebAssembly modules limit\nthe data structures one can share between the JavaScript and WebAssembly code.\n\nSecondly, WebAssembly modules result in larger bundle sizes, which is a problem for web applications.\nWASM modules can easily reach 100 KB in size, sometimes even 1 MB. Below are the real-world sizes of the\nWASM modules for the libraries mentioned above:\n\n`@automerge/automerge-wasm` - 1.3 MB\n\n![Character merging into block](https://streamich.github.io/json-joy/blog/images/wasm-sizes/automerge-wasm.png)\n\n`ywasm` - 1 MB\n\n![Character merging into block](https://streamich.github.io/json-joy/blog/images/wasm-sizes/ywasm.png)\n\n`diamond-types-node` - 300 KB\n\n![Character merging into block](https://streamich.github.io/json-joy/blog/images/wasm-sizes/diamond-types-node.png)\n\n\n\n\n\n[rga]: https://www.sciencedirect.com/science/article/abs/pii/S0743731510002716\n[causal-tree]: https://www.researchgate.net/publication/221367739_Deep_hypertext_with_embedded_revision_control_implemented_in_regular_expressions\n[high-responsiveness-crdts]: https://pages.lip6.fr/Marc.Shapiro/papers/rgasplit-group2016-11.pdf\n[rope]: https://en.wikipedia.org/wiki/Rope_(data_structure)\n[crdt-benchmarks]: https://github.com/josephg/crdt-benchmarks\n[datasets]: https://github.com/josephg/crdt-benchmarks/blob/7b0b90e912cfa88aff8c6336917343ee08653e51/README.md#data-sets\n[automerge]: https://github.com/automerge/automerge\n[yrs]: https://github.com/y-crdt/y-crdt\n[yjs]: https://github.com/yjs/yjs\n[vscode-tracker]: https://github.com/josephg/vscode-tracker\n[seph-blog1]: https://josephg.com/blog/crdts-go-brrr/\n[jump-rope]: https://github.com/josephg/jumprope-rs\n[jump-rope-benchmarks]: https://github.com/josephg/jumprope-rs#benchmarks\n"
│  
└─ VectorClock 1000000.43041