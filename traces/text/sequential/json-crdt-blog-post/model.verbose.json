{"time":[[1000000,43041]],"root":{"type":"val","id":[0,0],"value":{"type":"str","id":[1000000,1],"chunks":[{"id":[1000000,3],"value":"# Introduc"},{"id":[1000000,15],"value":"ing"},{"id":[1000000,11055],"value":" fast"},{"id":[1000000,11060],"span":1},{"id":[1000000,18],"value":" RGA "},{"id":[1000000,11041],"value":"implementation"},{"id":[1000000,23],"span":9},{"id":[1000000,32],"value":" that will power "},{"id":[1000000,51],"value":"JSON CRDT"},{"id":[1000000,11039],"value":"s"},{"id":[1000000,60],"value":"\n\nFirst, a little note on JSON CRDT. JSON CRDT will be "},{"id":[1000000,117],"value":"a specification and a JavaScript\nimplementation of JSON d"},{"id":[1000000,184],"value":"ata type as a CRDT ("},{"id":[1000000,205],"value":"Conflict-free Replicated "},{"id":[1000000,232],"value":"Data Type"},{"id":[1000000,242],"value":"). The\naim for JSON CRDT is to create a sound state-of"},{"id":[1000000,298],"value":"-the"},{"id":[1000000,304],"value":"-art CRDT specification which will\n"},{"id":[1000000,343],"value":"support all JSON values"},{"id":[1000000,368],"value":", including lists, for which this RGA algorithm is needed.\n\nNow back to the RGA algorithm, what is that? RGA stands for "},{"id":[1000000,32561],"value":"["},{"id":[1000000,547],"value":"*"},{"id":[1000000,488],"value":"Replicated Growable Array"},{"id":[1000000,548],"value":"*"},{"id":[1000000,32562],"value":"]["},{"id":[1000000,32565],"value":"rga"},{"id":[1000000,32564],"value":"]"},{"id":[1000000,513],"value":",\nalso known a"},{"id":[1000000,529],"value":"s CT ("},{"id":[1000000,32465],"value":"["},{"id":[1000000,551],"value":"*"},{"id":[1000000,549],"span":1},{"id":[1000000,536],"value":"Causal Tree"},{"id":[1000000,552],"value":"*"},{"id":[1000000,32466],"value":"][causal-tree]"},{"id":[1000000,535],"value":")"},{"id":[1000000,553],"value":", sometimes you might find it abbreviated as CT/RGA."},{"id":[1000000,607],"value":" T"},{"id":[1000000,613],"value":"he\nCT/RGA algorithm"},{"id":[1000000,634],"value":", or RGA for short, allows to implement "},{"id":[1000000,674],"span":2},{"id":[1000000,676],"value":"conflict free"},{"id":[1000000,690],"value":" list data"},{"id":[1000000,712],"value":"\n"},{"id":[1000000,700],"span":1},{"id":[1000000,701],"value":"structures"},{"id":[1000000,713],"value":", such as"},{"id":[1000000,726],"value":" strings, binary blobs, or arrays ("},{"id":[1000000,762],"value":"think JSON arrays"},{"id":[1000000,779],"span":12},{"id":[1000000,800],"span":1},{"id":[1000000,791],"span":8},{"id":[1000000,761],"value":")"},{"id":[1000000,805],"value":"."},{"id":[1000000,722],"span":2},{"id":[1000000,632],"span":1},{"id":[1000000,609],"span":2},{"id":[1000000,605],"value":"\n\n"},{"id":[1000000,806],"value":"What is conflict-free"},{"id":[1000000,836],"value":", or CRDTs? Those are data types, which can be forked"},{"id":[1000000,958],"value":";"},{"id":[1000000,889],"span":4},{"id":[1000000,893],"value":" the"},{"id":[1000000,899],"value":"n\ntwo or more peers can edit their copies independently"},{"id":[1000000,959],"value":" and at any point in time all"},{"id":[1000000,998],"value":" the\nforks can be merged back "},{"id":[1000000,1084],"value":"without conflicts. Also, "},{"id":[1000000,1110],"value":"forks can be merged in any order,\nwhich does not change the contents of the final document.\n"},{"id":[1000000,1237],"value":"\n"},{"id":[1000000,1202],"value":"\n## `json-joy` RGA implementation\n\n"},{"id":[1000000,1238],"value":"Now "},{"id":[1000000,1248],"value":"`json-joy` implements and advanced version of "},{"id":[1000000,1297],"value":"the "},{"id":[1000000,1294],"value":"RGA"},{"id":[1000000,1301],"value":" "},{"id":[1000000,1304],"value":"algorithm ("},{"id":[1000000,1316],"value":"w"},{"id":[1000000,1319],"value":"e will take a look\n"},{"id":[1000000,1445],"value":"at it "},{"id":[1000000,1338],"value":"later what is "},{"id":[1000000,1354],"value":"advanced about it"},{"id":[1000000,1372],"value":", bu"},{"id":[1000000,1378],"value":"t for now, just think about it as being very efficient\nand fast)."},{"id":[1000000,1451],"value":" Great news is that it is ready, and you can use it, lets see how it can be done.\n\n"},{"id":[1000000,1549],"value":"First"},{"id":[1000000,1615],"value":","},{"id":[1000000,1554],"value":" you will need to install the `"},{"id":[1000000,1587],"value":"json-joy` "},{"id":[1000000,1603],"value":"NPM package."},{"id":[1000000,1616],"value":"\n\n```\n"},{"id":[1000000,1628],"value":"yarn add json-joy"},{"id":[1000000,1626],"span":1},{"id":[1000000,1622],"value":"\n```"},{"id":[1000000,1792],"value":"\n\n`json-joy` i"},{"id":[1000000,1808],"value":"mplements an"},{"id":[1000000,1822],"value":" abstract version of the RGA algorithm in `AbstractRga` class, where\nelements can be of any type. But below w"},{"id":[1000000,1933],"value":"e will take a look at application of it to "},{"id":[1000000,1981],"value":"a string\ndata type, which is implemented in the `StringRga` class."},{"id":[1000000,1976],"span":4},{"id":[1000000,1931],"span":1},{"id":[1000000,1820],"span":1},{"id":[1000000,1806],"span":1},{"id":[1000000,1597],"span":3},{"id":[1000000,1585],"span":1},{"id":[1000000,1540],"span":7},{"id":[1000000,1534],"span":3},{"id":[1000000,1443],"value":"\n\n"},{"id":[1000000,1645],"value":"In general, RGAs support two operations: ("},{"id":[1000000,1688],"value":"1"},{"id":[1000000,1690],"value":") insert"},{"id":[1000000,1702],"value":"; and ("},{"id":[1000000,1710],"value":"2"},{"id":[1000000,1712],"value":") delete. Lets see how to use those"},{"id":[1000000,1750],"value":"\nfor string editing.\n"},{"id":[1000000,2123],"value":"\nImport the `StringRga` class."},{"id":[1000000,2155],"value":" Also, import the `ts` helper, which will allow "},{"id":[1000000,2295],"value":"u"},{"id":[1000000,2203],"span":1},{"id":[1000000,2204],"value":"s"},{"id":[1000000,2296],"value":" to"},{"id":[1000000,2205],"value":" cr"},{"id":[1000000,2216],"value":"eate"},{"id":[1000000,2240],"value":"\n"},{"id":[1000000,2220],"span":1},{"id":[1000000,2221],"value":"\"t"},{"id":[1000000,2229],"value":"imestamps\""},{"id":[1000000,2241],"value":" ("},{"id":[1000000,2244],"value":"aka "},{"id":[1000000,2258],"value":"*operation IDs"},{"id":[1000000,2278],"value":"*). All elements"},{"id":[1000000,2299],"value":" in RGA ("},{"id":[1000000,2309],"value":"and usually in all CRDTs"},{"id":[1000000,2335],"value":", for that"},{"id":[1000000,2561],"value":"\n"},{"id":[1000000,2345],"span":1},{"id":[1000000,2346],"value":"matter"},{"id":[1000000,2333],"span":1},{"id":[1000000,2308],"value":")"},{"id":[1000000,2563],"value":" "},{"id":[1000000,2352],"span":1},{"id":[1000000,2353],"value":"have a uni"},{"id":[1000000,2367],"value":"que ID. W"},{"id":[1000000,2378],"value":"e will need the `ts` helper to generate those IDs."},{"id":[1000000,2376],"span":1},{"id":[1000000,2363],"span":2},{"id":[1000000,2275],"span":2},{"id":[1000000,2273],"span":1},{"id":[1000000,2254],"span":3},{"id":[1000000,2248],"span":3},{"id":[1000000,2243],"span":1},{"id":[1000000,2223],"span":3},{"id":[1000000,2208],"span":4},{"id":[1000000,1771],"value":"\n\n```ts\n"},{"id":[1000000,2566],"value":"import {StringRga} from 'json-joy/es2020/json-crdt/types/rga-string/StringRga';\n"},{"id":[1000000,1783],"value":"import {"},{"id":[1000000,2647],"value":"ts"},{"id":[1000000,2047],"span":9},{"id":[1000000,1791],"value":"}"},{"id":[1000000,2056],"value":" from 'json-joy/"},{"id":[1000000,2078],"value":"es2020/json-crdt"},{"id":[1000000,2649],"value":"-patch"},{"id":[1000000,3446],"value":"/clock"},{"id":[1000000,2094],"span":27},{"id":[1000000,2121],"value":"';"},{"id":[1000000,2072],"span":4},{"id":[1000000,1779],"value":"\n```"},{"id":[1000000,2153],"value":"\n\n"},{"id":[1000000,2428],"value":"Don't worry "},{"id":[1000000,2464],"value":"`StringRga` will not actually store an ID f"},{"id":[1000000,2509],"value":"or every character, but "},{"id":[1000000,2541],"value":"more on that"},{"id":[1000000,2565],"value":"\n"},{"id":[1000000,2553],"span":1},{"id":[1000000,2554],"value":"later."},{"id":[1000000,2781],"value":" IDs a"},{"id":[1000000,2789],"value":"re 2-tuples of *Site ID* ("},{"id":[1000000,2816],"value":"aka *Process ID*"},{"id":[1000000,3134],"value":" or *Session ID*"},{"id":[1000000,2815],"value":")"},{"id":[1000000,2832],"value":" and an ever"},{"id":[1000000,3151],"value":"\n"},{"id":[1000000,2844],"span":1},{"id":[1000000,2845],"value":"increasing sequence"},{"id":[1000000,3153],"value":" "},{"id":[1000000,2874],"span":1},{"id":[1000000,2864],"span":1},{"id":[1000000,2865],"value":"counter"},{"id":[1000000,2878],"value":", "},{"id":[1000000,2888],"value":"i.e. "},{"id":[1000000,2897],"value":"\"time\""},{"id":[1000000,3041],"value":"; es"},{"id":[1000000,11036],"value":"s"},{"id":[1000000,3045],"value":"entially, and ID is a "},{"id":[1000000,3075],"value":"*Logical Timestamp*"},{"id":[1000000,3096],"value":","},{"id":[1000000,3155],"value":"\n"},{"id":[1000000,3097],"span":1},{"id":[1000000,3098],"value":"where each user will"},{"id":[1000000,3157],"value":" "},{"id":[1000000,3118],"span":1},{"id":[1000000,3119],"value":"have their own "},{"id":[1000000,3182],"value":"*Logical Clock*, and the collectio"},{"id":[1000000,11037],"value":"n"},{"id":[1000000,3216],"value":" nof all Logica"},{"id":[1000000,11038],"value":"l"},{"id":[1000000,3231],"value":" C"},{"id":[1000000,3241],"value":"locks\nof all "},{"id":[1000000,3260],"value":"users will for a "},{"id":[1000000,3293],"value":"*"},{"id":[1000000,3291],"span":1},{"id":[1000000,3277],"value":"Vector Clock"},{"id":[1000000,3290],"value":"*"},{"id":[1000000,3289],"value":"."},{"id":[1000000,3254],"span":5},{"id":[1000000,3239],"span":1},{"id":[1000000,3233],"span":3},{"id":[1000000,3160],"span":18},{"id":[1000000,3158],"span":1},{"id":[1000000,3094],"span":1},{"id":[1000000,3067],"span":7},{"id":[1000000,3033],"span":4},{"id":[1000000,2903],"span":2},{"id":[1000000,3029],"span":1},{"id":[1000000,2893],"span":2},{"id":[1000000,2880],"span":4},{"id":[1000000,2872],"span":1},{"id":[1000000,2875],"span":1},{"id":[1000000,2787],"span":1},{"id":[1000000,2533],"span":4},{"id":[1000000,2507],"span":1},{"id":[1000000,2462],"span":1},{"id":[1000000,2456],"span":5},{"id":[1000000,2440],"span":10},{"id":[1000000,1747],"span":1},{"id":[1000000,1748],"value":"\n"},{"id":[1000000,2656],"value":"\nNow cr"},{"id":[1000000,2671],"value":"eate the text CRDT data type"},{"id":[1000000,2921],"value":", you will need to give it a unique ID:"},{"id":[1000000,2699],"span":1},{"id":[1000000,2700],"value":"\n\n```ts"},{"id":[1000000,2905],"value":"\nconst sid = 1"},{"id":[1000000,3588],"value":"23"},{"id":[1000000,2919],"value":";"},{"id":[1000000,3005],"value":" // Site ID"},{"id":[1000000,2738],"value":"\nlet time = 0;"},{"id":[1000000,3016],"value":"  // "},{"id":[1000000,3023],"value":"\"time\""},{"id":[1000000,3021],"span":1},{"id":[1000000,2960],"value":"\n"},{"id":[1000000,2962],"value":"\nconst id = "},{"id":[1000000,2974],"span":4},{"id":[1000000,3453],"value":"ts"},{"id":[1000000,2978],"span":9},{"id":[1000000,2987],"value":"("},{"id":[1000000,3002],"value":"sid"},{"id":[1000000,2988],"span":1},{"id":[1000000,2989],"value":", time++);"},{"id":[1000000,2707],"value":"\n"},{"id":[1000000,2713],"value":"const str = new StringRga"},{"id":[1000000,2752],"value":"("},{"id":[1000000,2999],"value":"id"},{"id":[1000000,2754],"span":24},{"id":[1000000,2779],"value":");"},{"id":[1000000,2753],"span":1},{"id":[1000000,2708],"value":"\n```\n"},{"id":[1000000,3294],"value":"\nWe can see what is storied in our string us"},{"id":[1000000,3340],"value":"ing the `.view("},{"id":[1000000,3357],"value":")` method, lets verify that"},{"id":[1000000,3398],"value":"\n"},{"id":[1000000,3384],"span":1},{"id":[1000000,3385],"value":"it is empty:"},{"id":[1000000,3399],"value":"\n\n```ts\n"},{"id":[1000000,3424],"value":"console.log("},{"id":[1000000,3411],"value":"str.view("},{"id":[1000000,3422],"value":")"},{"id":[1000000,3437],"value":");\n// \"\""},{"id":[1000000,3423],"span":1},{"id":[1000000,3420],"span":1},{"id":[1000000,3407],"value":"\n```"},{"id":[1000000,3457],"value":"\n\nWe can also print the "},{"id":[1000000,3492],"value":"internal state"},{"id":[1000000,3510],"value":" like so:\n\n```ts"},{"id":[1000000,3555],"value":"\nconsole.log("},{"id":[1000000,3569],"value":"str + ''"},{"id":[1000000,3578],"value":");"},{"id":[1000000,3568],"span":1},{"id":[1000000,3526],"value":"\n"},{"id":[1000000,3580],"value":"// "},{"id":[1000000,3531],"value":"StringRga "},{"id":[1000000,3590],"value":"123"},{"id":[1000000,3541],"value":".0 { \"\" }\n"},{"id":[1000000,3583],"value":"// "},{"id":[1000000,3551],"value":"└─ ∅"},{"id":[1000000,3527],"value":"\n```"},{"id":[1000000,3586],"value":"\n\n"},{"id":[1000000,3593],"value":"It shows that the string has ID `123.0` and "},{"id":[1000000,3639],"value":"empty contents."},{"id":[1000000,3666],"value":"\n\nNow lets inse"},{"id":[1000000,3683],"value":"rt "},{"id":[1000000,3889],"value":"somethign"},{"id":[1000000,3686],"span":9},{"id":[1000000,3695],"value":" in to the "},{"id":[1000000,3712],"value":"string."},{"id":[1000000,3898],"value":" A local insert can be performed using the"},{"id":[1000000,3964],"value":"\n"},{"id":[1000000,3940],"span":1},{"id":[1000000,3941],"value":"`.insAt"},{"id":[1000000,3950],"value":"("},{"id":[1000000,3953],"value":")` method."},{"id":[1000000,3951],"span":1},{"id":[1000000,3948],"span":1},{"id":[1000000,3719],"value":"\n\n```ts\n"},{"id":[1000000,4657],"value":"let content = 'Hell world!';\nstr.insAt(0, ts(sid, time), content);\ntime += content.length;\nconsole.log(str + '');"},{"id":[1000000,4453],"span":114},{"id":[1000000,4567],"value":"\n// StringRga 123.0 { \"Hell world!\" }\n// └─ StringChunk 123.1!11 len:11 { \"Hell world!\" }"},{"id":[1000000,4339],"span":113},{"id":[1000000,4224],"span":114},{"id":[1000000,3731],"span":69},{"id":[1000000,3882],"span":3},{"id":[1000000,3800],"span":34},{"id":[1000000,3885],"span":3},{"id":[1000000,3834],"span":48},{"id":[1000000,3727],"value":"\n```"},{"id":[1000000,3965],"value":"\n\n"},{"id":[1000000,3968],"value":"You can see that a `StringChunk` was inserted"},{"id":[1000000,4017],"value":", where `123.1!11` "},{"id":[1000000,4044],"value":"specifies the ID of\n"},{"id":[1000000,4066],"value":"the first cha"},{"id":[1000000,4083],"value":"racter of the "},{"id":[1000000,4104],"value":"chunk `123.1` and `!11` denotes the length of the chunk."},{"id":[1000000,4162],"value":"\n\nLets perform another insert, to fi"},{"id":[1000000,4200],"value":"x our text:\n\n```ts\n"},{"id":[1000000,4770],"value":"content = 'o,';\nstr.insAt(4, ts(sid, time), content);\ntime += content.length;"},{"id":[1000000,7610],"value":"\n"},{"id":[1000000,4847],"value":"\nconsole.log(str + '');\n"},{"id":[1000000,5033],"value":"// "},{"id":[1000000,4871],"value":"StringRga 123.0 { \"Hello, world!\" }\n"},{"id":[1000000,5036],"value":"// "},{"id":[1000000,4907],"value":"└─ StringChunk 123.12!2 len:13 { \"o,\" }\n"},{"id":[1000000,5039],"value":"// "},{"id":[1000000,4947],"value":"   ← StringChunk 123.1!4 len:4 { \"Hell\" }\n"},{"id":[1000000,5042],"value":"// "},{"id":[1000000,4989],"value":"   → StringChunk 123.5!7 len:7 { \" world!\" }"},{"id":[1000000,7557],"value":"\n"},{"id":[1000000,7558],"span":1},{"id":[1000000,7559],"value":"\nconsole.log(str.view());"},{"id":[1000000,7585],"value":"\n// Hello"},{"id":[1000000,7602],"value":", world!"},{"id":[1000000,7594],"span":4},{"id":[1000000,4219],"value":"\n```"},{"id":[1000000,4198],"span":1},{"id":[1000000,4160],"span":1},{"id":[1000000,4097],"span":6},{"id":[1000000,4079],"span":2},{"id":[1000000,4064],"span":1},{"id":[1000000,4036],"span":6},{"id":[1000000,4013],"span":2},{"id":[1000000,3967],"value":"\n"},{"id":[1000000,5045],"value":"\nYou can see we fixed the t"},{"id":[1000000,5076],"value":"ext to be `Hello, world"},{"id":[1000000,5101],"value":"!"},{"id":[1000000,5110],"value":"`, now you might also notice that\nthe string now has three `StringChunk` nodes arranged in a "},{"id":[1000000,11012],"value":"binary"},{"id":[1000000,5203],"span":6},{"id":[1000000,5209],"value":" tree, where `←`"},{"id":[1000000,5227],"value":"\nand `→` represent the left and right children."},{"id":[1000000,5280],"value":" More on that later, but that is the\nsecret "},{"id":[1000000,11019],"value":"source"},{"id":[1000000,5324],"span":5},{"id":[1000000,5329],"value":" which makes the `json-joy` RGA implementation really fast: "},{"id":[1000000,5527],"value":"the "},{"id":[1000000,5389],"value":"text"},{"id":[1000000,5532],"value":"\n"},{"id":[1000000,5393],"span":1},{"id":[1000000,5394],"value":"chunks"},{"id":[1000000,5533],"value":" follow what is known"},{"id":[1000000,5555],"value":" "},{"id":[1000000,5400],"span":20},{"id":[1000000,5420],"value":"in academia"},{"id":[1000000,5435],"span":12},{"id":[1000000,5447],"value":" *"},{"id":[1000000,5471],"value":"b"},{"id":[1000000,5449],"span":1},{"id":[1000000,5450],"value":"lock"},{"id":[1000000,5559],"value":"-wise"},{"id":[1000000,5454],"span":1},{"id":[1000000,5455],"value":"*"},{"id":[1000000,5564],"value":" "},{"id":[1000000,5571],"value":"storage, where chunks of text\nare stored "},{"id":[1000000,5613],"value":"in blocks with "},{"id":[1000000,5637],"value":"a small metadata p"},{"id":[1000000,5659],"value":"iece allocated for each block, instead of\nstoring each character "},{"id":[1000000,11026],"value":"separately"},{"id":[1000000,5724],"span":10},{"id":[1000000,5734],"value":", with metadata allocated for each character. And\nbinary tree represents a "},{"id":[1000000,5879],"value":"custom ["},{"id":[1000000,5888],"value":"rope-like"},{"id":[1000000,5898],"value":"]"},{"id":[1000000,5902],"value":"["},{"id":[1000000,5904],"value":"rope"},{"id":[1000000,5903],"value":"]"},{"id":[1000000,5908],"value":" data structure, specifically"},{"id":[1000000,5947],"value":"\n"},{"id":[1000000,5937],"span":1},{"id":[1000000,5938],"value":"designed"},{"id":[1000000,5948],"value":" for the RGA algorithm."},{"id":[1000000,5899],"span":2},{"id":[1000000,5887],"span":1},{"id":[1000000,5809],"span":7},{"id":[1000000,5655],"span":2},{"id":[1000000,5628],"span":8},{"id":[1000000,5565],"span":3},{"id":[1000000,5456],"span":1},{"id":[1000000,5473],"span":1},{"id":[1000000,5475],"span":24},{"id":[1000000,5510],"span":1},{"id":[1000000,5499],"span":10},{"id":[1000000,5511],"span":11},{"id":[1000000,5474],"span":1},{"id":[1000000,5522],"span":5},{"id":[1000000,5457],"span":4},{"id":[1000000,5463],"span":6},{"id":[1000000,5461],"span":1},{"id":[1000000,5431],"span":2},{"id":[1000000,5276],"span":2},{"id":[1000000,5274],"value":"\n\n"},{"id":[1000000,5816],"value":"["},{"id":[1000000,5818],"value":"rope"},{"id":[1000000,5823],"value":"]: https://en.wikipedia.org/wiki/Rope_(data_structure)\n"},{"id":[1000000,5971],"value":"\nAll "},{"id":[1000000,5978],"value":"of this might sound overwhelming, but "},{"id":[1000000,6031],"value":"that is expected, you will not need to\nknow or use any of this"},{"id":[1000000,6097],"value":"; this is the lower-level ("},{"id":[1000000,6125],"value":"under-the"},{"id":[1000000,6136],"value":"-hood-workings"},{"id":[1000000,6151],"value":") that will\npower the JSON CRDT"},{"id":[1000000,6367],"value":" implementation"},{"id":[1000000,6194],"value":", for you"},{"id":[1000000,6221],"value":"&mdash;"},{"id":[1000000,6203],"span":1},{"id":[1000000,6204],"value":"as a devel"},{"id":[1000000,6216],"value":"oper"},{"id":[1000000,6228],"value":"&mdash;it wil"},{"id":[1000000,6245],"value":"l be exposed"},{"id":[1000000,6383],"value":"\n"},{"id":[1000000,6257],"span":1},{"id":[1000000,6258],"value":"in a"},{"id":[1000000,6385],"value":" "},{"id":[1000000,6264],"span":1},{"id":[1000000,6265],"value":"nice"},{"id":[1000000,6386],"value":"ly packaged"},{"id":[1000000,6269],"value":" API where you don't need to know anything about the inner workings"},{"id":[1000000,6398],"value":"\n"},{"id":[1000000,6336],"span":1},{"id":[1000000,6337],"value":"of the "},{"id":[1000000,6348],"value":"CRDT"},{"id":[1000000,6400],"value":" "},{"id":[1000000,6352],"span":1},{"id":[1000000,6353],"value":"algorithms.\n\n"},{"id":[1000000,6401],"value":"For the sake of completeness, lets briefly take a look at other public methods that\n"},{"id":[1000000,6491],"value":"the `StringRga` class expo"},{"id":[1000000,6519],"value":"ses. Above I mentioned that RGA "},{"id":[1000000,6555],"value":"usually supports two operations;\ninsert and delete. "},{"id":[1000000,6611],"value":"That is true, but actually"},{"id":[1000000,6650],"value":","},{"id":[1000000,6637],"value":" in "},{"id":[1000000,6645],"value":"CRDTs"},{"id":[1000000,6651],"value":", those are usually sub"},{"id":[1000000,6676],"value":"-divided\ninto *remote* and *local* operations. So"},{"id":[1000000,6737],"value":","},{"id":[1000000,6738],"span":1},{"id":[1000000,6725],"value":" essentially"},{"id":[1000000,6740],"value":" `StringRga` supports four\nmain operations: "},{"id":[1000000,6787],"value":"("},{"id":[1000000,6789],"value":"1"},{"id":[1000000,6791],"value":") remote insert; ("},{"id":[1000000,6812],"value":"2"},{"id":[1000000,6810],"span":1},{"id":[1000000,6809],"value":")"},{"id":[1000000,6813],"value":" remote delete; ("},{"id":[1000000,6831],"value":"3"},{"id":[1000000,6833],"value":") local insert; and ("},{"id":[1000000,6855],"value":"4"},{"id":[1000000,6856],"span":5},{"id":[1000000,6854],"value":")"},{"id":[1000000,6863],"value":" local"},{"id":[1000000,6876],"value":"\n"},{"id":[1000000,6869],"span":1},{"id":[1000000,6870],"value":"del"},{"id":[1000000,6879],"value":"ete."},{"id":[1000000,6885],"value":"\n\nWhat are those local vs remote operati"},{"id":[1000000,6932],"value":"ons"},{"id":[1000000,6925],"span":3},{"id":[1000000,6928],"value":"?"},{"id":[1000000,6935],"value":" Local operations "},{"id":[1000000,6959],"value":"are the on"},{"id":[1000000,6973],"value":"es that user"},{"id":[1000000,6995],"value":"\n"},{"id":[1000000,6985],"span":1},{"id":[1000000,6986],"value":"performs"},{"id":[1000000,6996],"value":" on their machine, "},{"id":[1000000,7039],"value":"where "},{"id":[1000000,7047],"value":"operations contain "},{"id":[1000000,7070],"value":"the offset position in the text,"},{"id":[1000000,7112],"value":"\nfor example:\n\n- `insertAt("},{"id":[1000000,7140],"value":"position, text"},{"id":[1000000,7154],"span":1},{"id":[1000000,7139],"value":")"},{"id":[1000000,7156],"value":"`\n- `deleteAt("},{"id":[1000000,7171],"value":"position, length"},{"id":[1000000,7170],"value":")"},{"id":[1000000,7187],"value":"`\n\nRemote operations are the ones received from "},{"id":[1000000,7237],"value":"other peers, and those don't "},{"id":[1000000,7268],"value":"reference the\nposition in text, instead they reference one or more IDs of the CRDT after which to\nperform the operation, for example:\n\n"},{"id":[1000000,7409],"value":"- "},{"id":[1000000,7438],"value":"`"},{"id":[1000000,7411],"value":"insert"},{"id":[1000000,7417],"span":5},{"id":[1000000,7422],"value":"("},{"id":[1000000,7424],"value":"afterId, text"},{"id":[1000000,7423],"value":")"},{"id":[1000000,7437],"value":"`"},{"id":[1000000,7439],"value":"\n- `"},{"id":[1000000,7450],"value":"delete("},{"id":[1000000,7458],"value":"...ids"},{"id":[1000000,7464],"span":1},{"id":[1000000,7457],"value":")"},{"id":[1000000,7466],"value":"`\n\nWe have already seen the local insert operation of the `StringRga`, it was `.insAt("},{"id":[1000000,7554],"value":")`."},{"id":[1000000,7611],"value":"\nNow lets take a l"},{"id":[1000000,7637],"value":"ook at the remote insert operation `.ins"},{"id":[1000000,7684],"value":"("},{"id":[1000000,7687],"value":")`. It works similar to"},{"id":[1000000,7712],"value":"\n`"},{"id":[1000000,7720],"value":".ins"},{"id":[1000000,7728],"value":"At("},{"id":[1000000,7733],"value":")`, but instead of the i"},{"id":[1000000,7761],"value":"nsertion position, we will need to specify the ID of\nthe character after which we want to apply our insert.\n\n"},{"id":[1000000,7878],"value":"Consider we have three users: "},{"id":[1000000,10806],"value":"U"},{"id":[1000000,7908],"span":1},{"id":[1000000,7909],"value":"ser 1 will create a new string "},{"id":[1000000,8591],"value":"`"},{"id":[1000000,7940],"value":"\"js\""},{"id":[1000000,8592],"value":"`"},{"id":[1000000,7944],"value":", then they will\nfork it and "},{"id":[1000000,7979],"value":"send the "},{"id":[1000000,7990],"value":"t"},{"id":[1000000,8005],"value":"hat string to two other users: ("},{"id":[1000000,8038],"value":"1"},{"id":[1000000,8040],"value":") "},{"id":[1000000,10808],"value":"U"},{"id":[1000000,8042],"span":1},{"id":[1000000,8043],"value":"ser "},{"id":[1000000,8049],"value":"2 will insert "},{"id":[1000000,8593],"value":"`"},{"id":[1000000,8063],"value":"\"on\""},{"id":[1000000,8594],"value":"`"},{"id":[1000000,8067],"value":" at"},{"id":[1000000,8076],"value":"\nthe end of it; ("},{"id":[1000000,8094],"value":"2"},{"id":[1000000,8096],"value":") "},{"id":[1000000,10810],"value":"U"},{"id":[1000000,8098],"span":1},{"id":[1000000,8099],"value":"ser 3 will concurrently ("},{"id":[1000000,8125],"value":"at the sam"},{"id":[1000000,8137],"value":"e time"},{"id":[1000000,8144],"value":") insert "},{"id":[1000000,8595],"value":"`"},{"id":[1000000,8153],"value":"\" joy\""},{"id":[1000000,8596],"value":"`"},{"id":[1000000,8159],"value":" at the"},{"id":[1000000,8168],"value":"\nsame "},{"id":[1000000,8178],"value":"position. Regardless in which order "},{"id":[1000000,8230],"value":"we apply the two remote operations of\n"},{"id":[1000000,10812],"value":"U"},{"id":[1000000,8268],"span":1},{"id":[1000000,8269],"value":"ser "},{"id":[1000000,8283],"value":"2 and "},{"id":[1000000,10814],"value":"U"},{"id":[1000000,8289],"span":1},{"id":[1000000,8290],"value":"ser 3"},{"id":[1000000,8297],"value":", we "},{"id":[1000000,10816],"value":"wi"},{"id":[1000000,10822],"value":"ll "},{"id":[1000000,10818],"span":2},{"id":[1000000,8302],"span":7},{"id":[1000000,8309],"value":"re"},{"id":[1000000,8313],"value":"ceive the same final result."},{"id":[1000000,8536],"value":"\n\nLets create a new string `str1` with contents `\"js\"`"},{"id":[1000000,8597],"value":", we will use the local `.insAt("},{"id":[1000000,8631],"value":")`"},{"id":[1000000,8641],"value":"\n"},{"id":[1000000,8633],"span":1},{"id":[1000000,8634],"value":"method"},{"id":[1000000,8642],"value":" to do that"},{"id":[1000000,8629],"span":1},{"id":[1000000,8590],"value":":"},{"id":[1000000,8341],"value":"\n\n```"},{"id":[1000000,10007],"value":"ts"},{"id":[1000000,8346],"value":"\n"},{"id":[1000000,8353],"value":"const user1 = 123;\nconst user2 = 345;\nconst user3 = 789;"},{"id":[1000000,8409],"span":16},{"id":[1000000,8425],"value":"\n\n// User 1 creates a new string\nconst str1 = new StringRga(ts(user1, 0));\nstr1.insAt(0, ts(user1, 1), 'js');"},{"id":[1000000,8347],"span":1},{"id":[1000000,8348],"value":"\n```"},{"id":[1000000,10825],"value":"\n\nNothing new here, just one thing to "},{"id":[1000000,10865],"value":"note that the IDs of characters "},{"id":[1000000,10899],"value":"`"},{"id":[1000000,10906],"value":"j` and "},{"id":[1000000,10915],"value":"`s` will\nbe `123.1` and `123.2`, respec"},{"id":[1000000,10958],"value":"tively. ("},{"id":[1000000,10968],"value":"And ID of the string is `123.0`."},{"id":[1000000,10967],"value":")"},{"id":[1000000,10954],"span":2},{"id":[1000000,10913],"span":1},{"id":[1000000,10900],"span":3},{"id":[1000000,10897],"span":1},{"id":[1000000,10863],"span":1},{"id":[1000000,8311],"span":1},{"id":[1000000,8295],"span":1},{"id":[1000000,8273],"span":7},{"id":[1000000,8214],"span":13},{"id":[1000000,8174],"span":2},{"id":[1000000,8166],"span":1},{"id":[1000000,8135],"span":1},{"id":[1000000,8124],"span":1},{"id":[1000000,8093],"span":1},{"id":[1000000,8070],"span":4},{"id":[1000000,8047],"span":1},{"id":[1000000,8037],"span":1},{"id":[1000000,7995],"span":5},{"id":[1000000,7991],"span":2},{"id":[1000000,7988],"span":1},{"id":[1000000,7973],"span":3},{"id":[1000000,7870],"span":6},{"id":[1000000,7757],"span":2},{"id":[1000000,7731],"span":1},{"id":[1000000,7724],"span":2},{"id":[1000000,7714],"span":3},{"id":[1000000,7710],"span":1},{"id":[1000000,7685],"span":1},{"id":[1000000,7677],"span":2},{"id":[1000000,7680],"span":1},{"id":[1000000,7679],"span":1},{"id":[1000000,7629],"span":4},{"id":[1000000,7552],"span":1},{"id":[1000000,7443],"span":6},{"id":[1000000,7403],"span":3},{"id":[1000000,7266],"span":1},{"id":[1000000,7235],"span":1},{"id":[1000000,7102],"span":5},{"id":[1000000,7066],"span":2},{"id":[1000000,7020],"span":18},{"id":[1000000,7015],"span":4},{"id":[1000000,6969],"span":2},{"id":[1000000,6953],"span":3},{"id":[1000000,6883],"span":1},{"id":[1000000,6873],"span":2},{"id":[1000000,6830],"span":1},{"id":[1000000,6788],"span":1},{"id":[1000000,6784],"span":2},{"id":[1000000,6674],"span":1},{"id":[1000000,6641],"span":2},{"id":[1000000,6607],"span":3},{"id":[1000000,6551],"span":2},{"id":[1000000,6517],"span":1},{"id":[1000000,6485],"span":3},{"id":[1000000,6366],"value":"\n"},{"id":[1000000,6344],"span":3},{"id":[1000000,6262],"span":1},{"id":[1000000,6241],"span":2},{"id":[1000000,6214],"span":1},{"id":[1000000,6192],"value":"\n"},{"id":[1000000,8653],"value":"Now imagin"},{"id":[1000000,8665],"value":"e that this string was sent to two other users, who"},{"id":[1000000,8718],"value":" "},{"id":[1000000,8742],"value":"concurrently appended\n`\""},{"id":[1000000,9517],"value":" joy"},{"id":[1000000,8766],"span":2},{"id":[1000000,8768],"value":"\"` and `\""},{"id":[1000000,9523],"value":"on"},{"id":[1000000,8777],"span":4},{"id":[1000000,8781],"value":"\"` to it. "},{"id":[1000000,8795],"value":"Then those users would send their "},{"id":[1000000,11001],"value":"operations"},{"id":[1000000,8829],"span":10},{"id":[1000000,8839],"value":" b"},{"id":[1000000,8845],"value":"ack to"},{"id":[1000000,8859],"value":"\n"},{"id":[1000000,8851],"span":1},{"id":[1000000,8852],"value":"user 1"},{"id":[1000000,8882],"value":", which will use the remote `.ins("},{"id":[1000000,8918],"value":")` method "},{"id":[1000000,8930],"value":"to apply those operations, lets"},{"id":[1000000,8971],"value":"\n"},{"id":[1000000,8961],"span":1},{"id":[1000000,8962],"value":"do that:"},{"id":[1000000,8972],"value":"\n\n```"},{"id":[1000000,10005],"value":"ts"},{"id":[1000000,8977],"value":"\n"},{"id":[1000000,8982],"value":"// User 2 and 3 insert their changes at the same time \"ts(user1, 2)\"\nstr1.ins(ts(user1, 2), ts(user2, 3), ' joy');\nstr1.ins(ts(user1, 2), ts(user3, 3), 'on');\n\nconsole.log(str1 + '');\n// StringRga 123.0 { \"json joy\" }\n// └─ StringChunk 789.3!2 len:8 { \"on\" }\n//    ← StringChunk 123.1!2 len:2 { \"js\" }\n//    → StringChunk 345.3!4 len:4 { \" joy\" }"},{"id":[1000000,8978],"value":"\n```"},{"id":[1000000,9328],"value":"\n\nThe final string is `\"json joy\"`. You can see that `.ins("},{"id":[1000000,9389],"value":")` first inserted `\""},{"id":[1000000,9411],"value":" joy\"`"},{"id":[1000000,9422],"value":"\n"},{"id":[1000000,9417],"span":1},{"id":[1000000,9418],"value":"and"},{"id":[1000000,9423],"value":" then `\"on\"`, lets try to reverse the order and see if we stil"},{"id":[1000000,9487],"value":"l get the same"},{"id":[1000000,9503],"value":"\nresult"},{"id":[1000000,9512],"value":":\n\n"},{"id":[1000000,9526],"value":"```"},{"id":[1000000,9531],"value":"ts"},{"id":[1000000,9533],"span":1},{"id":[1000000,9534],"value":"\n"},{"id":[1000000,9537],"value":"// User 1 creates a new string \"js\"\nconst str2 = new StringRga(ts(user1, 0));\nstr2.insAt(0, ts(user1, 1), 'js');\n\n// User 2 and 3 insert their changes at the same time \"ts(user1, 2)\"\nstr2.ins(ts(user1, 2), ts(user3, 3), 'on');\nstr2.ins(ts(user1, 2), ts(user2, 3), ' joy');\n\nconsole.log(str2 + '');\n// StringRga 123.0 { \"json joy\" }\n// └─ StringChunk 345.3!4 len:8 { \" joy\" }\n//    ← StringChunk 789.3!2 len:4 { \"on\" }\n//      ← StringChunk 123.1!2 len:2 { \"js\" }"},{"id":[1000000,9999],"span":1},{"id":[1000000,9535],"value":"\n`"},{"id":[1000000,10000],"value":"``"},{"id":[1000000,10003],"value":"\n"},{"id":[1000000,10009],"value":"\nAgain, we get the `\"json joy\"` final result. The reason that results are the same"},{"id":[1000000,10100],"value":"\n"},{"id":[1000000,10091],"span":1},{"id":[1000000,10092],"value":"in both"},{"id":[1000000,10101],"value":" cases is because we "},{"id":[1000000,10153],"value":"use the unique character IDs to order the inserts."},{"id":[1000000,10205],"value":"\nUser 3 "},{"id":[1000000,10258],"value":"has "},{"id":[1000000,10213],"span":4},{"id":[1000000,10217],"value":"site ID `789`, but user "},{"id":[1000000,10243],"value":"User "},{"id":[1000000,10250],"value":"2 ha"},{"id":[1000000,10265],"value":"s `"},{"id":[1000000,10272],"value":"345`, hence for "},{"id":[1000000,10292],"value":"conflict"},{"id":[1000000,10312],"value":"\n"},{"id":[1000000,10300],"span":1},{"id":[1000000,10301],"value":"concurrent"},{"id":[1000000,10313],"value":" inserts"},{"id":[1000000,10321],"span":1},{"id":[1000000,10322],"value":" User 3'"},{"id":[1000000,10332],"value":"s "},{"id":[1000000,10335],"value":"inserts will appear to the left of User 2's inserts.\nNo magic "},{"id":[1000000,10454],"value":"here"},{"id":[1000000,10397],"span":5},{"id":[1000000,10402],"value":", that is just how "},{"id":[1000000,10450],"value":"CT/"},{"id":[1000000,10421],"value":"RGA algorithm is specified.\n"},{"id":[1000000,10463],"value":"\n"},{"id":[1000000,10449],"value":"\n"},{"id":[1000000,10458],"value":"## "},{"id":[1000000,10537],"value":"The "},{"id":[1000000,10466],"value":"Block-wise CT/RGA"},{"id":[1000000,10561],"value":"-"},{"id":[1000000,10483],"span":1},{"id":[1000000,10484],"value":"Split"},{"id":[1000000,14438],"value":" Splay "},{"id":[1000000,10489],"span":12},{"id":[1000000,10501],"value":"Rope with Identifier Table"},{"id":[1000000,10567],"value":"\n"},{"id":[1000000,11062],"value":"\nThe `json-joy`"},{"id":[1000000,11078],"value":" RGA implementation is "},{"id":[1000000,11103],"value":"very fast,"},{"id":[1000000,11247],"value":" we will see"},{"id":[1000000,11260],"value":" that in the "},{"id":[1000000,11278],"value":"next section.\nBut in "},{"id":[1000000,11303],"value":"this section we will take a look at the data structure that powers the\n`StringRga` class. The `StringRga` class is fast because it uses a custom\n"},{"id":[1000000,11299],"span":3},{"id":[1000000,11273],"span":4},{"id":[1000000,11259],"span":1},{"id":[1000000,11113],"span":41},{"id":[1000000,11222],"value":"state-of"},{"id":[1000000,11232],"value":"-the-art "},{"id":[1000000,11230],"span":1},{"id":[1000000,11154],"value":"data structure that is specifically designed for the"},{"id":[1000000,11242],"value":"\n"},{"id":[1000000,11206],"span":1},{"id":[1000000,11207],"value":"RGA algorithm."},{"id":[1000000,11244],"value":" "},{"id":[1000000,11452],"value":"It"},{"id":[1000000,11101],"span":1},{"id":[1000000,11077],"span":1},{"id":[1000000,10568],"span":11},{"id":[1000000,10579],"value":" implements "},{"id":[1000000,10591],"span":26},{"id":[1000000,10617],"value":"what can be describe as\n*"},{"id":[1000000,10646],"value":"Block-wise CT/RGA-Split Rope with Identifier Table"},{"id":[1000000,10698],"value":"* algorithm. It is\na mouthful, but the purpose of this section is to "},{"id":[1000000,10771],"value":"decipher it for th"},{"id":[1000000,10793],"value":"e reader.\n\n"},{"id":[1000000,11457],"value":"- **Block-wise** means that the text is stored in blocks"},{"id":[1000000,11914],"value":" ("},{"id":[1000000,11917],"value":"`StringChunk` in `json-joy`"},{"id":[1000000,11916],"value":")"},{"id":[1000000,11513],"value":","},{"id":[1000000,11945],"value":"\n  "},{"id":[1000000,11514],"span":1},{"id":[1000000,11515],"value":"where each block"},{"id":[1000000,11949],"value":" "},{"id":[1000000,11531],"span":3},{"id":[1000000,11534],"value":"contains a small metadata piece, instead of storing each character"},{"id":[1000000,11951],"value":"\n  "},{"id":[1000000,11600],"span":1},{"id":[1000000,11601],"value":"separately,"},{"id":[1000000,11955],"value":" "},{"id":[1000000,11612],"span":3},{"id":[1000000,11615],"value":"with metadata allocated for each character. This is a well known technique\n"},{"id":[1000000,11957],"span":79},{"id":[1000000,11690],"value":"  in academia"},{"id":[1000000,11761],"value":", however, it is not "},{"id":[1000000,11787],"value":"commonly used in practice, because it is"},{"id":[1000000,12036],"value":"\n"},{"id":[1000000,12238],"value":"  difficult to implement. The canonical RGA algorithm is just a linked list of\n"},{"id":[1000000,12327],"value":"  single characters, which is very easy to implement, but it is not "},{"id":[1000000,12395],"span":5},{"id":[1000000,12400],"value":"efficient.\n"},{"id":[1000000,12448],"value":"  Block-wise representation is more efficient, but it is more difficult to implement"},{"id":[1000000,12543],"value":",\n  as implicitly each character still has a"},{"id":[1000000,12729],"value":" unique"},{"id":[1000000,12587],"span":1},{"id":[1000000,12588],"value":" ID"},{"id":[1000000,12595],"value":" and can be "},{"id":[1000000,12612],"value":"referenced by that ID."},{"id":[1000000,12737],"value":"\n  "},{"id":[1000000,12634],"span":1},{"id":[1000000,12635],"value":"So,"},{"id":[1000000,12741],"value":" "},{"id":[1000000,12638],"span":3},{"id":[1000000,12641],"value":"the blocks can be split and merged, which "},{"id":[1000000,12689],"value":"requires a lot of bookkeeping."},{"id":[1000000,12742],"value":"\n"},{"id":[1000000,12746],"value":"- **CT/RGA** simpl"},{"id":[1000000,12766],"value":"y means that the base algorithm is *Causal Trees/Replicated G"},{"id":[1000000,12829],"value":"ro"},{"id":[1000000,12847],"value":"wable "},{"id":[1000000,12855],"value":"Array*.\n  This is "},{"id":[1000000,12884],"value":"currently the "},{"id":[1000000,12903],"value":"best known algorithm for"},{"id":[1000000,12959],"value":" list ("},{"id":[1000000,12967],"value":"strings, arrays"},{"id":[1000000,12966],"value":")"},{"id":[1000000,12927],"value":" CRDTs, "},{"id":[1000000,12983],"value":"it\n  has formal "},{"id":[1000000,13001],"value":"proofs of correctness"},{"id":[1000000,13068],"value":", it is efficient, and is "},{"id":[1000000,13096],"value":"probably most cited\n"},{"id":[1000000,13129],"value":"  list CRDT algorithm in academic papers.\n"},{"id":[1000000,13174],"value":"- **"},{"id":[1000000,13182],"value":"Split** refer"},{"id":[1000000,13209],"value":"s to the optimization described in the"},{"id":[1000000,13457],"value":"\n  "},{"id":[1000000,13782],"value":"["},{"id":[1000000,13356],"span":1},{"id":[1000000,13403],"value":"*\"High Responsiveness for Group Editing CRDTs\"*"},{"id":[1000000,15695],"value":" ("},{"id":[1000000,15698],"value":"Briot et al., 2006"},{"id":[1000000,15697],"value":")"},{"id":[1000000,13450],"value":" paper"},{"id":[1000000,13783],"value":"]"},{"id":[1000000,13787],"value":"[high-responsiveness-crdts]"},{"id":[1000000,13784],"span":2},{"id":[1000000,13460],"value":","},{"id":[1000000,13815],"value":"\n  "},{"id":[1000000,13461],"span":1},{"id":[1000000,13498],"value":"a \"split link\" is stored"},{"id":[1000000,13819],"value":" "},{"id":[1000000,13522],"span":1},{"id":[1000000,13561],"span":2},{"id":[1000000,13563],"value":"to the the other part of the block that was split. This allows"},{"id":[1000000,13821],"value":"\n  "},{"id":[1000000,13625],"span":1},{"id":[1000000,13626],"value":"to perform"},{"id":[1000000,13825],"value":" "},{"id":[1000000,13636],"span":1},{"id":[1000000,13692],"span":2},{"id":[1000000,13694],"value":"search and delete operations on blocks more efficiently"},{"id":[1000000,13751],"value":", "},{"id":[1000000,13755],"value":"w"},{"id":[1000000,13758],"value":"hen the block was"},{"id":[1000000,13827],"value":"\n  "},{"id":[1000000,13775],"span":1},{"id":[1000000,13776],"value":"split."},{"id":[1000000,14445],"span":1},{"id":[1000000,14463],"span":227},{"id":[1000000,14449],"span":4},{"id":[1000000,14455],"span":7},{"id":[1000000,14453],"span":1},{"id":[1000000,14446],"span":2},{"id":[1000000,13830],"value":"\n"},{"id":[1000000,13834],"value":"- **"},{"id":[1000000,14691],"value":"Splay "},{"id":[1000000,13838],"value":"Rope** means that the "},{"id":[1000000,13865],"value":"RGA blocks are stored in a rope-like binary splay tree.\n  "},{"id":[1000000,13930],"value":"Unlike the canonical RGA algorithm, where the blocks are stored in a linked list"},{"id":[1000000,14016],"value":".\n  This allows for"},{"id":[1000000,16069],"value":" faster than"},{"id":[1000000,14402],"value":" `O"},{"id":[1000000,14407],"value":"("},{"id":[1000000,14409],"value":"lo"},{"id":[1000000,14413],"value":"g n"},{"id":[1000000,14417],"value":")`"},{"id":[1000000,14419],"span":1},{"id":[1000000,14411],"span":1},{"id":[1000000,14408],"span":1},{"id":[1000000,14405],"span":1},{"id":[1000000,14035],"span":6},{"id":[1000000,14049],"span":6},{"id":[1000000,14055],"value":" lookups of text by position.\n"},{"id":[1000000,14088],"value":"- **Identifier Table** is a"},{"id":[1000000,14165],"value":"nother"},{"id":[1000000,16081],"value":" splay"},{"id":[1000000,14171],"value":" tree, which "},{"id":[1000000,14195],"value":"stores the mapping of character IDs\n  to the blocks. This allows to perform lookups of characters by ID in"},{"id":[1000000,16088],"value":" les"},{"id":[1000000,16096],"value":"s than"},{"id":[1000000,16104],"value":"\n  "},{"id":[1000000,16102],"span":1},{"id":[1000000,16092],"span":2},{"id":[1000000,14301],"span":1},{"id":[1000000,14302],"value":"`O(log n)`"},{"id":[1000000,16108],"value":" "},{"id":[1000000,14312],"span":3},{"id":[1000000,14315],"value":"time"},{"id":[1000000,14400],"span":1},{"id":[1000000,14319],"span":20},{"id":[1000000,14339],"value":"."},{"id":[1000000,14340],"span":55},{"id":[1000000,14184],"span":5},{"id":[1000000,14193],"span":1},{"id":[1000000,14189],"span":2},{"id":[1000000,14115],"span":49},{"id":[1000000,14085],"span":2},{"id":[1000000,14041],"span":6},{"id":[1000000,14010],"span":4},{"id":[1000000,13923],"span":6},{"id":[1000000,13860],"span":4},{"id":[1000000,13831],"span":2},{"id":[1000000,13756],"span":1},{"id":[1000000,13753],"span":1},{"id":[1000000,13749],"span":1},{"id":[1000000,13637],"span":34},{"id":[1000000,13679],"span":12},{"id":[1000000,13671],"span":7},{"id":[1000000,13523],"span":37},{"id":[1000000,13468],"span":29},{"id":[1000000,13462],"span":5},{"id":[1000000,13357],"span":44},{"id":[1000000,13195],"span":1},{"id":[1000000,13204],"span":2},{"id":[1000000,13196],"span":4},{"id":[1000000,13178],"span":2},{"id":[1000000,13171],"span":2},{"id":[1000000,13116],"span":12},{"id":[1000000,13094],"span":1},{"id":[1000000,13022],"span":45},{"id":[1000000,12999],"span":1},{"id":[1000000,12935],"span":24},{"id":[1000000,12898],"span":4},{"id":[1000000,12873],"span":9},{"id":[1000000,12853],"span":1},{"id":[1000000,12835],"span":6},{"id":[1000000,12831],"span":2},{"id":[1000000,12827],"span":1},{"id":[1000000,12764],"span":1},{"id":[1000000,12743],"span":2},{"id":[1000000,12719],"span":4},{"id":[1000000,12683],"span":5},{"id":[1000000,12607],"span":4},{"id":[1000000,12591],"span":2},{"id":[1000000,12541],"span":1},{"id":[1000000,12534],"span":4},{"id":[1000000,12532],"span":1},{"id":[1000000,12411],"span":36},{"id":[1000000,12317],"span":9},{"id":[1000000,12119],"span":25},{"id":[1000000,12200],"span":37},{"id":[1000000,12144],"span":54},{"id":[1000000,12037],"span":24},{"id":[1000000,12117],"span":1},{"id":[1000000,12061],"span":54},{"id":[1000000,11827],"span":1},{"id":[1000000,11912],"span":2},{"id":[1000000,11831],"span":80},{"id":[1000000,11828],"span":2},{"id":[1000000,11782],"span":4},{"id":[1000000,11703],"span":57},{"id":[1000000,11454],"span":2},{"id":[1000000,10789],"span":2},{"id":[1000000,10767],"span":3},{"id":[1000000,10696],"span":1},{"id":[1000000,10642],"span":2},{"id":[1000000,10527],"span":10},{"id":[1000000,10541],"value":"\n"},{"id":[1000000,14422],"value":"\n"},{"id":[1000000,14699],"value":"A novelty of the `j"},{"id":[1000000,14720],"value":"son-joy` imp"},{"id":[1000000,14736],"value":"lementation is that it uses Splay trees for both\n"},{"id":[1000000,14902],"value":"the"},{"id":[1000000,16363],"value":" "},{"id":[1000000,16369],"value":"Chunk"},{"id":[1000000,16364],"span":4},{"id":[1000000,14905],"value":" Rope and the Identifier Table. In practice this results into a very fast\ntree "},{"id":[1000000,14988],"value":"traversal"},{"id":[1000000,16374],"value":"s"},{"id":[1000000,14997],"value":", because the tree"},{"id":[1000000,16375],"value":"s"},{"id":[1000000,15015],"value":" "},{"id":[1000000,16378],"value":"a"},{"id":[1000000,16385],"value":"re"},{"id":[1000000,16379],"span":3},{"id":[1000000,15016],"span":2},{"id":[1000000,15018],"value":" splayed on "},{"id":[1000000,15161],"value":"every insert"},{"id":[1000000,15030],"span":12},{"id":[1000000,15042],"value":", which results into\n"},{"id":[1000000,16109],"value":"*"},{"id":[1000000,15174],"value":"likely"},{"id":[1000000,16110],"value":"*"},{"id":[1000000,15086],"span":8},{"id":[1000000,15094],"value":" faster than `O(log n)` access time"},{"id":[1000000,15330],"value":", for all operations"},{"id":[1000000,16111],"value":", as users usually"},{"id":[1000000,16387],"value":":"},{"id":[1000000,16395],"value":"\n"},{"id":[1000000,16388],"span":1},{"id":[1000000,16389],"value":"("},{"id":[1000000,16391],"value":"1"},{"id":[1000000,16393],"value":")"},{"id":[1000000,16390],"span":1},{"id":[1000000,16129],"value":" "},{"id":[1000000,16160],"value":"type multiple"},{"id":[1000000,16397],"value":" "},{"id":[1000000,16214],"span":1},{"id":[1000000,16173],"span":1},{"id":[1000000,16174],"value":"characte"},{"id":[1000000,16190],"value":"rs at the same position"},{"id":[1000000,16398],"value":" ("},{"id":[1000000,16401],"value":"for the Text R"},{"id":[1000000,16421],"value":"ope"},{"id":[1000000,16425],"value":"); and"},{"id":[1000000,16452],"value":"\n"},{"id":[1000000,16431],"span":1},{"id":[1000000,16432],"value":"("},{"id":[1000000,16434],"value":"2"},{"id":[1000000,16436],"value":") "},{"id":[1000000,16442],"value":"reference"},{"id":[1000000,16453],"value":" the "},{"id":[1000000,16506],"value":"most recent"},{"id":[1000000,16458],"span":6},{"id":[1000000,16464],"value":" IDs ("},{"id":[1000000,16471],"value":"for the Identifier Table"},{"id":[1000000,16470],"value":")"},{"id":[1000000,16438],"span":3},{"id":[1000000,16433],"span":1},{"id":[1000000,16415],"span":3},{"id":[1000000,16400],"span":1},{"id":[1000000,16182],"span":4},{"id":[1000000,16130],"span":25},{"id":[1000000,15129],"value":"."},{"id":[1000000,15180],"value":" When the trees are"},{"id":[1000000,16496],"value":"\n"},{"id":[1000000,16216],"span":1},{"id":[1000000,15351],"span":1},{"id":[1000000,15199],"span":1},{"id":[1000000,15200],"value":"un"},{"id":[1000000,15217],"value":"-"},{"id":[1000000,15202],"value":"serialized from"},{"id":[1000000,15353],"value":" "},{"id":[1000000,15218],"span":1},{"id":[1000000,15219],"value":"storage"},{"id":[1000000,15228],"value":", they "},{"id":[1000000,15355],"value":"can"},{"id":[1000000,16498],"value":" "},{"id":[1000000,16218],"span":1},{"id":[1000000,15358],"span":1},{"id":[1000000,15359],"value":"be"},{"id":[1000000,15239],"span":3},{"id":[1000000,15242],"value":" balanced, which results "},{"id":[1000000,15271],"value":"into"},{"id":[1000000,16252],"value":" "},{"id":[1000000,16262],"value":"*"},{"id":[1000000,16253],"value":"exac"},{"id":[1000000,16259],"value":"tly"},{"id":[1000000,16263],"value":"*"},{"id":[1000000,16500],"value":"\n"},{"id":[1000000,16257],"span":1},{"id":[1000000,15275],"span":1},{"id":[1000000,15276],"value":"`O(log n)`"},{"id":[1000000,16220],"value":" "},{"id":[1000000,16265],"value":"complexity"},{"id":[1000000,15362],"span":1},{"id":[1000000,15286],"span":12},{"id":[1000000,15309],"value":", for all operations"},{"id":[1000000,16502],"value":" "},{"id":[1000000,16276],"span":1},{"id":[1000000,16222],"span":1},{"id":[1000000,16223],"value":"for freshly"},{"id":[1000000,16278],"value":" "},{"id":[1000000,16251],"span":1},{"id":[1000000,16234],"span":1},{"id":[1000000,16235],"value":"hydrated trees"},{"id":[1000000,16279],"value":" ("},{"id":[1000000,16282],"value":"say"},{"id":[1000000,16324],"value":", when"},{"id":[1000000,16504],"value":"\n"},{"id":[1000000,16330],"span":1},{"id":[1000000,16331],"value":"opening the document from a file"},{"id":[1000000,16285],"span":1},{"id":[1000000,16321],"span":1},{"id":[1000000,16286],"span":30},{"id":[1000000,16281],"value":")"},{"id":[1000000,16249],"value":"."},{"id":[1000000,15329],"span":1},{"id":[1000000,15363],"value":"\n\n"},{"id":[1000000,15381],"value":"T"},{"id":[1000000,15390],"value":"h"},{"id":[1000000,15395],"value":"ere are many more "},{"id":[1000000,15500],"value":"minor "},{"id":[1000000,15413],"value":"optimizations that make `json-joy` fast"},{"id":[1000000,15462],"value":", but another one"},{"id":[1000000,15507],"value":"\n"},{"id":[1000000,15550],"value":"worth mentioning is the insert in the middle of the block"},{"id":[1000000,15631],"value":" situation"},{"id":[1000000,15867],"value":" described in"},{"id":[1000000,15955],"value":"\n"},{"id":[1000000,16068],"value":"["},{"id":[1000000,15880],"span":1},{"id":[1000000,15953],"span":1},{"id":[1000000,15881],"value":"(Briot et al., 2006)"},{"id":[1000000,16066],"value":"]"},{"id":[1000000,15952],"span":1},{"id":[1000000,15901],"span":7},{"id":[1000000,15908],"value":"[high-responsiveness-c"},{"id":[1000000,15940],"value":"rdts]"},{"id":[1000000,15930],"span":5},{"id":[1000000,15641],"value":", which results\ninto two "},{"id":[1000000,15668],"value":"block splits."},{"id":[1000000,15690],"value":" The "},{"id":[1000000,15716],"value":"insert is per"},{"id":[1000000,15733],"value":"f"},{"id":[1000000,15736],"value":"ormed such that the new block is rotated"},{"id":[1000000,15780],"value":"\nto the top, while the other two "},{"id":[1000000,15817],"value":"blocks are rotated to the bottom"},{"id":[1000000,15866],"value":"."},{"id":[1000000,15956],"value":"\n\n"},{"id":[1000000,17192],"value":"![insert-into-middle-of-block](https://streamich.github.io/json-joy/blog/images/blockwise-middle-split.png)\n"},{"id":[1000000,17301],"value":"\n"},{"id":[1000000,17303],"value":"Lets look at an example of how this all works together.\n"},{"id":[1000000,17360],"value":"\n"},{"id":[1000000,17362],"value":"\n"},{"id":[1000000,17364],"value":"### Block-wise CT/RGA-Split Rope with Identifier Table Example\n"},{"id":[1000000,17428],"value":"\n"},{"id":[1000000,17430],"value":"This will be a simple example, which showcases a single insert. We will start with\n"},{"id":[1000000,17514],"value":"a string `\"GG WP\"` and insert `\"OOD \"` in the middle of it. The final string will\n"},{"id":[1000000,17597],"value":"be `\"GOOD G WP\"`.\n"},{"id":[1000000,17616],"value":"\n"},{"id":[1000000,17618],"value":"Strings are represented by the RGA algorithm, so the simplest way of thinking about\n"},{"id":[1000000,17703],"value":"it is to imagine the starting string as a linked list of characters, where each\n"},{"id":[1000000,17784],"value":"character has a unique ID.\n"},{"id":[1000000,17812],"value":"\n"},{"id":[1000000,17814],"span":1},{"id":[1000000,16033],"value":"!["},{"id":[1000000,26384],"value":"RGA string"},{"id":[1000000,17974],"span":10},{"id":[1000000,16038],"span":27},{"id":[1000000,16035],"value":"]("},{"id":[1000000,17858],"value":"https://streamich.github.io/json-joy/"},{"id":[1000000,17934],"value":"blog/images/blogpost-001/rga-string.png"},{"id":[1000000,17895],"span":38},{"id":[1000000,17818],"span":39},{"id":[1000000,15958],"span":75},{"id":[1000000,16037],"value":")"},{"id":[1000000,17815],"value":"\n"},{"id":[1000000,17985],"value":"\nA"},{"id":[1000000,17989],"value":" collaborative editing expert will notice "},{"id":[1000000,18058],"value":"that:\n\n- At least two users "},{"id":[1000000,18092],"value":"`a` and `c` have edited the string.\n  - "},{"id":[1000000,18134],"value":"User `a` inserted `\"GGWP\"`.\n  - User `c` inserted "},{"id":[1000000,18186],"value":"the space `"},{"id":[1000000,18199],"value":"\" \"`.\n"},{"id":[1000000,18208],"value":"- "},{"id":[1000000,18212],"value":"Also, the `a.3` and `c.3` edits were made concurrently, which means that user `a`\n  inserted `"},{"id":[1000000,18310],"value":"\"WP\"` and user `c` inserted `\" \"` "},{"id":[1000000,18346],"value":"at the same time.\n"},{"id":[1000000,18372],"value":"\nThose are "},{"id":[1000000,18387],"value":"not important trivia, "},{"id":[1000000,18413],"value":"now lets look at the same string, but represented\n"},{"id":[1000000,18533],"value":"as a Block-wise RGA. In Block-wise RGA we don't waste memory on storing each\ncharacter separately, instead we store the characters in blocks. Each block has\n"},{"id":[1000000,18781],"value":"a unique ID, which is the ID of the first character in the block. The blocks are\nlinked together in a linked list.\n\n!["},{"id":[1000000,26336],"value":"Single character vs block-wise representation"},{"id":[1000000,18899],"span":10},{"id":[1000000,18909],"value":"](https://streamich.github.io/json-joy/"},{"id":[1000000,18989],"value":"blog/images/blogpost-001/single-char-vs-blockwise.png"},{"id":[1000000,18948],"span":39},{"id":[1000000,18987],"value":")"},{"id":[1000000,18690],"span":32},{"id":[1000000,18770],"span":10},{"id":[1000000,18722],"span":47},{"id":[1000000,18463],"span":28},{"id":[1000000,18497],"span":1},{"id":[1000000,18500],"span":32},{"id":[1000000,18498],"span":1},{"id":[1000000,18491],"span":3},{"id":[1000000,18409],"span":3},{"id":[1000000,18383],"span":2},{"id":[1000000,18364],"span":5},{"id":[1000000,18344],"span":1},{"id":[1000000,18306],"span":2},{"id":[1000000,18210],"span":1},{"id":[1000000,18205],"span":2},{"id":[1000000,18197],"span":1},{"id":[1000000,18184],"span":1},{"id":[1000000,18132],"span":1},{"id":[1000000,18086],"span":3},{"id":[1000000,18031],"span":22},{"id":[1000000,17987],"span":1},{"id":[1000000,15849],"span":14},{"id":[1000000,15813],"span":3},{"id":[1000000,15776],"span":2},{"id":[1000000,15734],"span":1},{"id":[1000000,15729],"span":2},{"id":[1000000,15681],"span":6},{"id":[1000000,15666],"span":1},{"id":[1000000,15607],"span":19},{"id":[1000000,15479],"span":6},{"id":[1000000,15509],"span":1},{"id":[1000000,15485],"span":15},{"id":[1000000,15517],"span":18},{"id":[1000000,15542],"span":7},{"id":[1000000,15535],"span":6},{"id":[1000000,15510],"span":6},{"id":[1000000,15452],"span":5},{"id":[1000000,15391],"span":2},{"id":[1000000,15382],"span":4},{"id":[1000000,15374],"span":6},{"id":[1000000,15365],"span":8},{"id":[1000000,15298],"span":1},{"id":[1000000,15306],"span":1},{"id":[1000000,15299],"span":5},{"id":[1000000,15267],"span":3},{"id":[1000000,15235],"span":2},{"id":[1000000,15226],"span":1},{"id":[1000000,15130],"span":27},{"id":[1000000,15063],"span":22},{"id":[1000000,14984],"span":3},{"id":[1000000,14785],"span":34},{"id":[1000000,14865],"span":1},{"id":[1000000,14871],"span":30},{"id":[1000000,14866],"span":4},{"id":[1000000,14819],"span":45},{"id":[1000000,14732],"span":2},{"id":[1000000,14718],"span":1},{"id":[1000000,14423],"span":14},{"id":[1000000,10542],"span":1},{"id":[1000000,16517],"span":22},{"id":[1000000,16541],"span":34},{"id":[1000000,16577],"span":3},{"id":[1000000,16588],"span":69},{"id":[1000000,16665],"span":9},{"id":[1000000,16680],"span":2},{"id":[1000000,16688],"span":47},{"id":[1000000,16737],"span":20},{"id":[1000000,16819],"span":77},{"id":[1000000,16927],"span":4},{"id":[1000000,16896],"span":27},{"id":[1000000,16998],"span":2},{"id":[1000000,16931],"span":54},{"id":[1000000,17023],"span":8},{"id":[1000000,16985],"span":12},{"id":[1000000,17000],"span":1},{"id":[1000000,17005],"span":15},{"id":[1000000,17070],"span":67},{"id":[1000000,17149],"span":38},{"id":[1000000,17189],"span":3},{"id":[1000000,17187],"span":1},{"id":[1000000,17137],"span":6},{"id":[1000000,17020],"span":2},{"id":[1000000,17031],"span":38},{"id":[1000000,17001],"span":3},{"id":[1000000,16757],"span":32},{"id":[1000000,16791],"span":27},{"id":[1000000,16789],"span":1},{"id":[1000000,16735],"value":"\n"},{"id":[1000000,17984],"value":"\n"},{"id":[1000000,19042],"value":"Each character still has a unique ID"},{"id":[1000000,19082],"value":", it is just the memory is not used to store\nmetadata about characters `a.2"},{"id":[1000000,19159],"value":"` and `a.4`."},{"id":[1000000,19778],"value":"\n\n"},{"id":[1000000,19652],"span":1},{"id":[1000000,19653],"value":"We will insert another block "},{"id":[1000000,19781],"value":"in the middle of an existing block, which "},{"id":[1000000,19828],"value":"will result\ninto a block split. The `\"OOD \"` "},{"id":[1000000,19878],"value":"block "},{"id":[1000000,20180],"value":"with ID `d"},{"id":[1000000,20192],"value":".5` "},{"id":[1000000,20190],"span":1},{"id":[1000000,19884],"value":"will be inserted in between "},{"id":[1000000,19914],"value":"the"},{"id":[1000000,20010],"value":" two"},{"id":[1000000,20197],"value":"\n"},{"id":[1000000,19917],"span":1},{"id":[1000000,19918],"value":"`\"G\"`"},{"id":[1000000,20199],"value":" "},{"id":[1000000,20016],"span":1},{"id":[1000000,20017],"value":"characters."},{"id":[1000000,20200],"value":" ("},{"id":[1000000,20203],"value":"Note that `d` means that it is yet another user, and "},{"id":[1000000,20262],"value":"each character in\n"},{"id":[1000000,20325],"value":"the `d.5` block still implicitly has an ID, which "},{"id":[1000000,20415],"value":"are "},{"id":[1000000,20375],"span":3},{"id":[1000000,20378],"value":"`d."},{"id":[1000000,20420],"value":"5"},{"id":[1000000,20381],"span":3},{"id":[1000000,20384],"value":"`, `d."},{"id":[1000000,20426],"value":"6"},{"id":[1000000,20390],"span":3},{"id":[1000000,20393],"value":"`, `d."},{"id":[1000000,20430],"value":"7"},{"id":[1000000,20399],"span":3},{"id":[1000000,20402],"value":"`, `d."},{"id":[1000000,20434],"value":"8"},{"id":[1000000,20408],"span":3},{"id":[1000000,20411],"value":"`.)"},{"id":[1000000,20280],"span":6},{"id":[1000000,20288],"span":1},{"id":[1000000,20291],"span":33},{"id":[1000000,20289],"span":1},{"id":[1000000,20286],"span":1},{"id":[1000000,20256],"span":5},{"id":[1000000,20202],"span":1},{"id":[1000000,20029],"value":"\n"},{"id":[1000000,20030],"span":1},{"id":[1000000,20031],"value":"\n!["},{"id":[1000000,26596],"value":"B"},{"id":[1000000,26499],"span":1},{"id":[1000000,26500],"value":"lock"},{"id":[1000000,26598],"value":" "},{"id":[1000000,26504],"span":1},{"id":[1000000,26505],"value":"insert"},{"id":[1000000,26395],"span":7},{"id":[1000000,26411],"span":6},{"id":[1000000,26409],"span":1},{"id":[1000000,26402],"span":6},{"id":[1000000,20034],"span":10},{"id":[1000000,20044],"value":"](https://streamich.github.io/json-joy/"},{"id":[1000000,20139],"value":"blog/images/blogpost-001/block-insert.png"},{"id":[1000000,20083],"span":53},{"id":[1000000,20136],"value":")"},{"id":[1000000,19923],"span":86},{"id":[1000000,19912],"span":1},{"id":[1000000,19873],"span":4},{"id":[1000000,19823],"span":4},{"id":[1000000,19682],"span":7},{"id":[1000000,19691],"span":2},{"id":[1000000,19699],"span":77},{"id":[1000000,19776],"value":"\n"},{"id":[1000000,19693],"span":5},{"id":[1000000,19689],"span":1},{"id":[1000000,19648],"span":2},{"id":[1000000,19263],"span":1},{"id":[1000000,19264],"value":"\n"},{"id":[1000000,19173],"span":1},{"id":[1000000,19174],"value":"Block-wise representation is our first"},{"id":[1000000,19266],"value":" "},{"id":[1000000,19214],"span":1},{"id":[1000000,19215],"value":"optimization, "},{"id":[1000000,19234],"value":"lets look at the second one."},{"id":[1000000,19275],"value":"\nThe second important optimization is that we "},{"id":[1000000,19323],"value":"don't store the blocks in a linked\n"},{"id":[1000000,19499],"value":"list, instead we store them in a binary tree, or more specifically in a [Rope][rope]."},{"id":[1000000,20436],"value":"\n"},{"id":[1000000,20501],"value":"So, a little more precisely, the situation could look like this:\n\n!["},{"id":[1000000,26594],"value":"T"},{"id":[1000000,26484],"span":1},{"id":[1000000,26485],"value":"ext"},{"id":[1000000,26591],"value":" R"},{"id":[1000000,26488],"span":2},{"id":[1000000,26490],"value":"ope"},{"id":[1000000,26587],"value":" t"},{"id":[1000000,26493],"span":2},{"id":[1000000,26495],"value":"ree"},{"id":[1000000,26418],"span":12},{"id":[1000000,26432],"span":1},{"id":[1000000,26430],"span":1},{"id":[1000000,20569],"span":10},{"id":[1000000,20579],"value":"](https://streamich.github.io/json-joy/"},{"id":[1000000,20661],"value":"blog/images/blogpost-001/text-rope-tree.png"},{"id":[1000000,20618],"span":41},{"id":[1000000,20659],"value":")"},{"id":[1000000,20704],"value":"\n\nNote, in the tree we see th"},{"id":[1000000,20735],"value":"at there are two tombstones `b"},{"id":[1000000,20767],"value":"."},{"id":[1000000,20772],"value":"1` and `b.2`, which means\nit used to be text which was inser"},{"id":[1000000,20836],"value":"ted concurrently with `a"},{"id":[1000000,20862],"value":".1`, but "},{"id":[1000000,20877],"value":"was deleted. Also,"},{"id":[1000000,20897],"value":" there\nis a "},{"id":[1000000,20918],"value":"*split link\" b"},{"id":[1000000,20934],"value":"etween the `b"},{"id":[1000000,20949],"value":".1` and `b.2` blocks, which means that the `a"},{"id":[1000000,20996],"value":".1` block w"},{"id":[1000000,21009],"value":"as"},{"id":[1000000,21021],"value":"\n"},{"id":[1000000,21045],"value":"inserted in the middle of the `b.1` block"},{"id":[1000000,21126],"value":", before `b"},{"id":[1000000,21139],"value":".1`"},{"id":[1000000,21157],"value":" and `b."},{"id":[1000000,21167],"value":"2` were "},{"id":[1000000,21183],"value":"deleted. The fact"},{"id":[1000000,21202],"value":"\nthat `b` nod"},{"id":[1000000,21217],"value":"es are deleted now"},{"id":[1000000,21245],"value":" is not important, but it is important to note that we "},{"id":[1000000,21304],"value":"keep\ntrack of split links, which allow for faster "},{"id":[1000000,21364],"value":"traversal of the tree.\n\n"},{"id":[1000000,21449],"value":"Now that we know the general setup, lets look at the actual insert"},{"id":[1000000,21536],"value":", through a "},{"id":[1000000,21554],"value":"series\n"},{"id":[1000000,21625],"value":"of a three step process. First, we need to split the `\"GG\"` block, which is done by\ninserting a new block with ID `a2`.\n\n!["},{"id":[1000000,26434],"value":"Insert step "},{"id":[1000000,26482],"value":"1"},{"id":[1000000,26448],"span":1},{"id":[1000000,26446],"span":1},{"id":[1000000,21748],"span":10},{"id":[1000000,21758],"value":"](https://streamich.github.io/json-joy/"},{"id":[1000000,21842],"value":"blog/images/blogpost-001/insert-step-1.png"},{"id":[1000000,21797],"span":43},{"id":[1000000,21840],"value":")"},{"id":[1000000,21884],"value":"\n\nIn the process a new split link `s3` is created, this will allow for faster traversal, for example,\nwhen somebody will want to delete both `\"GG\"` characters, we will not need to traverse the\nwhole tree to "},{"id":[1000000,22096],"value":"find the second `\"G\"` character, we "},{"id":[1000000,22135],"value":"will just follow the split link `s3` to\nthe second `\"G\"` character. Also, note that w"},{"id":[1000000,22222],"value":"hen serializing "},{"id":[1000000,22240],"value":"the tree, we can remove "},{"id":[1000000,22272],"value":"all the\nsplit links"},{"id":[1000000,22293],"value":", because we can "},{"id":[1000000,22316],"value":"reconstruct them on the fly, when de-serializing the tree.\n\nSecond, we need to insert the `\"OOD \"` block, which is done by inserting a new block with"},{"id":[1000000,22575],"value":"\n"},{"id":[1000000,22465],"span":1},{"id":[1000000,22570],"value":"the "},{"id":[1000000,22466],"value":"ID `d.5`.\n"},{"id":[1000000,22310],"span":5},{"id":[1000000,22291],"span":1},{"id":[1000000,22264],"span":4},{"id":[1000000,22238],"span":1},{"id":[1000000,22220],"span":1},{"id":[1000000,22132],"span":2},{"id":[1000000,22091],"span":4},{"id":[1000000,21561],"span":16},{"id":[1000000,21581],"span":43},{"id":[1000000,21579],"span":1},{"id":[1000000,21577],"span":1},{"id":[1000000,21548],"span":5},{"id":[1000000,21515],"span":16},{"id":[1000000,21388],"span":60},{"id":[1000000,21354],"span":9},{"id":[1000000,21300],"span":2},{"id":[1000000,21235],"span":5},{"id":[1000000,21215],"span":1},{"id":[1000000,21200],"span":1},{"id":[1000000,21175],"span":6},{"id":[1000000,21165],"span":1},{"id":[1000000,21142],"span":14},{"id":[1000000,21137],"span":1},{"id":[1000000,21086],"span":39},{"id":[1000000,21011],"span":9},{"id":[1000000,21022],"span":22},{"id":[1000000,21007],"span":1},{"id":[1000000,20994],"span":1},{"id":[1000000,20947],"span":1},{"id":[1000000,20932],"span":1},{"id":[1000000,20916],"span":1},{"id":[1000000,20909],"span":6},{"id":[1000000,20895],"span":1},{"id":[1000000,20871],"span":3},{"id":[1000000,20860],"span":1},{"id":[1000000,20832],"span":2},{"id":[1000000,20770],"span":1},{"id":[1000000,20768],"span":1},{"id":[1000000,20765],"span":1},{"id":[1000000,20733],"span":1},{"id":[1000000,20439],"span":24},{"id":[1000000,20465],"span":35},{"id":[1000000,20463],"span":1},{"id":[1000000,20437],"span":1},{"id":[1000000,19646],"value":"\n"},{"id":[1000000,22476],"value":"!["},{"id":[1000000,26450],"value":"Insert step "},{"id":[1000000,26464],"value":"2"},{"id":[1000000,26462],"span":1},{"id":[1000000,22478],"span":10},{"id":[1000000,22488],"value":"](https://streamich.github.io/json-joy/blog/images/blogpost-001/insert-step-"},{"id":[1000000,22577],"value":"2"},{"id":[1000000,22564],"span":1},{"id":[1000000,22565],"value":".png)"},{"id":[1000000,19647],"value":"\n"},{"id":[1000000,19358],"span":39},{"id":[1000000,19436],"span":5},{"id":[1000000,19445],"span":10},{"id":[1000000,19458],"span":18},{"id":[1000000,19494],"span":1},{"id":[1000000,19490],"span":4},{"id":[1000000,19497],"span":1},{"id":[1000000,19495],"span":1},{"id":[1000000,19476],"span":11},{"id":[1000000,19455],"span":2},{"id":[1000000,19441],"span":2},{"id":[1000000,19397],"span":38},{"id":[1000000,19321],"span":1},{"id":[1000000,19267],"span":4},{"id":[1000000,19229],"span":4},{"id":[1000000,19212],"span":1},{"id":[1000000,19171],"value":"\n"},{"id":[1000000,22578],"value":"Finally, we perform rotations such"},{"id":[1000000,22614],"value":" that the "},{"id":[1000000,22628],"value":"new block `d.5` is rotated to the top, while\nthe `a.1` and `a.2` blocks are rotated to the bottom.\n\n!["},{"id":[1000000,26466],"value":"Insert step "},{"id":[1000000,26480],"value":"3"},{"id":[1000000,26478],"span":1},{"id":[1000000,22730],"span":10},{"id":[1000000,22740],"value":"](https://streamich.github.io/json-joy/blog/images/blogpost-001/insert-step-3.png)"},{"id":[1000000,22624],"span":3},{"id":[1000000,22612],"span":1},{"id":[1000000,19172],"value":"\n"},{"id":[1000000,22822],"value":"\n"},{"id":[1000000,22974],"value":"Now the example above is a bit simplified, because in reality we have two trees, one for\nthe Text Rope and one for the Identifier Table."},{"id":[1000000,23480],"value":" "},{"id":[1000000,23516],"value":"Actually, for optimization purposes the same\n"},{"id":[1000000,23568],"value":"nodes are used in both trees, so the trees are not separate, but rather they are "},{"id":[1000000,23659],"value":"different"},{"id":[1000000,23670],"value":"\nsorted views of the same data"},{"id":[1000000,23701],"value":", but that "},{"id":[1000000,23715],"value":"is an implementation detail. The important thing is\nthat we have two trees, one for the Text Rope and one for the Identifier Table"},{"id":[1000000,23861],"value":", and here is\nhow "},{"id":[1000000,23883],"value":"both trees "},{"id":[1000000,23941],"value":"conceptually"},{"id":[1000000,23924],"span":5},{"id":[1000000,23929],"value":" look like"},{"id":[1000000,23894],"span":26},{"id":[1000000,23920],"value":":"},{"id":[1000000,23879],"span":3},{"id":[1000000,23845],"span":15},{"id":[1000000,23712],"span":2},{"id":[1000000,23668],"span":1},{"id":[1000000,23649],"span":9},{"id":[1000000,23658],"value":"\n"},{"id":[1000000,23561],"span":6},{"id":[1000000,23481],"span":5},{"id":[1000000,23490],"span":22},{"id":[1000000,23486],"span":2},{"id":[1000000,23234],"span":1},{"id":[1000000,23235],"value":"\n"},{"id":[1000000,25102],"value":"!["},{"id":[1000000,26520],"value":"Example with "},{"id":[1000000,26538],"value":"Identifier "},{"id":[1000000,26551],"value":"Table"},{"id":[1000000,26549],"span":1},{"id":[1000000,26533],"span":4},{"id":[1000000,26512],"span":7},{"id":[1000000,25104],"span":10},{"id":[1000000,25114],"value":"](https://streamich.github.io/json-joy/blog/images/blogpost-001/with-identifier-table.png)\n"},{"id":[1000000,25206],"value":"\n"},{"id":[1000000,25208],"value":"Note that in both trees the newly inserted blocks are rotated to the top of the trees, which\n"},{"id":[1000000,25302],"value":"for typical user interactions is a good thing. Users type sequentially whole sentences at a time.\n"},{"id":[1000000,25401],"value":"Rotating recently accessed content to the top often leads to less then `O(log n)` insertion time\n"},{"id":[1000000,25499],"value":"for the next character, because the next character is likely to be inserted in the same block\n"},{"id":[1000000,25594],"value":"as the previous character, which is already at the top of the tree.\n"},{"id":[1000000,25663],"value":"\n"},{"id":[1000000,25665],"value":"And this leads to the final optimization that I will mention: merging blocks. When a user\n"},{"id":[1000000,25756],"value":"types a whole word, or a sentence, or a paragraph sequentially, we do not create a new block\n"},{"id":[1000000,25850],"value":"for each character. Instead, a new block is created only when user changes the cursor position.\n"},{"id":[1000000,25947],"value":"So, if a user types a whole word, or a sentence, or a paragraph sequentially, we will create\n"},{"id":[1000000,26041],"value":"a single block for the whole word, or sentence, or paragraph. This is done by merging the\n"},{"id":[1000000,26132],"value":"blocks with adjacent IDs."},{"id":[1000000,26158],"value":"\n"},{"id":[1000000,26157],"value":"\n"},{"id":[1000000,23236],"value":"!["},{"id":[1000000,26557],"value":"Character merging into block"},{"id":[1000000,23238],"span":10},{"id":[1000000,23248],"value":"]("},{"id":[1000000,26202],"value":"https://streamich.github.io/json-joy/"},{"id":[1000000,26290],"value":"blog/images/blogpost-001/char-merging.png"},{"id":[1000000,26239],"span":50},{"id":[1000000,26160],"span":41},{"id":[1000000,23250],"span":37},{"id":[1000000,23331],"span":51},{"id":[1000000,23287],"span":42},{"id":[1000000,23329],"value":")"},{"id":[1000000,23383],"span":6},{"id":[1000000,23391],"span":24},{"id":[1000000,23421],"span":44},{"id":[1000000,23954],"span":21},{"id":[1000000,23993],"span":45},{"id":[1000000,24081],"span":2},{"id":[1000000,24091],"span":51},{"id":[1000000,24228],"span":82},{"id":[1000000,24335],"span":28},{"id":[1000000,24373],"span":148},{"id":[1000000,24363],"span":9},{"id":[1000000,24333],"span":1},{"id":[1000000,24322],"span":10},{"id":[1000000,24310],"span":11},{"id":[1000000,24521],"span":1},{"id":[1000000,24593],"span":107},{"id":[1000000,24710],"span":16},{"id":[1000000,24730],"span":50},{"id":[1000000,24786],"span":85},{"id":[1000000,24873],"span":229},{"id":[1000000,24871],"span":1},{"id":[1000000,24780],"span":5},{"id":[1000000,24728],"span":1},{"id":[1000000,24726],"span":1},{"id":[1000000,24700],"span":5},{"id":[1000000,24522],"span":70},{"id":[1000000,24142],"span":9},{"id":[1000000,24157],"span":37},{"id":[1000000,24200],"span":22},{"id":[1000000,24224],"span":3},{"id":[1000000,24222],"span":1},{"id":[1000000,24194],"span":5},{"id":[1000000,24151],"span":5},{"id":[1000000,24083],"span":4},{"id":[1000000,24038],"span":42},{"id":[1000000,23975],"span":17},{"id":[1000000,23479],"span":1},{"id":[1000000,23465],"span":11},{"id":[1000000,23415],"span":5},{"id":[1000000,23389],"span":1},{"id":[1000000,23110],"span":122},{"id":[1000000,22848],"span":51},{"id":[1000000,22944],"span":7},{"id":[1000000,22953],"span":7},{"id":[1000000,22964],"span":9},{"id":[1000000,22960],"span":2},{"id":[1000000,22951],"span":1},{"id":[1000000,22899],"span":36},{"id":[1000000,22823],"span":1},{"id":[1000000,22826],"span":21},{"id":[1000000,22824],"span":1},{"id":[1000000,19157],"span":1},{"id":[1000000,19078],"span":2},{"id":[1000000,16736],"value":"\n"},{"id":[1000000,16682],"span":3},{"id":[1000000,16674],"span":3},{"id":[1000000,16657],"span":5},{"id":[1000000,16584],"span":3},{"id":[1000000,16580],"span":2},{"id":[1000000,16575],"span":1},{"id":[1000000,16539],"span":1},{"id":[1000000,10543],"value":"\n\n## Benchmarks\n"},{"id":[1000000,26599],"value":"\n"},{"id":[1000000,26609],"value":"In th"},{"id":[1000000,26624],"value":"is"},{"id":[1000000,26632],"value":" sectio"},{"id":[1000000,26647],"value":"n we will benchmark `json-joy` implementation of `StringRga` against other"},{"id":[1000000,26733],"value":"\n"},{"id":[1000000,26721],"span":1},{"id":[1000000,26722],"value":"libraries."},{"id":[1000000,26734],"value":" For that, lets first take a look at the data"},{"id":[1000000,26783],"value":"sets wi will use for benchmarking.\n"},{"id":[1000000,26836],"value":"\n"},{"id":[1000000,26818],"value":"\n"},{"id":[1000000,26824],"value":"### Datasets"},{"id":[1000000,26837],"value":"\n\n"},{"id":[1000000,32722],"value":"There will be no micro"},{"id":[1000000,32778],"value":" "},{"id":[1000000,32744],"value":"benchmarks, only "},{"id":[1000000,32767],"value":"real world"},{"id":[1000000,32779],"value":" large text documents will be tested."},{"id":[1000000,32777],"value":" "},{"id":[1000000,32761],"span":5},{"id":[1000000,26839],"value":"Fi"},{"id":[1000000,26843],"value":"ve"},{"id":[1000000,34584],"value":"\n"},{"id":[1000000,26845],"span":1},{"id":[1000000,26846],"value":"realistic"},{"id":[1000000,32817],"span":1},{"id":[1000000,26855],"span":3},{"id":[1000000,26858],"value":" relatively long text documents will be used.\n\n- The first one is the editing trace of this blog post, yes, the one you are reading"},{"id":[1000000,33145],"value":" now"},{"id":[1000000,33144],"value":"!"},{"id":[1000000,26989],"span":1},{"id":[1000000,26990],"value":" It is"},{"id":[1000000,27004],"value":"\n  "},{"id":[1000000,26996],"span":1},{"id":[1000000,26997],"value":"called"},{"id":[1000000,27007],"value":" `json"},{"id":[1000000,27019],"value":"-joy-crdt"},{"id":[1000000,27032],"value":"`"},{"id":[1000000,33149],"span":13},{"id":[1000000,27033],"value":", the tra"},{"id":[1000000,27046],"value":"ce "},{"id":[1000000,27059],"value":"contains all inserts and del"},{"id":[1000000,27095],"value":"etes made to type this blog"},{"id":[1000000,27129],"value":"\n  "},{"id":[1000000,27122],"span":1},{"id":[1000000,27123],"value":"post."},{"id":[1000000,32882],"value":" T"},{"id":[1000000,32892],"value":"he trace was "},{"id":[1000000,34589],"value":"collected"},{"id":[1000000,32905],"span":7},{"id":[1000000,32912],"value":" us"},{"id":[1000000,32917],"value":"i"},{"id":[1000000,32920],"value":"n"},{"id":[1000000,32929],"value":"g the "},{"id":[1000000,32937],"value":"["},{"id":[1000000,32990],"value":"`"},{"id":[1000000,32938],"value":"vscode-tracker"},{"id":[1000000,32991],"value":"`"},{"id":[1000000,32952],"value":"][vscode-tracker] "},{"id":[1000000,32972],"value":"VS Code extension."},{"id":[1000000,32970],"span":1},{"id":[1000000,32935],"span":1},{"id":[1000000,32921],"span":4},{"id":[1000000,32918],"span":1},{"id":[1000000,32915],"span":1},{"id":[1000000,32884],"span":4},{"id":[1000000,27298],"span":3},{"id":[1000000,27263],"span":11},{"id":[1000000,27282],"span":14},{"id":[1000000,27278],"span":2},{"id":[1000000,27274],"span":2},{"id":[1000000,27132],"value":"\n"},{"id":[1000000,27136],"value":"- "},{"id":[1000000,27302],"value":"The other "},{"id":[1000000,27314],"value":"four traces are taken from the ["},{"id":[1000000,27347],"value":"CRDT benchmarks"},{"id":[1000000,27363],"value":"]"},{"id":[1000000,27605],"value":"[crdt-benchmarks]"},{"id":[1000000,27364],"span":1},{"id":[1000000,27367],"span":1},{"id":[1000000,27368],"value":" reposit"},{"id":[1000000,27378],"value":"ory, see this"},{"id":[1000000,27536],"value":"\n  "},{"id":[1000000,27391],"span":1},{"id":[1000000,27421],"value":"["},{"id":[1000000,27392],"value":"description and license info"},{"id":[1000000,34598],"value":"rmation"},{"id":[1000000,27422],"value":"]("},{"id":[1000000,27425],"value":"https://github.com/josephg/crdt-benchmarks/blob/7b0b90e912cfa88aff8c6336917343ee08653e51/README.md#data-sets"},{"id":[1000000,27534],"value":")"},{"id":[1000000,27424],"span":1},{"id":[1000000,27420],"value":"."},{"id":[1000000,27622],"value":"\n  - The first "},{"id":[1000000,32717],"value":"trace"},{"id":[1000000,27643],"span":3},{"id":[1000000,27646],"value":" is the canonical `automerge-paper` trace, made by "},{"id":[1000000,27706],"value":"Martin Kleppmann, the author\n"},{"id":[1000000,27774],"value":"    of the [Automerge][automerge] library."},{"id":[1000000,32992],"value":" The editing trace was collected while writing the"},{"id":[1000000,33098],"value":"\n    ["},{"id":[1000000,33104],"span":1},{"id":[1000000,33042],"span":1},{"id":[1000000,33043],"value":"\"A "},{"id":[1000000,33051],"value":"Conflict-Free Replicated JSON Datatype\" paper"},{"id":[1000000,33106],"value":"]("},{"id":[1000000,33109],"value":"https://arxiv.org/abs/1608.03960"},{"id":[1000000,33142],"value":")"},{"id":[1000000,33108],"span":1},{"id":[1000000,33096],"value":"."},{"id":[1000000,33166],"value":" It"},{"id":[1000000,33245],"value":"\n    "},{"id":[1000000,33169],"span":1},{"id":[1000000,33215],"span":2},{"id":[1000000,33225],"span":5},{"id":[1000000,33217],"span":7},{"id":[1000000,33230],"span":10},{"id":[1000000,33241],"span":1},{"id":[1000000,33240],"span":1},{"id":[1000000,33170],"value":"contains"},{"id":[1000000,33251],"value":" "},{"id":[1000000,33178],"span":5},{"id":[1000000,33183],"value":"259"},{"id":[1000000,33189],"value":","},{"id":[1000000,33186],"value":"778"},{"id":[1000000,33190],"value":" "},{"id":[1000000,33998],"value":"single character "},{"id":[1000000,33191],"value":"insert/delete operations"},{"id":[1000000,33252],"value":", with the final document size"},{"id":[1000000,34016],"value":"\n    "},{"id":[1000000,33282],"span":1},{"id":[1000000,33283],"value":"of 104"},{"id":[1000000,33292],"value":","},{"id":[1000000,33289],"value":"852"},{"id":[1000000,33293],"value":" "},{"id":[1000000,33298],"value":"bytes"},{"id":[1000000,33305],"value":", which"},{"id":[1000000,34022],"value":" "},{"id":[1000000,33312],"span":1},{"id":[1000000,33364],"span":4},{"id":[1000000,33368],"value":"result"},{"id":[1000000,33997],"value":"s"},{"id":[1000000,33374],"value":" in"},{"id":[1000000,33377],"span":1},{"id":[1000000,33378],"value":" 12,387"},{"id":[1000000,33984],"value":" `json-joy` "},{"id":[1000000,33385],"span":1},{"id":[1000000,33386],"value":"RGA blocks in the tree."},{"id":[1000000,33313],"span":15},{"id":[1000000,33330],"span":2},{"id":[1000000,33335],"span":1},{"id":[1000000,33332],"span":3},{"id":[1000000,33336],"span":1},{"id":[1000000,33352],"span":11},{"id":[1000000,33337],"span":8},{"id":[1000000,33328],"span":1},{"id":[1000000,33303],"span":1},{"id":[1000000,33294],"span":2},{"id":[1000000,33046],"span":4},{"id":[1000000,27870],"value":"\n"},{"id":[1000000,27876],"value":"  - "},{"id":[1000000,33413],"value":"The second one is `seph-blog1` trace, which is a trace by Seph Gentle "},{"id":[1000000,33501],"value":"collected while writing\n"},{"id":[1000000,33589],"value":"    the [\"5000x faster CRDTs: An Adventure in Optimization\"][seph-blog1] blog post."},{"id":[1000000,33752],"value":" The trace contains\n"},{"id":[1000000,33813],"value":"    137,154 insert/delete operations, with the final document size of "},{"id":[1000000,33913],"value":"56"},{"id":[1000000,33918],"value":","},{"id":[1000000,33915],"value":"769"},{"id":[1000000,33883],"span":9},{"id":[1000000,33892],"value":" bytes, which result"},{"id":[1000000,33919],"value":"s\n"},{"id":[1000000,33936],"value":"    in 18,222 "},{"id":[1000000,33973],"value":"`json-joy` "},{"id":[1000000,33950],"value":"RGA blocks in the tree."},{"id":[1000000,34034],"value":"\n"},{"id":[1000000,34040],"value":"  - "},{"id":[1000000,34046],"value":"T"},{"id":[1000000,34055],"value":"he third one is `rustcode`"},{"id":[1000000,34081],"span":40},{"id":[1000000,34121],"value":". It contains 36"},{"id":[1000000,34140],"value":","},{"id":[1000000,34137],"value":"981"},{"id":[1000000,34143],"value":"\n"},{"id":[1000000,34149],"value":"    insert/delete operations, with the final document size of "},{"id":[1000000,34289],"value":"65"},{"id":[1000000,34294],"value":","},{"id":[1000000,34291],"value":"218"},{"id":[1000000,34211],"span":6},{"id":[1000000,34217],"value":" bytes, which results in\n    "},{"id":[1000000,34296],"value":"12"},{"id":[1000000,34301],"value":","},{"id":[1000000,34298],"value":"505"},{"id":[1000000,34246],"span":5},{"id":[1000000,34251],"value":" `json-joy` RGA blocks in the tree."},{"id":[1000000,34302],"value":"\n"},{"id":[1000000,34358],"value":"  - The last one is `sveltecomponent`, it contains "},{"id":[1000000,34564],"value":"18"},{"id":[1000000,34569],"value":","},{"id":[1000000,34566],"value":"335"},{"id":[1000000,34409],"span":9},{"id":[1000000,34418],"value":" insert/delete operations, with the\n    final document size of "},{"id":[1000000,34571],"value":"18"},{"id":[1000000,34576],"value":","},{"id":[1000000,34573],"value":"451"},{"id":[1000000,34481],"span":9},{"id":[1000000,34490],"value":" bytes, which results in "},{"id":[1000000,34578],"value":"5"},{"id":[1000000,34582],"value":","},{"id":[1000000,34579],"value":"813"},{"id":[1000000,34515],"span":9},{"id":[1000000,34524],"value":" `json-joy` RGA blocks in\n    the tree."},{"id":[1000000,34308],"span":5},{"id":[1000000,34319],"span":32},{"id":[1000000,34352],"span":5},{"id":[1000000,34313],"span":3},{"id":[1000000,34303],"span":4},{"id":[1000000,34144],"span":4},{"id":[1000000,34141],"span":1},{"id":[1000000,34047],"span":1},{"id":[1000000,34052],"span":1},{"id":[1000000,34048],"span":2},{"id":[1000000,34044],"span":1},{"id":[1000000,34035],"span":4},{"id":[1000000,34030],"span":2},{"id":[1000000,34023],"span":5},{"id":[1000000,33921],"span":9},{"id":[1000000,33933],"span":1},{"id":[1000000,33930],"span":3},{"id":[1000000,33934],"span":1},{"id":[1000000,33772],"span":7},{"id":[1000000,33782],"span":1},{"id":[1000000,33779],"span":3},{"id":[1000000,33783],"span":7},{"id":[1000000,33792],"span":20},{"id":[1000000,33790],"span":1},{"id":[1000000,33672],"span":12},{"id":[1000000,33525],"span":9},{"id":[1000000,33535],"span":1},{"id":[1000000,33538],"span":49},{"id":[1000000,33536],"span":1},{"id":[1000000,33534],"span":1},{"id":[1000000,33587],"span":1},{"id":[1000000,33483],"span":2},{"id":[1000000,33491],"span":8},{"id":[1000000,33487],"span":2},{"id":[1000000,33485],"span":1},{"id":[1000000,27880],"span":3},{"id":[1000000,27883],"value":"\n"},{"id":[1000000,35718],"value":"\nEach dataset contains a list of insert or de"},{"id":[1000000,35765],"value":"lete "},{"id":[1000000,35774],"value":"operations, "},{"id":[1000000,35805],"value":"each operations "},{"id":[1000000,35823],"value":"specifies the position\nin the document and whether text needs to be inserted or deleted at that position."},{"id":[1000000,37668],"value":"\n\nHere is the sample of the first operations of the `automerge-paper` "},{"id":[1000000,37752],"value":"editing trace:"},{"id":[1000000,37740],"span":10},{"id":[1000000,37738],"span":1},{"id":[1000000,35928],"value":"\n\n```"},{"id":[1000000,37665],"span":1},{"id":[1000000,37666],"value":"js"},{"id":[1000000,35933],"value":"\n"},{"id":[1000000,35940],"value":"[\n  [ 0, 0, '\\\\' ],  [ 1, 0, 'd' ],   [ 2, 0, 'o' ],   [ 3, 0, 'c' ],\n  [ 4, 0, 'u' ],   [ 5, 0, 'm' ],   [ 6, 0, 'e' ],   [ 7, 0, 'n' ],\n  [ 8, 0, 't' ],   [ 9, 0, 'c' ],   [ 10, 0, 'l' ],  [ 11, 0, 'a' ],\n  [ 12, 0, 's' ],  [ 13, 0, 's' ],  [ 14, 0, '[' ],  [ 15, 0, 'a' ],\n  [ 16, 0, '4' ],  [ 17, 0, 'p' ],  [ 18, 0, 'a' ],  [ 19, 0, 'p' ],\n  [ 20, 0, 'e' ],  [ 21, 0, 'r' ],  [ 22, 0, ',' ],  [ 23, 0, 't' ],\n  [ 24, 0, 'w' ],  [ 25, 0, 'o' ],  [ 26, 0, 'c' ],  [ 27, 0, 'o' ],\n  [ 28, 0, 'l' ],  [ 29, 0, 'u' ],  [ 30, 0, 'm' ],  [ 31, 0, 'n' ],\n  [ 32, 0, ',' ],  [ 33, 0, '1' ],  [ 34, 0, '0' ],  [ 35, 0, 'p' ],\n  [ 36, 0, 't' ],  [ 37, 0, ']' ],  [ 38, 0, '{' ],  [ 39, 0, 'a' ],\n  [ 40, 0, 'r' ],  [ 41, 0, 't' ],  [ 42, 0, 'i' ],  [ 43, 0, 'c' ],\n  [ 44, 0, 'l' ],  [ 45, 0, 'e' ],  [ 46, 0, '}' ],  [ 47, 0, '\\n' ],\n  [ 48, 0, '\\\\' ], [ 49, 0, 'u' ],  [ 50, 0, 's' ],  [ 51, 0, 'e' ],\n  [ 52, 0, 'p' ],  [ 53, 0, 'a' ],  [ 54, 0, 'c' ],  [ 55, 0, 'k' ],\n  [ 56, 0, 'a' ],  [ 57, 0, 'g' ],  [ 58, 0, 'e' ],  [ 59, 0, '{' ],\n  [ 59, 1, '' ],   [ 59, 0, '[' ],  [ 60, 0, 'u' ],  [ 61, 0, 't' ],\n  [ 62, 0, 'f' ],  [ 63, 0, '8' ],  [ 64, 0, ']' ],  [ 65, 0, '{' ],\n  [ 66, 0, 'i' ],  [ 67, 0, 'n' ],  [ 68, 0, 'p' ],  [ 69, 0, 'u' ],\n  [ 70, 0, 't' ],  [ 71, 0, 'e' ],  [ 72, 0, 'n' ],  [ 73, 0, 'c' ],\n  [ 74, 0, '}' ],  [ 75, 0, '\\n' ], [ 76, 0, '\\\\' ], [ 77, 0, 'u' ],\n  [ 78, 0, 's' ],  [ 79, 0, 'e' ],  [ 80, 0, 'p' ],  [ 81, 0, 'a' ],\n  [ 82, 0, 'c' ],  [ 83, 0, 'k' ],  [ 84, 0, 'a' ],  [ 85, 0, 'g' ],\n  [ 86, 0, 'e' ],  [ 87, 0, '{' ],  [ 88, 0, 'm' ],  [ 89, 0, 'a' ],\n  [ 90, 0, 't' ],  [ 91, 0, 'h' ],  [ 92, 0, 'p' ],  [ 93, 0, 't' ],\n  [ 94, 0, 'm' ],  [ 95, 0, 'x' ],  [ 96, 0, '}' ],  [ 97, 0, ' ' ],"},{"id":[1000000,35934],"span":1},{"id":[1000000,35935],"value":"\n```"},{"id":[1000000,37766],"value":"\n\n"},{"id":[1000000,37816],"value":"Each operation is a 3-tuple which contains"},{"id":[1000000,37914],"value":": (1) "},{"id":[1000000,37858],"span":1},{"id":[1000000,37859],"value":"the position in the document"},{"id":[1000000,37922],"value":"; (2) "},{"id":[1000000,37887],"span":2},{"id":[1000000,37889],"value":"the length of"},{"id":[1000000,37929],"value":"\n"},{"id":[1000000,37902],"span":1},{"id":[1000000,37903],"value":"the text"},{"id":[1000000,37930],"value":" to be del"},{"id":[1000000,37944],"value":"eted; and ("},{"id":[1000000,37956],"value":"3"},{"id":[1000000,37958],"value":") the text t"},{"id":[1000000,37972],"value":"o be inserted at that position."},{"id":[1000000,37970],"span":1},{"id":[1000000,37955],"span":1},{"id":[1000000,37940],"span":2},{"id":[1000000,37911],"value":"\n\n"},{"id":[1000000,37768],"span":47},{"id":[1000000,35821],"span":1},{"id":[1000000,35786],"span":17},{"id":[1000000,35770],"span":2},{"id":[1000000,35763],"span":1},{"id":[1000000,34633],"span":1},{"id":[1000000,34605],"value":"\n"},{"id":[1000000,34607],"value":"### "},{"id":[1000000,35327],"value":"Benchmarks "},{"id":[1000000,35344],"value":"ag"},{"id":[1000000,35712],"value":"a"},{"id":[1000000,35346],"value":"inst "},{"id":[1000000,35714],"value":"CRDT"},{"id":[1000000,35351],"span":5},{"id":[1000000,35356],"value":" libraries"},{"id":[1000000,35338],"span":5},{"id":[1000000,34613],"span":20},{"id":[1000000,34634],"value":"\n\n"},{"id":[1000000,34700],"value":"First we will benchmark `json-joy` against a peer group of other CRDT libraries"},{"id":[1000000,34789],"value":":\n\n"},{"id":[1000000,34798],"value":"- ["},{"id":[1000000,34802],"value":"Automerge"},{"id":[1000000,34812],"value":"]["},{"id":[1000000,34815],"value":"automerge"},{"id":[1000000,34814],"value":"]"},{"id":[1000000,34824],"value":" is "},{"id":[1000000,34830],"value":"probably the best known RGA"},{"id":[1000000,35038],"value":" algorithm"},{"id":[1000000,35053],"value":" implementation "},{"id":[1000000,35049],"span":2},{"id":[1000000,34857],"span":1},{"id":[1000000,34865],"span":25},{"id":[1000000,34890],"value":"in J"},{"id":[1000000,34898],"value":"avaScript.\n- ["},{"id":[1000000,34915],"value":"Y.js"},{"id":[1000000,34913],"span":1},{"id":[1000000,34912],"value":"]"},{"id":[1000000,34919],"value":"["},{"id":[1000000,34923],"value":"yjs"},{"id":[1000000,34927],"value":"] is the most "},{"id":[1000000,34943],"value":"widely used JavaS"},{"id":[1000000,34972],"value":"cript CRDT library, which implements "},{"id":[1000000,35016],"value":"YATA algorithm"},{"id":[1000000,35037],"value":"."},{"id":[1000000,35069],"value":"\n"},{"id":[1000000,35197],"value":"- [Y.rs][yrs] is a port of Y.js to Rust. We use the `ywasm` package, which is a WebAssembly\n  module compiled from "},{"id":[1000000,35322],"value":"its "},{"id":[1000000,35312],"value":"Rust code."},{"id":[1000000,35366],"value":"\n"},{"id":[1000000,38014],"value":"\n"},{"id":[1000000,41627],"value":"Below is a sample output of running the benchmarks"},{"id":[1000000,41679],"value":", numbers are in "},{"id":[1000000,41706],"value":"milliseconds it took to"},{"id":[1000000,41741],"value":"\nexecute the "},{"id":[1000000,41757],"value":"full trace:\n"},{"id":[1000000,41769],"span":4},{"id":[1000000,41754],"span":2},{"id":[1000000,41729],"span":9},{"id":[1000000,41696],"span":3},{"id":[1000000,41701],"span":4},{"id":[1000000,41699],"span":1},{"id":[1000000,41677],"span":1},{"id":[1000000,38016],"span":13},{"id":[1000000,40044],"span":1},{"id":[1000000,38015],"value":"\n"},{"id":[1000000,38004],"value":"\n"},{"id":[1000000,38006],"value":"```"},{"id":[1000000,38013],"span":1},{"id":[1000000,38029],"value":"\n============================================================================\nEditing trace: \"sveltecomponent\" , Transactions: 18335 , End length: 18451\n----------------------------------------------------------------------------\nAutomerge\n#1: 7325.6\n#2: 7281\n#3: 7286.3\nCorrect: false Length: 18451 Chunks: 0\nBest: 7281 Worst: 7325.6 Average: 7297.6 Tx/sec: 2,512\n----------------------------------------------------------------------------\nY.js\n#1: 381.2\n#2: 358.6\n#3: 360.1\nCorrect: true Length: 18451 Chunks: 4627\nBest: 358.6 Worst: 381.2 Average: 366.6 Tx/sec: 50,008\n----------------------------------------------------------------------------\nY.rs\n#1: 272.5\n#2: 256.6\n#3: 255.9\nCorrect: true Length: 18451 Chunks: 0\nBest: 255.9 Worst: 272.5 Average: 261.7 Tx/sec: 70,071\n----------------------------------------------------------------------------\nStringRga (json-joy)\n#1: 19.1\n#2: 8.1\n#3: 6.2\nCorrect: true Length: 18451 Chunks: 5813\nBest: 6.2 Worst: 19.1 Average: 11.1 Tx/sec: 1,650,406\n\n\n============================================================================\nEditing trace: \"seph-blog1\" , Transactions: 137154 , End length: 56769\n----------------------------------------------------------------------------\nAutomerge\n#1: 20531.4\n#2: 22141.3\n#3: 20786.2\nCorrect: false Length: 56769 Chunks: 0\nBest: 20531.4 Worst: 22141.3 Average: 21153 Tx/sec: 6,484\n----------------------------------------------------------------------------\nY.js\n#1: 2661\n#2: 2664.9\n#3: 2652.8\nCorrect: true Length: 56769 Chunks: 15092\nBest: 2652.8 Worst: 2664.9 Average: 2659.5 Tx/sec: 51,571\n----------------------------------------------------------------------------\nY.rs\n#1: 4534.2\n#2: 4411.7\n#3: 4488.2\nCorrect: false Length: 56777 Chunks: 0\nBest: 4411.7 Worst: 4534.2 Average: 4478.1 Tx/sec: 30,628\n----------------------------------------------------------------------------\nStringRga (json-joy)\n#1: 23.7\n#2: 24.8\n#3: 22.9\nCorrect: true Length: 56769 Chunks: 18222\nBest: 22.9 Worst: 24.8 Average: 23.8 Tx/sec: 5,763,130"},{"id":[1000000,40045],"value":"\n\n\n============================================================================\nEditing trace: \"rustcode\" , Transactions: 36981 , End length: 65218\n----------------------------------------------------------------------------\nY.js\n#1: 720\n#2: 717.4\n#3: 710.7\nCorrect: true Length: 65218 Chunks: 10044\nBest: 710.7 Worst: 720 Average: 716 Tx/sec: 51,647\n----------------------------------------------------------------------------\nY.rs\n#1: 856.8\n#2: 862.2\n#3: 857.9\nCorrect: false Length: 65235 Chunks: 0\nBest: 856.8 Worst: 862.2 Average: 859 Tx/sec: 43,053\n----------------------------------------------------------------------------\nStringRga (json-joy)\n#1: 19.4\n#2: 17.9\n#3: 12.5\nCorrect: true Length: 65218 Chunks: 12505\nBest: 12.5 Worst: 19.4 Average: 16.6 Tx/sec: 2,225,405\n\n\n============================================================================\nEditing trace: \"automerge-paper\" , Transactions: 259778 , End length: 104852\n----------------------------------------------------------------------------\nY.js\n#1: 4787.8\n#2: 4740\n#3: 4739.7\nCorrect: true Length: 104852 Chunks: 10971\nBest: 4739.7 Worst: 4787.8 Average: 4755.8 Tx/sec: 54,623\n----------------------------------------------------------------------------\nY.rs\n#1: 5923.9\n#2: 5869.7\n#3: 5904.8\nCorrect: true Length: 104852 Chunks: 0\nBest: 5869.7 Worst: 5923.9 Average: 5899.5 Tx/sec: 44,034\n----------------------------------------------------------------------------\nStringRga (json-joy)\n#1: 98.6\n#2: 49.6\n#3: 45.9\nCorrect: true Length: 104852 Chunks: 12387\nBest: 45.9 Worst: 98.6 Average: 64.7 Tx/sec: 4,014,031"},{"id":[1000000,40041],"span":1},{"id":[1000000,38009],"value":"\n```"},{"id":[1000000,41775],"value":"\n"},{"id":[1000000,42017],"value":"\n"},{"id":[1000000,42293],"value":"Notable"},{"id":[1000000,42024],"span":4},{"id":[1000000,42028],"value":" observations:"},{"id":[1000000,42019],"span":4},{"id":[1000000,42018],"value":"\n"},{"id":[1000000,41776],"value":"\n"},{"id":[1000000,41859],"value":"- Automerge participated only it the first two traces, as it was not able to handle the\n  larger traces.\n"},{"id":[1000000,41967],"value":"- Y.js is about 1"},{"id":[1000000,41988],"value":"0x faster th"},{"id":[1000000,42004],"value":"an Automerge."},{"id":[1000000,42042],"value":"\n- Y.rs is"},{"id":[1000000,42052],"span":8},{"id":[1000000,42060],"value":" slower "},{"id":[1000000,42073],"value":"than Y.js"},{"id":[1000000,42130],"value":" in all benchmarks"},{"id":[1000000,42082],"value":", but "},{"id":[1000000,42148],"value":"`sveltecomponent`, which is the smallest"},{"id":[1000000,42188],"span":1},{"id":[1000000,42128],"span":1},{"id":[1000000,42088],"span":37},{"id":[1000000,42068],"span":4},{"id":[1000000,42000],"span":2},{"id":[1000000,41984],"span":2},{"id":[1000000,41964],"span":2},{"id":[1000000,41777],"span":12},{"id":[1000000,41793],"span":65},{"id":[1000000,41789],"span":3},{"id":[1000000,38005],"value":"\n"},{"id":[1000000,42190],"value":"  trace.\n"},{"id":[1000000,42202],"value":"- `json-joy` is about "},{"id":[1000000,42289],"value":"50-"},{"id":[1000000,42224],"value":"100x faster than Y.js and 1,000"},{"id":[1000000,42257],"value":"x "},{"id":[1000000,42266],"value":"faster than Automerge."},{"id":[1000000,42917],"value":"\n\nY.rs "},{"id":[1000000,42928],"value":"implementation might have bugs, as in the above benchmarks it produces correct results\nin only 2 out of 5 traces."},{"id":[1000000,42924],"span":2},{"id":[1000000,42288],"value":"\n"},{"id":[1000000,42259],"span":6},{"id":[1000000,42255],"span":1},{"id":[1000000,42199],"span":2},{"id":[1000000,35459],"value":"\n"},{"id":[1000000,35367],"span":2},{"id":[1000000,35369],"value":"\n"},{"id":[1000000,35418],"value":"### Benchmarks against non-CRDT libraries"},{"id":[1000000,35388],"span":2},{"id":[1000000,35394],"span":19},{"id":[1000000,35415],"span":2},{"id":[1000000,35413],"span":1},{"id":[1000000,35390],"span":2},{"id":[1000000,35382],"span":3},{"id":[1000000,35378],"span":2},{"id":[1000000,35370],"span":2},{"id":[1000000,35373],"span":3},{"id":[1000000,35070],"span":3},{"id":[1000000,35074],"span":4},{"id":[1000000,35073],"span":1},{"id":[1000000,35078],"span":2},{"id":[1000000,35081],"span":3},{"id":[1000000,35080],"span":1},{"id":[1000000,35085],"span":26},{"id":[1000000,35156],"span":12},{"id":[1000000,35169],"span":27},{"id":[1000000,35111],"span":44},{"id":[1000000,35030],"span":5},{"id":[1000000,35009],"span":5},{"id":[1000000,34960],"span":6},{"id":[1000000,34941],"span":1},{"id":[1000000,34921],"span":1},{"id":[1000000,34920],"span":1},{"id":[1000000,34894],"span":2},{"id":[1000000,34858],"span":5},{"id":[1000000,34828],"span":1},{"id":[1000000,34801],"span":1},{"id":[1000000,34796],"span":1},{"id":[1000000,34792],"span":2},{"id":[1000000,34779],"span":7},{"id":[1000000,34636],"span":41},{"id":[1000000,34679],"span":15},{"id":[1000000,34696],"span":3},{"id":[1000000,34694],"span":1},{"id":[1000000,34677],"span":1},{"id":[1000000,34611],"span":1},{"id":[1000000,34606],"value":"\n"},{"id":[1000000,35462],"value":"\n`"},{"id":[1000000,35466],"value":"json-joy` "},{"id":[1000000,35481],"value":"RGA implementation i\n\n"},{"id":[1000000,35527],"value":"- `V8 strings` is a benchmark against native JavaScript strings, which are implemented in V8\n  JavaScript engine. It just uses `"},{"id":[1000000,42302],"value":"String.prototype"},{"id":[1000000,35655],"span":3},{"id":[1000000,35658],"value":".slice("},{"id":[1000000,35667],"value":")` to perform inse"},{"id":[1000000,35687],"value":"rt and delete operations."},{"id":[1000000,42318],"value":"\n"},{"id":[1000000,42322],"value":"- `rope.js` is a JavaScript library which implements a rope data structure, it is very fast\n  for large strings.\n"},{"id":[1000000,42438],"value":"- `diamond-types-node` is a WebAssembly module of"},{"id":[1000000,42600],"value":" a highly optimized"},{"id":[1000000,42487],"value":" "},{"id":[1000000,42511],"value":"Rust "},{"id":[1000000,42488],"value":"`diamond-types` library"},{"id":[1000000,42516],"value":"."},{"id":[1000000,42620],"value":"\n  "},{"id":[1000000,42517],"span":1},{"id":[1000000,42518],"value":"It appends"},{"id":[1000000,42624],"value":" "},{"id":[1000000,42539],"span":3},{"id":[1000000,42528],"span":1},{"id":[1000000,42529],"value":"operation"},{"id":[1000000,42542],"value":" metadata to "},{"id":[1000000,42579],"value":"a log and stores the "},{"id":[1000000,42625],"value":"string contents in a skip list"},{"id":[1000000,42660],"value":" powered by\n  a "},{"id":[1000000,42865],"value":"["},{"id":[1000000,42676],"value":"very fast"},{"id":[1000000,42866],"value":"]"},{"id":[1000000,42895],"value":"["},{"id":[1000000,42897],"value":"jump-rope-benchmarks"},{"id":[1000000,42896],"value":"]"},{"id":[1000000,42872],"span":19},{"id":[1000000,42893],"span":1},{"id":[1000000,42891],"span":1},{"id":[1000000,42870],"span":1},{"id":[1000000,42867],"span":2},{"id":[1000000,42685],"value":" ["},{"id":[1000000,42688],"value":"`JumpRope`"},{"id":[1000000,42699],"value":"]"},{"id":[1000000,42703],"value":"["},{"id":[1000000,42705],"value":"jump-rope"},{"id":[1000000,42715],"value":"] library."},{"id":[1000000,42704],"span":1},{"id":[1000000,42700],"span":2},{"id":[1000000,42687],"span":1},{"id":[1000000,42655],"span":1},{"id":[1000000,42555],"span":6},{"id":[1000000,42563],"span":1},{"id":[1000000,42568],"span":7},{"id":[1000000,42564],"span":2},{"id":[1000000,42561],"span":1},{"id":[1000000,42435],"span":2},{"id":[1000000,42319],"span":2},{"id":[1000000,35685],"span":1},{"id":[1000000,35665],"span":1},{"id":[1000000,35503],"span":2},{"id":[1000000,35508],"span":8},{"id":[1000000,35522],"span":4},{"id":[1000000,35516],"span":3},{"id":[1000000,35505],"span":2},{"id":[1000000,35476],"span":4},{"id":[1000000,35464],"span":1},{"id":[1000000,35460],"value":"\n\n"},{"id":[1000000,42657],"span":1},{"id":[1000000,27884],"span":3},{"id":[1000000,27891],"value":"\n### A not"},{"id":[1000000,27903],"value":"e on Rust fa"},{"id":[1000000,27917],"value":"d among "},{"id":[1000000,27928],"value":"CRDT librar"},{"id":[1000000,28546],"value":"y authors"},{"id":[1000000,27939],"span":3},{"id":[1000000,27942],"value":"\n\n"},{"id":[1000000,27946],"value":"Fir"},{"id":[1000000,27951],"value":"st"},{"id":[1000000,28555],"value":"ly"},{"id":[1000000,27955],"value":", we believe that Rust is a great language and would love to port "},{"id":[1000000,28023],"value":"`json-joy` to Rust "},{"id":[1000000,28049],"value":"some day.\n"},{"id":[1000000,28574],"value":"This comment is not about the Rust language, but rather about the Rust fad among CRDT library authors."},{"id":[1000000,28059],"span":5},{"id":[1000000,28558],"span":5},{"id":[1000000,28567],"span":3},{"id":[1000000,28563],"span":2},{"id":[1000000,28064],"span":3},{"id":[1000000,28069],"span":15},{"id":[1000000,28088],"span":44},{"id":[1000000,28572],"span":1},{"id":[1000000,28132],"span":26},{"id":[1000000,28158],"value":"\n"},{"id":[1000000,28163],"value":"\n"},{"id":[1000000,28228],"value":"It seems there is a pattern of JavaScript CRDT libraries being ported to Rust,"},{"id":[1000000,28676],"span":27},{"id":[1000000,28306],"value":" and"},{"id":[1000000,28340],"value":" here are the\nexamples:\n\n"},{"id":[1000000,28368],"value":"- [Automerge][automerge] is a JavaScript CRDT library, which "},{"id":[1000000,28453],"value":"has r"},{"id":[1000000,28462],"value":"e"},{"id":[1000000,28467],"value":"written its lower-level"},{"id":[1000000,30490],"value":" API"},{"id":[1000000,28502],"value":", wh"},{"id":[1000000,28508],"value":"at it\n  call"},{"id":[1000000,28707],"value":"s"},{"id":[1000000,28520],"value":" \"backe"},{"id":[1000000,28531],"value":"nd\""},{"id":[1000000,29049],"value":","},{"id":[1000000,28534],"value":" in"},{"id":[1000000,29050],"value":"to"},{"id":[1000000,28537],"value":" Rust."},{"id":[1000000,28708],"value":" Now, the Rust backe"},{"id":[1000000,28732],"value":"nd is compiled into WebAssembly module"},{"id":[1000000,29052],"value":" and published as\n  "},{"id":[1000000,29109],"value":"`"},{"id":[1000000,29072],"span":1},{"id":[1000000,29073],"value":"@automerge/automerge-wasm"},{"id":[1000000,29111],"value":"`"},{"id":[1000000,29098],"span":1},{"id":[1000000,29099],"value":" package"},{"id":[1000000,29116],"value":", wh"},{"id":[1000000,29126],"value":"ich the `@automerge/automerge"},{"id":[1000000,29162],"value":"`"},{"id":[1000000,29163],"span":19},{"id":[1000000,29155],"span":5},{"id":[1000000,29120],"span":3},{"id":[1000000,29112],"span":2},{"id":[1000000,29107],"span":1},{"id":[1000000,28770],"span":4},{"id":[1000000,28774],"value":" JavaScript"},{"id":[1000000,28787],"value":"\n  code "},{"id":[1000000,28800],"value":"calls into"},{"id":[1000000,28810],"span":17},{"id":[1000000,28827],"value":" through WebAssembly"},{"id":[1000000,29189],"value":" ABI for all i"},{"id":[1000000,29205],"value":"ts document operations"},{"id":[1000000,29203],"span":1},{"id":[1000000,28847],"value":". But"},{"id":[1000000,28860],"value":", as you can see from"},{"id":[1000000,29228],"value":"\n  "},{"id":[1000000,28881],"span":1},{"id":[1000000,28882],"value":"the benchmarks above,"},{"id":[1000000,29232],"value":" "},{"id":[1000000,28903],"span":1},{"id":[1000000,28951],"span":2},{"id":[1000000,28953],"value":"Automerge is still 1,000x slower than `json-joy`"},{"id":[1000000,30495],"value":"."},{"id":[1000000,29001],"span":30},{"id":[1000000,29234],"span":3},{"id":[1000000,29031],"span":11},{"id":[1000000,29042],"value":"\n"},{"id":[1000000,29046],"value":"- "},{"id":[1000000,29317],"value":"["},{"id":[1000000,29048],"value":"Y"},{"id":[1000000,29318],"value":".rs]"},{"id":[1000000,29376],"value":"["},{"id":[1000000,29378],"value":"yrs"},{"id":[1000000,29377],"value":"]"},{"id":[1000000,29322],"value":" is a Rust "},{"id":[1000000,29337],"value":"port of a JavaScript "},{"id":[1000000,30517],"value":"CRDT library"},{"id":[1000000,30499],"span":17},{"id":[1000000,30497],"span":1},{"id":[1000000,29358],"span":17},{"id":[1000000,29375],"value":" "},{"id":[1000000,29381],"value":"["},{"id":[1000000,29383],"value":"Y.js"},{"id":[1000000,29388],"value":"]["},{"id":[1000000,29391],"value":"yrs"},{"id":[1000000,29390],"value":"]"},{"id":[1000000,29394],"value":". "},{"id":[1000000,29399],"value":"As you can see from the\n  benchmarks above, Y."},{"id":[1000000,29528],"value":"js"},{"id":[1000000,29445],"span":2},{"id":[1000000,29447],"value":" is"},{"id":[1000000,29530],"value":" about"},{"id":[1000000,29450],"value":" 100x slower than `json-joy` and "},{"id":[1000000,29537],"value":"the Rust port "},{"id":[1000000,29694],"value":"("},{"id":[1000000,29551],"value":"which is exposed to\n"},{"id":[1000000,29717],"value":"  JavaScript"},{"id":[1000000,29729],"span":4},{"id":[1000000,29733],"value":" through WebAssembly `ywasm` package) is about the same speed as the JavaScript version"},{"id":[1000000,30532],"value":",\n  also about 100x slower than `json"},{"id":[1000000,30571],"value":"-joy`."},{"id":[1000000,30569],"span":1},{"id":[1000000,29820],"span":1},{"id":[1000000,29821],"value":"\n"},{"id":[1000000,29825],"value":"- `diamond-types` "},{"id":[1000000,30578],"value":"is a Rust library which "},{"id":[1000000,30604],"value":"intends to implement various "},{"id":[1000000,30638],"value":"novel "},{"id":[1000000,30633],"value":"CRDT"},{"id":[1000000,30645],"value":" algorithms. It is"},{"id":[1000000,30665],"value":"\n  written by Seph Gentle, the "},{"id":[1000000,30700],"value":"a"},{"id":[1000000,30705],"value":"uthor of numerous JavaScript collabora"},{"id":[1000000,30749],"value":"tive editing libraries. T"},{"id":[1000000,30782],"value":"he "},{"id":[1000000,30791],"value":"Rust\n"},{"id":[1000000,30802],"value":"  is chosen in search of per"},{"id":[1000000,30832],"value":"formance, the library is exposed to JavaScript "},{"id":[1000000,30881],"value":"through WebAssembly ABI"},{"id":[1000000,30906],"value":" from\n  the"},{"id":[1000000,30919],"value":" `diamond-types-node` "},{"id":[1000000,30947],"value":"NPM package."},{"id":[1000000,30941],"span":3},{"id":[1000000,30917],"span":1},{"id":[1000000,30904],"span":1},{"id":[1000000,30879],"span":1},{"id":[1000000,30830],"span":1},{"id":[1000000,30800],"span":1},{"id":[1000000,30796],"span":3},{"id":[1000000,30785],"span":3},{"id":[1000000,30774],"span":4},{"id":[1000000,30743],"span":3},{"id":[1000000,30701],"span":2},{"id":[1000000,30696],"span":2},{"id":[1000000,30663],"span":1},{"id":[1000000,30637],"span":1},{"id":[1000000,30602],"span":1},{"id":[1000000,29843],"span":3},{"id":[1000000,29846],"value":"\n\n"},{"id":[1000000,29893],"value":"As a rule of thumb, an equivalent algorithm implemented in Rust will be about "},{"id":[1000000,30103],"value":"2"},{"id":[1000000,29992],"span":1},{"id":[1000000,29993],"value":"-"},{"id":[1000000,30105],"value":"5"},{"id":[1000000,29996],"span":1},{"id":[1000000,29994],"span":1},{"id":[1000000,29971],"span":2},{"id":[1000000,29973],"value":"x faster than the"},{"id":[1000000,29997],"value":"\nsame algorithm implemented in JavaScript. "},{"id":[1000000,30106],"value":"However, when compiling "},{"id":[1000000,30132],"value":"Rust to WebAssembly, "},{"id":[1000000,30166],"value":"it loses about\n3"},{"id":[1000000,30186],"value":"-4x "},{"id":[1000000,30192],"value":"of its "},{"id":[1000000,30960],"value":"performance"},{"id":[1000000,30199],"span":5},{"id":[1000000,30290],"value":". So, net-net"},{"id":[1000000,30305],"span":1},{"id":[1000000,30306],"value":" code "},{"id":[1000000,30316],"value":"ported from JavaScript to Rust and then compiled to WebAssembly\nfor consumption in JavaScript will be about the same s"},{"id":[1000000,30438],"value":"peed as "},{"id":[1000000,30450],"value":"the original JavaScript code."},{"id":[1000000,30972],"value":"\n"},{"id":[1000000,31099],"value":"\n"},{"id":[1000000,31185],"value":"However, packaging code into WebAssembly modules has downsides. Firstly, WebAssembly modules "},{"id":[1000000,31284],"value":"limit\nthe data structures "},{"id":[1000000,31315],"value":"one can share between "},{"id":[1000000,31339],"value":"the JavaScript and WebAssembly code."},{"id":[1000000,31743],"value":"\n\n"},{"id":[1000000,31375],"span":1},{"id":[1000000,31376],"value":"Secondly"},{"id":[1000000,31399],"value":", WebAsse"},{"id":[1000000,31412],"value":"mbly"},{"id":[1000000,31747],"value":" "},{"id":[1000000,31416],"span":1},{"id":[1000000,31433],"value":"modules result in larger bundle sizes, which is a problem for web applications."},{"id":[1000000,31749],"value":"\n"},{"id":[1000000,31536],"span":1},{"id":[1000000,31563],"value":"W"},{"id":[1000000,31578],"value":"ASM modules can easily"},{"id":[1000000,31751],"value":" "},{"id":[1000000,31600],"span":1},{"id":[1000000,31601],"value":"reach 100"},{"id":[1000000,31809],"value":" "},{"id":[1000000,31612],"value":"KB in"},{"id":[1000000,31625],"value":" size, sometimes even 1"},{"id":[1000000,31810],"value":" "},{"id":[1000000,31648],"value":"MB. Below are the "},{"id":[1000000,31671],"value":"real-world sizes of the"},{"id":[1000000,31753],"value":"\n"},{"id":[1000000,31694],"span":1},{"id":[1000000,31695],"value":"WASM modules for the"},{"id":[1000000,31755],"value":" "},{"id":[1000000,31715],"span":1},{"id":[1000000,31716],"value":"libraries mentioned above:"},{"id":[1000000,31756],"value":"\n\n"},{"id":[1000000,31771],"value":"`@automerge/automerge-wasm` - 1."},{"id":[1000000,31807],"value":"3 "},{"id":[1000000,31803],"span":1},{"id":[1000000,31804],"value":"MB"},{"id":[1000000,31811],"value":"\n"},{"id":[1000000,31854],"value":"\n![Character merging into block](https://streamich.github.io/json-joy/"},{"id":[1000000,31969],"value":"blog/images/wasm-sizes/automerge-wasm.png"},{"id":[1000000,32029],"value":")"},{"id":[1000000,32010],"value":"\n\n`ywasm` - 1"},{"id":[1000000,32023],"span":2},{"id":[1000000,32025],"value":" MB"},{"id":[1000000,32032],"value":"\n\n![Character merging into block](https://streamich.github.io/json-joy/blog/images/wasm-sizes/"},{"id":[1000000,32147],"value":"y"},{"id":[1000000,32126],"span":10},{"id":[1000000,32136],"value":"wasm.png)"},{"id":[1000000,31924],"span":42},{"id":[1000000,31812],"span":42},{"id":[1000000,31758],"span":12},{"id":[1000000,31666],"span":4},{"id":[1000000,31617],"span":4},{"id":[1000000,31610],"span":1},{"id":[1000000,31564],"span":7},{"id":[1000000,31537],"span":25},{"id":[1000000,31512],"span":21},{"id":[1000000,31417],"span":15},{"id":[1000000,31408],"span":2},{"id":[1000000,31384],"span":13},{"id":[1000000,31337],"span":1},{"id":[1000000,31310],"span":4},{"id":[1000000,31278],"span":3},{"id":[1000000,31100],"span":1},{"id":[1000000,31103],"span":43},{"id":[1000000,31164],"span":20},{"id":[1000000,31146],"span":9},{"id":[1000000,31101],"span":1},{"id":[1000000,30973],"span":1},{"id":[1000000,31007],"span":21},{"id":[1000000,31034],"span":3},{"id":[1000000,31039],"span":18},{"id":[1000000,31059],"span":13},{"id":[1000000,31073],"span":26},{"id":[1000000,31072],"span":1},{"id":[1000000,31057],"span":1},{"id":[1000000,31037],"span":1},{"id":[1000000,31032],"span":1},{"id":[1000000,31028],"span":2},{"id":[1000000,30974],"span":4},{"id":[1000000,30984],"span":21},{"id":[1000000,30978],"span":3},{"id":[1000000,30479],"span":8},{"id":[1000000,30446],"span":3},{"id":[1000000,30434],"span":2},{"id":[1000000,30312],"span":2},{"id":[1000000,30303],"span":1},{"id":[1000000,30204],"span":85},{"id":[1000000,30190],"span":1},{"id":[1000000,30182],"span":2},{"id":[1000000,30153],"span":10},{"id":[1000000,30130],"span":1},{"id":[1000000,30040],"span":61},{"id":[1000000,29848],"span":44},{"id":[1000000,29822],"span":2},{"id":[1000000,29571],"span":2},{"id":[1000000,29578],"span":11},{"id":[1000000,29674],"span":4},{"id":[1000000,29589],"span":20},{"id":[1000000,29678],"span":15},{"id":[1000000,29696],"span":20},{"id":[1000000,29693],"span":1},{"id":[1000000,29609],"span":64},{"id":[1000000,29573],"span":4},{"id":[1000000,29483],"span":43},{"id":[1000000,29396],"span":2},{"id":[1000000,29382],"span":1},{"id":[1000000,29335],"span":1},{"id":[1000000,29333],"span":1},{"id":[1000000,29043],"span":2},{"id":[1000000,28904],"span":22},{"id":[1000000,28932],"span":18},{"id":[1000000,28926],"span":3},{"id":[1000000,28852],"span":4},{"id":[1000000,28795],"span":4},{"id":[1000000,28785],"span":1},{"id":[1000000,28728],"span":2},{"id":[1000000,28527],"span":2},{"id":[1000000,28506],"span":1},{"id":[1000000,28490],"span":9},{"id":[1000000,28463],"span":2},{"id":[1000000,28458],"span":2},{"id":[1000000,28429],"span":19},{"id":[1000000,28365],"span":2},{"id":[1000000,28310],"span":15},{"id":[1000000,28164],"span":31},{"id":[1000000,28215],"span":11},{"id":[1000000,28195],"span":20},{"id":[1000000,28226],"span":1},{"id":[1000000,28159],"span":2},{"id":[1000000,28084],"span":3},{"id":[1000000,28067],"span":1},{"id":[1000000,28042],"span":2},{"id":[1000000,28046],"span":2},{"id":[1000000,28044],"span":1},{"id":[1000000,28021],"span":1},{"id":[1000000,27953],"span":1},{"id":[1000000,27949],"span":1},{"id":[1000000,27944],"span":1},{"id":[1000000,27925],"span":2},{"id":[1000000,27915],"span":1},{"id":[1000000,27901],"span":1},{"id":[1000000,27887],"span":2},{"id":[1000000,27871],"span":4},{"id":[1000000,27735],"span":22},{"id":[1000000,27759],"span":1},{"id":[1000000,27761],"span":9},{"id":[1000000,27771],"span":2},{"id":[1000000,27760],"span":1},{"id":[1000000,27757],"span":1},{"id":[1000000,27697],"span":7},{"id":[1000000,27637],"span":3},{"id":[1000000,27376],"span":1},{"id":[1000000,27365],"span":1},{"id":[1000000,27346],"span":1},{"id":[1000000,27312],"span":1},{"id":[1000000,27133],"span":2},{"id":[1000000,27087],"span":4},{"id":[1000000,27049],"span":8},{"id":[1000000,27042],"span":2},{"id":[1000000,27028],"span":2},{"id":[1000000,27013],"span":3},{"id":[1000000,26841],"span":1},{"id":[1000000,26819],"span":4},{"id":[1000000,26779],"span":2},{"id":[1000000,26639],"span":4},{"id":[1000000,26626],"span":3},{"id":[1000000,26614],"span":5},{"id":[1000000,26600],"span":7},{"id":[1000000,10559],"value":"\n"},{"id":[1000000,32148],"value":"\n`"},{"id":[1000000,32268],"value":"diamond-types-node"},{"id":[1000000,32150],"span":5},{"id":[1000000,32155],"value":"` - "},{"id":[1000000,32287],"value":"300 KB"},{"id":[1000000,32159],"span":4},{"id":[1000000,32163],"value":"\n\n![Character merging into block](https://streamich.github.io/json-joy/blog/images/wasm-sizes/"},{"id":[1000000,32295],"value":"diamond-types-node"},{"id":[1000000,32257],"span":5},{"id":[1000000,32262],"value":".png)"},{"id":[1000000,32313],"value":"\n\n"},{"id":[1000000,31745],"value":"\n"},{"id":[1000000,28705],"value":"\n\n"},{"id":[1000000,10464],"span":1},{"id":[1000000,10461],"span":1},{"id":[1000000,10330],"span":1},{"id":[1000000,10288],"span":2},{"id":[1000000,10268],"span":2},{"id":[1000000,10254],"span":3},{"id":[1000000,10248],"span":1},{"id":[1000000,10241],"span":1},{"id":[1000000,10203],"value":"\n"},{"id":[1000000,32315],"span":1},{"id":[1000000,32317],"span":11},{"id":[1000000,32329],"span":43},{"id":[1000000,32464],"span":1},{"id":[1000000,32372],"span":91},{"id":[1000000,32480],"span":1},{"id":[1000000,32481],"value":"["},{"id":[1000000,32483],"value":"rga"},{"id":[1000000,32487],"value":"]: https://www.sciencedirect.com/science/article/abs/pii/S0743731510002716"},{"id":[1000000,32568],"value":"\n[causal-tree]: https://www.researchgate.net/publication/221367739_Deep_hypertext_with_embedded_revision_control_implemented_in_regular_expressions"},{"id":[1000000,32482],"span":1},{"id":[1000000,32316],"span":1},{"id":[1000000,10204],"value":"\n"},{"id":[1000000,13247],"value":"["},{"id":[1000000,13257],"value":"high"},{"id":[1000000,13263],"value":"-responsiveness-crdts"},{"id":[1000000,13285],"value":"]: https://pages.lip6.fr/Marc.Shapiro/papers/rgasplit-group2016-11.pdf\n"},{"id":[1000000,19584],"value":"["},{"id":[1000000,19586],"value":"rope"},{"id":[1000000,19591],"value":"]: https://en.wikipedia.org/wiki/Rope_(data_structure)"},{"id":[1000000,27539],"value":"\n["},{"id":[1000000,27542],"value":"crdt-benchmarks"},{"id":[1000000,27558],"value":"]: https://github.com/josephg/crdt-benchmarks"},{"id":[1000000,27541],"span":1},{"id":[1000000,19645],"value":"\n"},{"id":[1000000,27138],"value":"["},{"id":[1000000,27140],"value":"datasets"},{"id":[1000000,27149],"value":"]: "},{"id":[1000000,27154],"value":"https://github.com/josephg/crdt-benchmarks/blob/7b0b90e912cfa88aff8c6336917343ee08653e51/README.md#data-sets\n"},{"id":[1000000,27816],"value":"["},{"id":[1000000,27818],"value":"automerge"},{"id":[1000000,27828],"value":"]: https://github.com/automerge/automerge\n"},{"id":[1000000,29239],"value":"["},{"id":[1000000,29241],"value":"yrs"},{"id":[1000000,29245],"value":"]: https://github.com/y-crdt/y-crdt\n["},{"id":[1000000,29283],"value":"yjs"},{"id":[1000000,29287],"value":"]: https://github.com/yjs/yjs\n"},{"id":[1000000,32818],"value":"["},{"id":[1000000,32822],"value":"vscode-tracker"},{"id":[1000000,32837],"value":"]: https://github.com/josephg/vscode-tracker\n"},{"id":[1000000,33696],"value":"["},{"id":[1000000,33698],"value":"seph-blog1"},{"id":[1000000,33709],"value":"]: https://josephg.com/blog/crdts-go-brrr/\n"},{"id":[1000000,42790],"value":"[jump-rope]: https://github.com/josephg/jumprope-rs"},{"id":[1000000,42841],"span":11},{"id":[1000000,42852],"value":"\n"},{"id":[1000000,42725],"value":"["},{"id":[1000000,42727],"value":"jump-rope"},{"id":[1000000,42854],"value":"-benchmarks"},{"id":[1000000,42737],"value":"]: https://github.com/josephg/jumprope-rs#benchmarks\n"},{"id":[1000000,42726],"span":1},{"id":[1000000,33697],"span":1},{"id":[1000000,32820],"span":1},{"id":[1000000,32819],"span":1},{"id":[1000000,29282],"span":1},{"id":[1000000,29240],"span":1},{"id":[1000000,29237],"span":1},{"id":[1000000,27817],"span":1},{"id":[1000000,27152],"span":1},{"id":[1000000,27139],"span":1},{"id":[1000000,19585],"span":1},{"id":[1000000,13261],"span":1},{"id":[1000000,13249],"span":7},{"id":[1000000,13248],"span":1},{"id":[1000000,10122],"span":20},{"id":[1000000,10146],"span":1},{"id":[1000000,10142],"span":2},{"id":[1000000,9529],"span":1},{"id":[1000000,9510],"span":1},{"id":[1000000,9501],"span":1},{"id":[1000000,9485],"span":1},{"id":[1000000,9409],"span":1},{"id":[1000000,9387],"span":1},{"id":[1000000,8928],"span":1},{"id":[1000000,8916],"span":1},{"id":[1000000,8860],"span":10},{"id":[1000000,8872],"span":3},{"id":[1000000,8870],"span":1},{"id":[1000000,8841],"span":2},{"id":[1000000,8791],"span":3},{"id":[1000000,8719],"span":21},{"id":[1000000,8716],"span":1},{"id":[1000000,8663],"span":1},{"id":[1000000,6193],"span":1},{"id":[1000000,6182],"span":8},{"id":[1000000,6134],"span":1},{"id":[1000000,6124],"span":1},{"id":[1000000,6093],"span":2},{"id":[1000000,6016],"span":12},{"id":[1000000,5976],"span":1},{"id":[1000000,5817],"span":1},{"id":[1000000,5225],"span":1},{"id":[1000000,5102],"span":5},{"id":[1000000,5099],"span":1},{"id":[1000000,5072],"span":2},{"id":[1000000,3706],"span":3},{"id":[1000000,3681],"span":1},{"id":[1000000,3658],"span":4},{"id":[1000000,3654],"span":2},{"id":[1000000,3637],"span":1},{"id":[1000000,3506],"span":2},{"id":[1000000,3481],"span":9},{"id":[1000000,3445],"span":1},{"id":[1000000,3355],"span":1},{"id":[1000000,3338],"span":1},{"id":[1000000,2663],"span":4},{"id":[1000000,1709],"span":1},{"id":[1000000,1698],"span":2},{"id":[1000000,1687],"span":1},{"id":[1000000,1376],"span":1},{"id":[1000000,1352],"span":1},{"id":[1000000,1317],"span":1},{"id":[1000000,1315],"span":1},{"id":[1000000,1302],"span":1},{"id":[1000000,1242],"span":5},{"id":[1000000,1028],"span":56},{"id":[1000000,988],"span":5},{"id":[1000000,897],"span":1},{"id":[1000000,827],"span":7},{"id":[1000000,527],"span":1},{"id":[1000000,366],"span":1},{"id":[1000000,339],"span":2},{"id":[1000000,302],"span":1},{"id":[1000000,296],"span":1},{"id":[1000000,230],"span":1},{"id":[1000000,204],"span":1},{"id":[1000000,174],"span":1},{"id":[1000000,181],"span":1},{"id":[1000000,175],"span":3},{"id":[1000000,115],"span":1},{"id":[1000000,49],"span":1},{"id":[1000000,13],"span":1}]}}}